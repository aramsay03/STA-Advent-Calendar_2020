var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// node_modules/es6-promise/dist/es6-promise.js
var require_es6_promise = __commonJS((exports2, module2) => {
  /*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   v4.2.8+1e68dce6
   */
  (function(global2, factory) {
    typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.ES6Promise = factory();
  })(exports2, function() {
    "use strict";
    function objectOrFunction(x) {
      var type = typeof x;
      return x !== null && (type === "object" || type === "function");
    }
    function isFunction(x) {
      return typeof x === "function";
    }
    var _isArray = void 0;
    if (Array.isArray) {
      _isArray = Array.isArray;
    } else {
      _isArray = function(x) {
        return Object.prototype.toString.call(x) === "[object Array]";
      };
    }
    var isArray = _isArray;
    var len = 0;
    var vertxNext = void 0;
    var customSchedulerFn = void 0;
    var asap = function asap2(callback, arg) {
      queue[len] = callback;
      queue[len + 1] = arg;
      len += 2;
      if (len === 2) {
        if (customSchedulerFn) {
          customSchedulerFn(flush);
        } else {
          scheduleFlush();
        }
      }
    };
    function setScheduler(scheduleFn) {
      customSchedulerFn = scheduleFn;
    }
    function setAsap(asapFn) {
      asap = asapFn;
    }
    var browserWindow = typeof window !== "undefined" ? window : void 0;
    var browserGlobal = browserWindow || {};
    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
    var isNode = typeof self === "undefined" && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
    var isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";
    function useNextTick() {
      return function() {
        return process.nextTick(flush);
      };
    }
    function useVertxTimer() {
      if (typeof vertxNext !== "undefined") {
        return function() {
          vertxNext(flush);
        };
      }
      return useSetTimeout();
    }
    function useMutationObserver() {
      var iterations = 0;
      var observer = new BrowserMutationObserver(flush);
      var node = document.createTextNode("");
      observer.observe(node, {characterData: true});
      return function() {
        node.data = iterations = ++iterations % 2;
      };
    }
    function useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = flush;
      return function() {
        return channel.port2.postMessage(0);
      };
    }
    function useSetTimeout() {
      var globalSetTimeout = setTimeout;
      return function() {
        return globalSetTimeout(flush, 1);
      };
    }
    var queue = new Array(1e3);
    function flush() {
      for (var i = 0; i < len; i += 2) {
        var callback = queue[i];
        var arg = queue[i + 1];
        callback(arg);
        queue[i] = void 0;
        queue[i + 1] = void 0;
      }
      len = 0;
    }
    function attemptVertx() {
      try {
        var vertx = Function("return this")().require("vertx");
        vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return useVertxTimer();
      } catch (e) {
        return useSetTimeout();
      }
    }
    var scheduleFlush = void 0;
    if (isNode) {
      scheduleFlush = useNextTick();
    } else if (BrowserMutationObserver) {
      scheduleFlush = useMutationObserver();
    } else if (isWorker) {
      scheduleFlush = useMessageChannel();
    } else if (browserWindow === void 0 && true) {
      scheduleFlush = attemptVertx();
    } else {
      scheduleFlush = useSetTimeout();
    }
    function then(onFulfillment, onRejection) {
      var parent = this;
      var child = new this.constructor(noop);
      if (child[PROMISE_ID] === void 0) {
        makePromise(child);
      }
      var _state = parent._state;
      if (_state) {
        var callback = arguments[_state - 1];
        asap(function() {
          return invokeCallback(_state, child, callback, parent._result);
        });
      } else {
        subscribe(parent, child, onFulfillment, onRejection);
      }
      return child;
    }
    function resolve$1(object) {
      var Constructor = this;
      if (object && typeof object === "object" && object.constructor === Constructor) {
        return object;
      }
      var promise = new Constructor(noop);
      resolve(promise, object);
      return promise;
    }
    var PROMISE_ID = Math.random().toString(36).substring(2);
    function noop() {
    }
    var PENDING = void 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    function selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }
    function cannotReturnOwn() {
      return new TypeError("A promises callback cannot return that same promise.");
    }
    function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
      try {
        then$$1.call(value, fulfillmentHandler, rejectionHandler);
      } catch (e) {
        return e;
      }
    }
    function handleForeignThenable(promise, thenable, then$$1) {
      asap(function(promise2) {
        var sealed = false;
        var error = tryThen(then$$1, thenable, function(value) {
          if (sealed) {
            return;
          }
          sealed = true;
          if (thenable !== value) {
            resolve(promise2, value);
          } else {
            fulfill(promise2, value);
          }
        }, function(reason) {
          if (sealed) {
            return;
          }
          sealed = true;
          reject(promise2, reason);
        }, "Settle: " + (promise2._label || " unknown promise"));
        if (!sealed && error) {
          sealed = true;
          reject(promise2, error);
        }
      }, promise);
    }
    function handleOwnThenable(promise, thenable) {
      if (thenable._state === FULFILLED) {
        fulfill(promise, thenable._result);
      } else if (thenable._state === REJECTED) {
        reject(promise, thenable._result);
      } else {
        subscribe(thenable, void 0, function(value) {
          return resolve(promise, value);
        }, function(reason) {
          return reject(promise, reason);
        });
      }
    }
    function handleMaybeThenable(promise, maybeThenable, then$$1) {
      if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
        handleOwnThenable(promise, maybeThenable);
      } else {
        if (then$$1 === void 0) {
          fulfill(promise, maybeThenable);
        } else if (isFunction(then$$1)) {
          handleForeignThenable(promise, maybeThenable, then$$1);
        } else {
          fulfill(promise, maybeThenable);
        }
      }
    }
    function resolve(promise, value) {
      if (promise === value) {
        reject(promise, selfFulfillment());
      } else if (objectOrFunction(value)) {
        var then$$1 = void 0;
        try {
          then$$1 = value.then;
        } catch (error) {
          reject(promise, error);
          return;
        }
        handleMaybeThenable(promise, value, then$$1);
      } else {
        fulfill(promise, value);
      }
    }
    function publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }
      publish(promise);
    }
    function fulfill(promise, value) {
      if (promise._state !== PENDING) {
        return;
      }
      promise._result = value;
      promise._state = FULFILLED;
      if (promise._subscribers.length !== 0) {
        asap(publish, promise);
      }
    }
    function reject(promise, reason) {
      if (promise._state !== PENDING) {
        return;
      }
      promise._state = REJECTED;
      promise._result = reason;
      asap(publishRejection, promise);
    }
    function subscribe(parent, child, onFulfillment, onRejection) {
      var _subscribers = parent._subscribers;
      var length = _subscribers.length;
      parent._onerror = null;
      _subscribers[length] = child;
      _subscribers[length + FULFILLED] = onFulfillment;
      _subscribers[length + REJECTED] = onRejection;
      if (length === 0 && parent._state) {
        asap(publish, parent);
      }
    }
    function publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;
      if (subscribers.length === 0) {
        return;
      }
      var child = void 0, callback = void 0, detail = promise._result;
      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];
        if (child) {
          invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }
      promise._subscribers.length = 0;
    }
    function invokeCallback(settled, promise, callback, detail) {
      var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
      if (hasCallback) {
        try {
          value = callback(detail);
        } catch (e) {
          succeeded = false;
          error = e;
        }
        if (promise === value) {
          reject(promise, cannotReturnOwn());
          return;
        }
      } else {
        value = detail;
      }
      if (promise._state !== PENDING) {
      } else if (hasCallback && succeeded) {
        resolve(promise, value);
      } else if (succeeded === false) {
        reject(promise, error);
      } else if (settled === FULFILLED) {
        fulfill(promise, value);
      } else if (settled === REJECTED) {
        reject(promise, value);
      }
    }
    function initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value) {
          resolve(promise, value);
        }, function rejectPromise(reason) {
          reject(promise, reason);
        });
      } catch (e) {
        reject(promise, e);
      }
    }
    var id = 0;
    function nextId() {
      return id++;
    }
    function makePromise(promise) {
      promise[PROMISE_ID] = id++;
      promise._state = void 0;
      promise._result = void 0;
      promise._subscribers = [];
    }
    function validationError() {
      return new Error("Array Methods must be provided an Array");
    }
    var Enumerator = function() {
      function Enumerator2(Constructor, input) {
        this._instanceConstructor = Constructor;
        this.promise = new Constructor(noop);
        if (!this.promise[PROMISE_ID]) {
          makePromise(this.promise);
        }
        if (isArray(input)) {
          this.length = input.length;
          this._remaining = input.length;
          this._result = new Array(this.length);
          if (this.length === 0) {
            fulfill(this.promise, this._result);
          } else {
            this.length = this.length || 0;
            this._enumerate(input);
            if (this._remaining === 0) {
              fulfill(this.promise, this._result);
            }
          }
        } else {
          reject(this.promise, validationError());
        }
      }
      Enumerator2.prototype._enumerate = function _enumerate(input) {
        for (var i = 0; this._state === PENDING && i < input.length; i++) {
          this._eachEntry(input[i], i);
        }
      };
      Enumerator2.prototype._eachEntry = function _eachEntry(entry, i) {
        var c = this._instanceConstructor;
        var resolve$$1 = c.resolve;
        if (resolve$$1 === resolve$1) {
          var _then = void 0;
          var error = void 0;
          var didError = false;
          try {
            _then = entry.then;
          } catch (e) {
            didError = true;
            error = e;
          }
          if (_then === then && entry._state !== PENDING) {
            this._settledAt(entry._state, i, entry._result);
          } else if (typeof _then !== "function") {
            this._remaining--;
            this._result[i] = entry;
          } else if (c === Promise$1) {
            var promise = new c(noop);
            if (didError) {
              reject(promise, error);
            } else {
              handleMaybeThenable(promise, entry, _then);
            }
            this._willSettleAt(promise, i);
          } else {
            this._willSettleAt(new c(function(resolve$$12) {
              return resolve$$12(entry);
            }), i);
          }
        } else {
          this._willSettleAt(resolve$$1(entry), i);
        }
      };
      Enumerator2.prototype._settledAt = function _settledAt(state, i, value) {
        var promise = this.promise;
        if (promise._state === PENDING) {
          this._remaining--;
          if (state === REJECTED) {
            reject(promise, value);
          } else {
            this._result[i] = value;
          }
        }
        if (this._remaining === 0) {
          fulfill(promise, this._result);
        }
      };
      Enumerator2.prototype._willSettleAt = function _willSettleAt(promise, i) {
        var enumerator = this;
        subscribe(promise, void 0, function(value) {
          return enumerator._settledAt(FULFILLED, i, value);
        }, function(reason) {
          return enumerator._settledAt(REJECTED, i, reason);
        });
      };
      return Enumerator2;
    }();
    function all(entries) {
      return new Enumerator(this, entries).promise;
    }
    function race(entries) {
      var Constructor = this;
      if (!isArray(entries)) {
        return new Constructor(function(_, reject2) {
          return reject2(new TypeError("You must pass an array to race."));
        });
      } else {
        return new Constructor(function(resolve2, reject2) {
          var length = entries.length;
          for (var i = 0; i < length; i++) {
            Constructor.resolve(entries[i]).then(resolve2, reject2);
          }
        });
      }
    }
    function reject$1(reason) {
      var Constructor = this;
      var promise = new Constructor(noop);
      reject(promise, reason);
      return promise;
    }
    function needsResolver() {
      throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
    }
    function needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }
    var Promise$1 = function() {
      function Promise2(resolver) {
        this[PROMISE_ID] = nextId();
        this._result = this._state = void 0;
        this._subscribers = [];
        if (noop !== resolver) {
          typeof resolver !== "function" && needsResolver();
          this instanceof Promise2 ? initializePromise(this, resolver) : needsNew();
        }
      }
      Promise2.prototype.catch = function _catch(onRejection) {
        return this.then(null, onRejection);
      };
      Promise2.prototype.finally = function _finally(callback) {
        var promise = this;
        var constructor = promise.constructor;
        if (isFunction(callback)) {
          return promise.then(function(value) {
            return constructor.resolve(callback()).then(function() {
              return value;
            });
          }, function(reason) {
            return constructor.resolve(callback()).then(function() {
              throw reason;
            });
          });
        }
        return promise.then(callback, callback);
      };
      return Promise2;
    }();
    Promise$1.prototype.then = then;
    Promise$1.all = all;
    Promise$1.race = race;
    Promise$1.resolve = resolve$1;
    Promise$1.reject = reject$1;
    Promise$1._setScheduler = setScheduler;
    Promise$1._setAsap = setAsap;
    Promise$1._asap = asap;
    function polyfill() {
      var local = void 0;
      if (typeof global !== "undefined") {
        local = global;
      } else if (typeof self !== "undefined") {
        local = self;
      } else {
        try {
          local = Function("return this")();
        } catch (e) {
          throw new Error("polyfill failed because global object is unavailable in this environment");
        }
      }
      var P = local.Promise;
      if (P) {
        var promiseToString = null;
        try {
          promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
        }
        if (promiseToString === "[object Promise]" && !P.cast) {
          return;
        }
      }
      local.Promise = Promise$1;
    }
    Promise$1.polyfill = polyfill;
    Promise$1.Promise = Promise$1;
    return Promise$1;
  });
});

// node_modules/node-fetch/lib/index.mjs
var require_lib = __commonJS((exports2) => {
  __export(exports2, {
    FetchError: () => FetchError,
    Headers: () => Headers,
    Request: () => Request,
    Response: () => Response,
    default: () => lib_default
  });
  var stream = __toModule(require("stream"));
  var http2 = __toModule(require("http"));
  var url = __toModule(require("url"));
  var https2 = __toModule(require("https"));
  var zlib2 = __toModule(require("zlib"));
  var Readable = stream.default.Readable;
  var BUFFER = Symbol("buffer");
  var TYPE = Symbol("type");
  var Blob = class {
    constructor() {
      this[TYPE] = "";
      const blobParts = arguments[0];
      const options = arguments[1];
      const buffers = [];
      let size = 0;
      if (blobParts) {
        const a = blobParts;
        const length = Number(a.length);
        for (let i = 0; i < length; i++) {
          const element = a[i];
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      let type = options && options.type !== void 0 && String(options.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    get size() {
      return this[BUFFER].length;
    }
    get type() {
      return this[TYPE];
    }
    text() {
      return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
      const buf = this[BUFFER];
      const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
    stream() {
      const readable = new Readable();
      readable._read = function() {
      };
      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const size = this.size;
      const start = arguments[0];
      const end = arguments[1];
      let relativeStart, relativeEnd;
      if (start === void 0) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }
      if (end === void 0) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }
      const span = Math.max(relativeEnd - relativeStart, 0);
      const buffer = this[BUFFER];
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      const blob = new Blob([], {type: arguments[2]});
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  };
  Object.defineProperties(Blob.prototype, {
    size: {enumerable: true},
    type: {enumerable: true},
    slice: {enumerable: true}
  });
  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: "Blob",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = "FetchError";
  var convert;
  try {
    convert = require("encoding").convert;
  } catch (e) {
  }
  var INTERNALS = Symbol("Body internals");
  var PassThrough = stream.default.PassThrough;
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof stream.default) {
      body.on("error", function(err) {
        const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error;
      });
    }
  }
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    arrayBuffer() {
      return consumeBody.call(this).then(function(buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    blob() {
      let ct = this.headers && this.headers.get("content-type") || "";
      return consumeBody.call(this).then(function(buf) {
        return Object.assign(new Blob([], {
          type: ct.toLowerCase()
        }), {
          [BUFFER]: buf
        });
      });
    },
    json() {
      var _this2 = this;
      return consumeBody.call(this).then(function(buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
        }
      });
    },
    text() {
      return consumeBody.call(this).then(function(buffer) {
        return buffer.toString();
      });
    },
    buffer() {
      return consumeBody.call(this);
    },
    textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function(buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };
  Object.defineProperties(Body.prototype, {
    body: {enumerable: true},
    bodyUsed: {enumerable: true},
    arrayBuffer: {enumerable: true},
    blob: {enumerable: true},
    json: {enumerable: true},
    text: {enumerable: true}
  });
  Body.mixIn = function(proto) {
    for (const name of Object.getOwnPropertyNames(Body.prototype)) {
      if (!(name in proto)) {
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
        Object.defineProperty(proto, name, desc);
      }
    }
  };
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop();
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone(instance) {
    let p1, p2;
    let body = instance.body;
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  Body.Promise = global.Promise;
  var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map, name) {
    name = name.toLowerCase();
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  var MAP = Symbol("map");
  var Headers = class {
    constructor() {
      let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
      this[MAP] = Object.create(null);
      if (init instanceof Headers) {
        const rawHeaders = init.raw();
        const headerNames = Object.keys(rawHeaders);
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value);
          }
        }
        return;
      }
      if (init == null)
        ;
      else if (typeof init === "object") {
        const method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          const pairs = [];
          for (const pair of init) {
            if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
              throw new TypeError("Each header pair must be iterable");
            }
            pairs.push(Array.from(pair));
          }
          for (const pair of pairs) {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          for (const key of Object.keys(init)) {
            const value = init[key];
            this.append(key, value);
          }
        }
      } else {
        throw new TypeError("Provided initializer must be an object");
      }
    }
    get(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key === void 0) {
        return null;
      }
      return this[MAP][key].join(", ");
    }
    forEach(callback) {
      let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      let pairs = getHeaders(this);
      let i = 0;
      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        const name = _pairs$i[0], value = _pairs$i[1];
        callback.call(thisArg, value, name, this);
        pairs = getHeaders(this);
        i++;
      }
    }
    set(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      this[MAP][key !== void 0 ? key : name] = [value];
    }
    append(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name] = [value];
      }
    }
    has(name) {
      name = `${name}`;
      validateName(name);
      return find(this[MAP], name) !== void 0;
    }
    delete(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        delete this[MAP][key];
      }
    }
    raw() {
      return this[MAP];
    }
    keys() {
      return createHeadersIterator(this, "key");
    }
    values() {
      return createHeadersIterator(this, "value");
    }
    [Symbol.iterator]() {
      return createHeadersIterator(this, "key+value");
    }
  };
  Headers.prototype.entries = Headers.prototype[Symbol.iterator];
  Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
    value: "Headers",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers.prototype, {
    get: {enumerable: true},
    forEach: {enumerable: true},
    set: {enumerable: true},
    append: {enumerable: true},
    has: {enumerable: true},
    delete: {enumerable: true},
    keys: {enumerable: true},
    values: {enumerable: true},
    entries: {enumerable: true}
  });
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === "key" ? function(k) {
      return k.toLowerCase();
    } : kind === "value" ? function(k) {
      return headers[MAP][k].join(", ");
    } : function(k) {
      return [k.toLowerCase(), headers[MAP][k].join(", ")];
    });
  }
  var INTERNAL = Symbol("internal");
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  var HeadersIteratorPrototype = Object.setPrototypeOf({
    next() {
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError("Value of `this` is not a HeadersIterator");
      }
      var _INTERNAL = this[INTERNAL];
      const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
      const values = getHeaders(target, kind);
      const len = values.length;
      if (index >= len) {
        return {
          value: void 0,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: "HeadersIterator",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({__proto__: null}, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  var INTERNALS$1 = Symbol("Response internals");
  var STATUS_CODES = http2.default.STATUS_CODES;
  var Response = class {
    constructor() {
      let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      Body.call(this, body, opts);
      const status = opts.status || 200;
      const headers = new Headers(opts.headers);
      if (body != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter
      };
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    clone() {
      return new Response(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  };
  Body.mixIn(Response.prototype);
  Object.defineProperties(Response.prototype, {
    url: {enumerable: true},
    status: {enumerable: true},
    ok: {enumerable: true},
    redirected: {enumerable: true},
    statusText: {enumerable: true},
    headers: {enumerable: true},
    clone: {enumerable: true}
  });
  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: "Response",
    writable: false,
    enumerable: false,
    configurable: true
  });
  var INTERNALS$2 = Symbol("Request internals");
  var parse_url = url.default.parse;
  var format_url = url.default.format;
  var streamDestructionSupported = "destroy" in stream.default.Readable.prototype;
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  var Request = class {
    constructor(input) {
      let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      let parsedURL;
      if (!isRequest(input)) {
        if (input && input.href) {
          parsedURL = parse_url(input.href);
        } else {
          parsedURL = parse_url(`${input}`);
        }
        input = {};
      } else {
        parsedURL = parse_url(input.url);
      }
      let method = init.method || input.method || "GET";
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      const headers = new Headers(init.headers || input.headers || {});
      if (inputBody != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init)
        signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      }
      this[INTERNALS$2] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal
      };
      this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
      this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    get method() {
      return this[INTERNALS$2].method;
    }
    get url() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
      return this[INTERNALS$2].headers;
    }
    get redirect() {
      return this[INTERNALS$2].redirect;
    }
    get signal() {
      return this[INTERNALS$2].signal;
    }
    clone() {
      return new Request(this);
    }
  };
  Body.mixIn(Request.prototype);
  Object.defineProperty(Request.prototype, Symbol.toStringTag, {
    value: "Request",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request.prototype, {
    method: {enumerable: true},
    url: {enumerable: true},
    headers: {enumerable: true},
    redirect: {enumerable: true},
    clone: {enumerable: true},
    signal: {enumerable: true}
  });
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    if (!headers.has("Connection") && !agent) {
      headers.set("Connection", "close");
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = "AbortError";
  var PassThrough$1 = stream.default.PassThrough;
  var resolve_url = url.default.resolve;
  function fetch(url2, opts) {
    if (!fetch.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch.Promise;
    return new fetch.Promise(function(resolve, reject) {
      const request = new Request(url2, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? https2.default : http2.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error = new AbortError("The user aborted a request.");
        reject(error);
        if (request.body && request.body instanceof stream.default.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        finalize();
      });
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          const locationURL = location === null ? null : resolve_url(request.url, location);
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch(new Request(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: zlib2.default.Z_SYNC_FLUSH,
          finishFlush: zlib2.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(zlib2.default.createGunzip(zlibOptions));
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(zlib2.default.createInflate());
            } else {
              body = body.pipe(zlib2.default.createInflateRaw());
            }
            response = new Response(body, response_options);
            resolve(response);
          });
          return;
        }
        if (codings == "br" && typeof zlib2.default.createBrotliDecompress === "function") {
          body = body.pipe(zlib2.default.createBrotliDecompress());
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        response = new Response(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  fetch.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };
  fetch.Promise = global.Promise;
  var lib_default = fetch;
});

// node_modules/isomorphic-fetch/fetch-npm-node.js
var require_fetch_npm_node = __commonJS((exports2, module2) => {
  "use strict";
  var realFetch = require_lib();
  module2.exports = function(url, options) {
    if (/^\/\//.test(url)) {
      url = "https:" + url;
    }
    return realFetch.call(this, url, options);
  };
  if (!global.fetch) {
    global.fetch = module2.exports;
    global.Response = realFetch.Response;
    global.Headers = realFetch.Headers;
    global.Request = realFetch.Request;
  }
});

// node_modules/uuid/lib/rng.js
var require_rng = __commonJS((exports2, module2) => {
  var crypto = require("crypto");
  module2.exports = function nodeRNG() {
    return crypto.randomBytes(16);
  };
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS((exports2, module2) => {
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 256).toString(16).substr(1);
  }
  function bytesToUuid(buf, offset) {
    var i2 = offset || 0;
    var bth = byteToHex;
    return [
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]]
    ].join("");
  }
  module2.exports = bytesToUuid;
});

// node_modules/uuid/v1.js
var require_v1 = __commonJS((exports2, module2) => {
  var rng = require_rng();
  var bytesToUuid = require_bytesToUuid();
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        node = _nodeId = [
          seedBytes[0] | 1,
          seedBytes[1],
          seedBytes[2],
          seedBytes[3],
          seedBytes[4],
          seedBytes[5]
        ];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
    var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === void 0) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 122192928e5;
    var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    var tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    b[i++] = tmh >>> 24 & 15 | 16;
    b[i++] = tmh >>> 16 & 255;
    b[i++] = clockseq >>> 8 | 128;
    b[i++] = clockseq & 255;
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf ? buf : bytesToUuid(b);
  }
  module2.exports = v1;
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS((exports2, module2) => {
  var rng = require_rng();
  var bytesToUuid = require_bytesToUuid();
  function v4(options, buf, offset) {
    var i = buf && offset || 0;
    if (typeof options == "string") {
      buf = options === "binary" ? new Array(16) : null;
      options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }
    return buf || bytesToUuid(rnds);
  }
  module2.exports = v4;
});

// node_modules/uuid/index.js
var require_uuid = __commonJS((exports2, module2) => {
  var v1 = require_v1();
  var v4 = require_v4();
  var uuid2 = v4;
  uuid2.v1 = v1;
  uuid2.v4 = v4;
  module2.exports = uuid2;
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __exportStar2 = function(m, o) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, {enumerable: true, get: function() {
        return m[k];
      }});
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", {enumerable: true, value: v});
    } : function(o, v) {
      o["default"] = v;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/client-s3/dist/cjs/package.json
var require_package = __commonJS((exports2, module2) => {
  module2.exports = {
    name: "@aws-sdk/client-s3",
    description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
    version: "1.0.0-rc.8",
    scripts: {
      clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
      "build-documentation": "yarn remove-documentation && typedoc ./",
      prepublishOnly: "yarn build",
      pretest: "yarn build:cjs",
      "remove-definitions": "rimraf ./types",
      "remove-dist": "rimraf ./dist",
      "remove-documentation": "rimraf ./docs",
      "test:unit": "mocha **/cjs/**/*.spec.js",
      "test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
      test: "yarn test:unit",
      "build:cjs": "tsc -p tsconfig.json",
      "build:es": "tsc -p tsconfig.es.json",
      build: "yarn build:cjs && yarn build:es"
    },
    main: "./dist/cjs/index.js",
    types: "./types/index.d.ts",
    module: "./dist/es/index.js",
    browser: {
      "./runtimeConfig": "./runtimeConfig.browser"
    },
    "react-native": {
      "./runtimeConfig": "./runtimeConfig.native"
    },
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "^1.0.0",
      "@aws-crypto/sha256-js": "^1.0.0",
      "@aws-sdk/config-resolver": "1.0.0-rc.8",
      "@aws-sdk/credential-provider-node": "1.0.0-rc.8",
      "@aws-sdk/eventstream-serde-browser": "1.0.0-rc.8",
      "@aws-sdk/eventstream-serde-config-resolver": "1.0.0-rc.8",
      "@aws-sdk/eventstream-serde-node": "1.0.0-rc.8",
      "@aws-sdk/fetch-http-handler": "1.0.0-rc.8",
      "@aws-sdk/hash-blob-browser": "1.0.0-rc.8",
      "@aws-sdk/hash-node": "1.0.0-rc.8",
      "@aws-sdk/hash-stream-node": "1.0.0-rc.8",
      "@aws-sdk/invalid-dependency": "1.0.0-rc.8",
      "@aws-sdk/md5-js": "1.0.0-rc.8",
      "@aws-sdk/middleware-apply-body-checksum": "1.0.0-rc.8",
      "@aws-sdk/middleware-bucket-endpoint": "1.0.0-rc.8",
      "@aws-sdk/middleware-content-length": "1.0.0-rc.8",
      "@aws-sdk/middleware-expect-continue": "1.0.0-rc.8",
      "@aws-sdk/middleware-host-header": "1.0.0-rc.8",
      "@aws-sdk/middleware-location-constraint": "1.0.0-rc.8",
      "@aws-sdk/middleware-logger": "1.0.0-rc.8",
      "@aws-sdk/middleware-retry": "1.0.0-rc.8",
      "@aws-sdk/middleware-sdk-s3": "1.0.0-rc.8",
      "@aws-sdk/middleware-serde": "1.0.0-rc.8",
      "@aws-sdk/middleware-signing": "1.0.0-rc.8",
      "@aws-sdk/middleware-ssec": "1.0.0-rc.8",
      "@aws-sdk/middleware-stack": "1.0.0-rc.8",
      "@aws-sdk/middleware-user-agent": "1.0.0-rc.8",
      "@aws-sdk/node-config-provider": "1.0.0-rc.8",
      "@aws-sdk/node-http-handler": "1.0.0-rc.8",
      "@aws-sdk/protocol-http": "1.0.0-rc.8",
      "@aws-sdk/smithy-client": "1.0.0-rc.8",
      "@aws-sdk/url-parser-browser": "1.0.0-rc.8",
      "@aws-sdk/url-parser-node": "1.0.0-rc.8",
      "@aws-sdk/util-base64-browser": "1.0.0-rc.8",
      "@aws-sdk/util-base64-node": "1.0.0-rc.8",
      "@aws-sdk/util-body-length-browser": "1.0.0-rc.8",
      "@aws-sdk/util-body-length-node": "1.0.0-rc.8",
      "@aws-sdk/util-user-agent-browser": "1.0.0-rc.8",
      "@aws-sdk/util-user-agent-node": "1.0.0-rc.8",
      "@aws-sdk/util-utf8-browser": "1.0.0-rc.8",
      "@aws-sdk/util-utf8-node": "1.0.0-rc.8",
      "@aws-sdk/xml-builder": "1.0.0-rc.8",
      "fast-xml-parser": "^3.16.0",
      tslib: "^2.0.0"
    },
    devDependencies: {
      "@aws-sdk/client-documentation-generator": "1.0.0-rc.8",
      "@aws-sdk/types": "1.0.0-rc.8",
      "@types/chai": "^4.2.11",
      "@types/mocha": "^8.0.4",
      "@types/node": "^12.7.5",
      jest: "^26.1.0",
      rimraf: "^3.0.0",
      typedoc: "^0.19.2",
      typescript: "~4.1.2"
    },
    engines: {
      node: ">=10.0.0"
    },
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/master/clients/client-s3",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-s3"
    }
  };
});

// node_modules/@aws-sdk/config-resolver/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/config-resolver/dist/cjs/EndpointsConfig.js
var require_EndpointsConfig = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveEndpointsConfig = void 0;
  var resolveEndpointsConfig = (input) => {
    var _a;
    return {
      ...input,
      tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
      endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),
      isCustomEndpoint: input.endpoint ? true : false
    };
  };
  exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  var normalizeEndpoint = (input) => {
    const {endpoint, urlParser} = input;
    if (typeof endpoint === "string") {
      const promisified = Promise.resolve(urlParser(endpoint));
      return () => promisified;
    } else if (typeof endpoint === "object") {
      const promisified = Promise.resolve(endpoint);
      return () => promisified;
    }
    return endpoint;
  };
  var getEndPointFromRegion = async (input) => {
    var _a;
    const {tls = true} = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
      throw new Error("Invalid region in client config");
    }
    const {hostname} = (_a = await input.regionInfoProvider(region)) !== null && _a !== void 0 ? _a : {};
    if (!hostname) {
      throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
  };
});

// node_modules/@aws-sdk/config-resolver/dist/cjs/RegionConfig.js
var require_RegionConfig = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveRegionConfig = exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
  exports2.REGION_ENV_NAME = "AWS_REGION";
  exports2.REGION_INI_NAME = "region";
  exports2.NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
    configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
    default: () => {
      throw new Error("Region is missing");
    }
  };
  exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
  };
  var resolveRegionConfig = (input) => {
    if (!input.region) {
      throw new Error("Region is missing");
    }
    return {
      ...input,
      region: normalizeRegion(input.region)
    };
  };
  exports2.resolveRegionConfig = resolveRegionConfig;
  var normalizeRegion = (region) => {
    if (typeof region === "string") {
      const promisified = Promise.resolve(region);
      return () => promisified;
    }
    return region;
  };
});

// node_modules/@aws-sdk/config-resolver/dist/cjs/index.js
var require_cjs = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib2();
  tslib_1.__exportStar(require_EndpointsConfig(), exports2);
  tslib_1.__exportStar(require_RegionConfig(), exports2);
});

// node_modules/@aws-sdk/property-provider/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/property-provider/dist/cjs/ProviderError.js
var require_ProviderError = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ProviderError = void 0;
  var ProviderError = class extends Error {
    constructor(message, tryNextLink = true) {
      super(message);
      this.tryNextLink = tryNextLink;
    }
  };
  exports2.ProviderError = ProviderError;
});

// node_modules/@aws-sdk/property-provider/dist/cjs/chain.js
var require_chain = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.chain = void 0;
  var ProviderError_1 = require_ProviderError();
  function chain(...providers) {
    return () => {
      let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
      for (const provider of providers) {
        promise = promise.catch((err) => {
          if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
            return provider();
          }
          throw err;
        });
      }
      return promise;
    };
  }
  exports2.chain = chain;
});

// node_modules/@aws-sdk/property-provider/dist/cjs/fromStatic.js
var require_fromStatic = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromStatic = void 0;
  var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
  exports2.fromStatic = fromStatic;
});

// node_modules/@aws-sdk/property-provider/dist/cjs/memoize.js
var require_memoize = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.memoize = void 0;
  var memoize = (provider, isExpired, requiresRefresh) => {
    let result;
    let hasResult;
    if (isExpired === void 0) {
      return () => {
        if (!hasResult) {
          result = provider();
          hasResult = true;
        }
        return result;
      };
    }
    let isConstant = false;
    return async () => {
      if (!hasResult) {
        result = provider();
        hasResult = true;
      }
      if (isConstant) {
        return result;
      }
      const resolved = await result;
      if (requiresRefresh && !requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        return result = provider();
      }
      return resolved;
    };
  };
  exports2.memoize = memoize;
});

// node_modules/@aws-sdk/property-provider/dist/cjs/index.js
var require_cjs2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib3();
  tslib_1.__exportStar(require_chain(), exports2);
  tslib_1.__exportStar(require_fromStatic(), exports2);
  tslib_1.__exportStar(require_memoize(), exports2);
  tslib_1.__exportStar(require_ProviderError(), exports2);
});

// node_modules/@aws-sdk/credential-provider-env/dist/cjs/index.js
var require_cjs3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
  var property_provider_1 = require_cjs2();
  exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
  exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
  exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
  exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
  function fromEnv() {
    return () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return Promise.resolve({
          accessKeyId,
          secretAccessKey,
          sessionToken: process.env[exports2.ENV_SESSION],
          expiration: expiry ? new Date(expiry) : void 0
        });
      }
      return Promise.reject(new property_provider_1.ProviderError("Unable to find environment variable credentials."));
    };
  }
  exports2.fromEnv = fromEnv;
});

// node_modules/@aws-sdk/credential-provider-imds/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/remoteProvider/httpRequest.js
var require_httpRequest = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.httpRequest = void 0;
  var property_provider_1 = require_cjs2();
  var buffer_1 = require("buffer");
  var http_1 = require("http");
  function httpRequest(options) {
    return new Promise((resolve, reject) => {
      const req = http_1.request({method: "GET", ...options});
      req.on("error", (err) => {
        reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
      });
      req.on("timeout", () => {
        reject(new Error("TimeoutError"));
      });
      req.on("response", (res) => {
        const {statusCode = 400} = res;
        if (statusCode < 200 || 300 <= statusCode) {
          reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), {statusCode}));
        }
        const chunks = [];
        res.on("data", (chunk) => {
          chunks.push(chunk);
        });
        res.on("end", () => {
          resolve(buffer_1.Buffer.concat(chunks));
        });
      });
      req.end();
    });
  }
  exports2.httpRequest = httpRequest;
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
  var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
  exports2.isImdsCredentials = isImdsCredentials;
  var fromImdsCredentials = (creds) => ({
    accessKeyId: creds.AccessKeyId,
    secretAccessKey: creds.SecretAccessKey,
    sessionToken: creds.Token,
    expiration: new Date(creds.Expiration)
  });
  exports2.fromImdsCredentials = fromImdsCredentials;
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
  exports2.DEFAULT_TIMEOUT = 1e3;
  exports2.DEFAULT_MAX_RETRIES = 0;
  var providerConfigFromInit = ({maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT}) => ({maxRetries, timeout});
  exports2.providerConfigFromInit = providerConfigFromInit;
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/remoteProvider/retry.js
var require_retry = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.retry = void 0;
  var retry = (toRetry, maxRetries) => {
    let promise = toRetry();
    for (let i = 0; i < maxRetries; i++) {
      promise = promise.catch(toRetry);
    }
    return promise;
  };
  exports2.retry = retry;
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
  var property_provider_1 = require_cjs2();
  var url_1 = require("url");
  var httpRequest_1 = require_httpRequest();
  var ImdsCredentials_1 = require_ImdsCredentials();
  var RemoteProviderInit_1 = require_RemoteProviderInit();
  var retry_1 = require_retry();
  exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
  exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
  exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
  function fromContainerMetadata(init = {}) {
    const {timeout, maxRetries} = RemoteProviderInit_1.providerConfigFromInit(init);
    return () => {
      return getCmdsUri().then((url) => retry_1.retry(async () => {
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, url));
        if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
          throw new property_provider_1.ProviderError("Invalid response received from instance metadata service.");
        }
        return ImdsCredentials_1.fromImdsCredentials(credsResponse);
      }, maxRetries));
    };
  }
  exports2.fromContainerMetadata = fromContainerMetadata;
  function requestFromEcsImds(timeout, options) {
    if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
      const {headers = {}} = options;
      headers.Authorization = process.env[exports2.ENV_CMDS_AUTH_TOKEN];
      options.headers = headers;
    }
    return httpRequest_1.httpRequest({
      ...options,
      timeout
    }).then((buffer) => buffer.toString());
  }
  var CMDS_IP = "169.254.170.2";
  var GREENGRASS_HOSTS = {
    localhost: true,
    "127.0.0.1": true
  };
  var GREENGRASS_PROTOCOLS = {
    "http:": true,
    "https:": true
  };
  function getCmdsUri() {
    if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
      return Promise.resolve({
        hostname: CMDS_IP,
        path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
      });
    }
    if (process.env[exports2.ENV_CMDS_FULL_URI]) {
      const parsed = url_1.parse(process.env[exports2.ENV_CMDS_FULL_URI]);
      if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
        return Promise.reject(new property_provider_1.ProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false));
      }
      if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
        return Promise.reject(new property_provider_1.ProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false));
      }
      return Promise.resolve({
        ...parsed,
        port: parsed.port ? parseInt(parsed.port, 10) : void 0
      });
    }
    return Promise.reject(new property_provider_1.ProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromInstanceMetadata = void 0;
  var property_provider_1 = require_cjs2();
  var httpRequest_1 = require_httpRequest();
  var ImdsCredentials_1 = require_ImdsCredentials();
  var RemoteProviderInit_1 = require_RemoteProviderInit();
  var retry_1 = require_retry();
  var IMDS_IP = "169.254.169.254";
  var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
  var IMDS_TOKEN_PATH = "/latest/api/token";
  var fromInstanceMetadata = (init = {}) => {
    let disableFetchToken = false;
    const {timeout, maxRetries} = RemoteProviderInit_1.providerConfigFromInit(init);
    const getCredentials = async (maxRetries2, options) => {
      const profile = (await retry_1.retry(async () => {
        let profile2;
        try {
          profile2 = await getProfile(options);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return profile2;
      }, maxRetries2)).trim();
      return retry_1.retry(async () => {
        let creds;
        try {
          creds = await getCredentialsFromProfile(profile, options);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return creds;
      }, maxRetries2);
    };
    return async () => {
      if (disableFetchToken) {
        return getCredentials(maxRetries, {timeout});
      } else {
        let token;
        try {
          token = (await getMetadataToken({timeout})).toString();
        } catch (error) {
          if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
            throw Object.assign(error, {
              message: "EC2 Metadata token request returned error"
            });
          } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
            disableFetchToken = true;
          }
          return getCredentials(maxRetries, {timeout});
        }
        return getCredentials(maxRetries, {
          timeout,
          headers: {
            "x-aws-ec2-metadata-token": token
          }
        });
      }
    };
  };
  exports2.fromInstanceMetadata = fromInstanceMetadata;
  var getMetadataToken = async (options) => httpRequest_1.httpRequest({
    ...options,
    host: IMDS_IP,
    path: IMDS_TOKEN_PATH,
    method: "PUT",
    headers: {
      "x-aws-ec2-metadata-token-ttl-seconds": "21600"
    }
  });
  var getProfile = async (options) => (await httpRequest_1.httpRequest({...options, host: IMDS_IP, path: IMDS_PATH})).toString();
  var getCredentialsFromProfile = async (profile, options) => {
    const credsResponse = JSON.parse((await httpRequest_1.httpRequest({
      ...options,
      host: IMDS_IP,
      path: IMDS_PATH + profile
    })).toString());
    if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
      throw new property_provider_1.ProviderError("Invalid response received from instance metadata service.");
    }
    return ImdsCredentials_1.fromImdsCredentials(credsResponse);
  };
});

// node_modules/@aws-sdk/credential-provider-imds/dist/cjs/index.js
var require_cjs4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib4();
  tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
  tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
  tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist/cjs/index.js
var require_cjs5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.loadSharedConfigFiles = exports2.ENV_CONFIG_PATH = exports2.ENV_CREDENTIALS_PATH = void 0;
  var fs_1 = require("fs");
  var os_1 = require("os");
  var path_1 = require("path");
  exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
  exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
  var swallowError = () => ({});
  function loadSharedConfigFiles(init = {}) {
    const {filepath = process.env[exports2.ENV_CREDENTIALS_PATH] || path_1.join(getHomeDir(), ".aws", "credentials"), configFilepath = process.env[exports2.ENV_CONFIG_PATH] || path_1.join(getHomeDir(), ".aws", "config")} = init;
    return Promise.all([
      slurpFile(configFilepath).then(parseIni).then(normalizeConfigFile).catch(swallowError),
      slurpFile(filepath).then(parseIni).catch(swallowError)
    ]).then((parsedFiles) => {
      const [configFile, credentialsFile] = parsedFiles;
      return {
        configFile,
        credentialsFile
      };
    });
  }
  exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
  function normalizeConfigFile(data) {
    const map = {};
    for (const key of Object.keys(data)) {
      let matches;
      if (key === "default") {
        map.default = data.default;
      } else if (matches = profileKeyRegex.exec(key)) {
        const [_1, _2, normalizedKey] = matches;
        if (normalizedKey) {
          map[normalizedKey] = data[key];
        }
      }
    }
    return map;
  }
  function parseIni(iniData) {
    const map = {};
    let currentSection;
    for (let line of iniData.split(/\r?\n/)) {
      line = line.split(/(^|\s)[;#]/)[0];
      const section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
      if (section) {
        currentSection = section[1];
      } else if (currentSection) {
        const item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
        if (item) {
          map[currentSection] = map[currentSection] || {};
          map[currentSection][item[1]] = item[2];
        }
      }
    }
    return map;
  }
  function slurpFile(path) {
    return new Promise((resolve, reject) => {
      fs_1.readFile(path, "utf8", (err, data) => {
        if (err) {
          reject(err);
        } else {
          resolve(data);
        }
      });
    });
  }
  function getHomeDir() {
    const {HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}`} = process.env;
    if (HOME)
      return HOME;
    if (USERPROFILE)
      return USERPROFILE;
    if (HOMEPATH)
      return `${HOMEDRIVE}${HOMEPATH}`;
    return os_1.homedir();
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist/cjs/index.js
var require_cjs6 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.parseKnownFiles = exports2.getMasterProfileName = exports2.fromIni = exports2.ENV_PROFILE = void 0;
  var property_provider_1 = require_cjs2();
  var shared_ini_file_loader_1 = require_cjs5();
  var DEFAULT_PROFILE = "default";
  exports2.ENV_PROFILE = "AWS_PROFILE";
  function isStaticCredsProfile(arg) {
    return Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
  }
  function isAssumeRoleProfile(arg) {
    return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && typeof arg.source_profile === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1;
  }
  function fromIni(init = {}) {
    return () => parseKnownFiles(init).then((profiles) => resolveProfileData(getMasterProfileName(init), profiles, init));
  }
  exports2.fromIni = fromIni;
  function getMasterProfileName(init) {
    return init.profile || process.env[exports2.ENV_PROFILE] || DEFAULT_PROFILE;
  }
  exports2.getMasterProfileName = getMasterProfileName;
  async function resolveProfileData(profileName, profiles, options, visitedProfiles = {}) {
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data);
    }
    if (isAssumeRoleProfile(data)) {
      const {external_id: ExternalId, mfa_serial, role_arn: RoleArn, role_session_name: RoleSessionName = "aws-sdk-js-" + Date.now(), source_profile} = data;
      if (!options.roleAssumer) {
        throw new property_provider_1.ProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      if (source_profile in visitedProfiles) {
        throw new property_provider_1.ProviderError(`Detected a cycle attempting to resolve credentials for profile ${getMasterProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCreds = resolveProfileData(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      });
      const params = {RoleArn, RoleSessionName, ExternalId};
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.ProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      return options.roleAssumer(await sourceCreds, params);
    }
    if (isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data);
    }
    throw new property_provider_1.ProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
  }
  function parseKnownFiles(init) {
    const {loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init)} = init;
    return loadedConfig.then((parsedFiles) => {
      const {configFile, credentialsFile} = parsedFiles;
      return {
        ...configFile,
        ...credentialsFile
      };
    });
  }
  exports2.parseKnownFiles = parseKnownFiles;
  function resolveStaticCredentials(profile) {
    return Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist/cjs/index.js
var require_cjs7 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromProcess = exports2.ENV_PROFILE = void 0;
  var credential_provider_ini_1 = require_cjs6();
  var property_provider_1 = require_cjs2();
  var child_process_1 = require("child_process");
  exports2.ENV_PROFILE = "AWS_PROFILE";
  function fromProcess(init = {}) {
    return () => credential_provider_ini_1.parseKnownFiles(init).then((profiles) => resolveProcessCredentials(credential_provider_ini_1.getMasterProfileName(init), profiles, init));
  }
  exports2.fromProcess = fromProcess;
  async function resolveProcessCredentials(profileName, profiles, options) {
    const profile = profiles[profileName];
    if (profiles[profileName]) {
      const credentialProcess = profile["credential_process"];
      if (credentialProcess !== void 0) {
        return await execPromise(credentialProcess).then((processResult) => {
          let data;
          try {
            data = JSON.parse(processResult);
          } catch (_a) {
            throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
          }
          const {Version: version, AccessKeyId: accessKeyId, SecretAccessKey: secretAccessKey, SessionToken: sessionToken, Expiration: expiration} = data;
          if (version !== 1) {
            throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
          }
          if (accessKeyId === void 0 || secretAccessKey === void 0) {
            throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
          }
          let expirationUnix;
          if (expiration) {
            const currentTime = new Date();
            const expireTime = new Date(expiration);
            if (expireTime < currentTime) {
              throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
            }
            expirationUnix = Math.floor(new Date(expiration).valueOf() / 1e3);
          }
          return {
            accessKeyId,
            secretAccessKey,
            sessionToken,
            expirationUnix
          };
        }).catch((error) => {
          throw new property_provider_1.ProviderError(error.message);
        });
      } else {
        throw new property_provider_1.ProviderError(`Profile ${profileName} did not contain credential_process.`);
      }
    } else {
      throw new property_provider_1.ProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
    }
  }
  function execPromise(command) {
    return new Promise(function(resolve, reject) {
      child_process_1.exec(command, (error, stdout) => {
        if (error) {
          reject(error);
          return;
        }
        resolve(stdout.trim());
      });
    });
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist/cjs/index.js
var require_cjs8 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.defaultProvider = exports2.ENV_IMDS_DISABLED = void 0;
  var credential_provider_env_1 = require_cjs3();
  var credential_provider_imds_1 = require_cjs4();
  var credential_provider_ini_1 = require_cjs6();
  var credential_provider_process_1 = require_cjs7();
  var property_provider_1 = require_cjs2();
  exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
  function defaultProvider(init = {}) {
    const {profile = process.env[credential_provider_ini_1.ENV_PROFILE]} = init;
    const providerChain = profile ? credential_provider_ini_1.fromIni(init) : property_provider_1.chain(credential_provider_env_1.fromEnv(), credential_provider_ini_1.fromIni(init), credential_provider_process_1.fromProcess(init), remoteProvider(init));
    return property_provider_1.memoize(providerChain, (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
  }
  exports2.defaultProvider = defaultProvider;
  function remoteProvider(init) {
    if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
      return credential_provider_imds_1.fromContainerMetadata(init);
    }
    if (process.env[exports2.ENV_IMDS_DISABLED]) {
      return () => Promise.reject(new property_provider_1.ProviderError("EC2 Instance Metadata Service access disabled"));
    }
    return credential_provider_imds_1.fromInstanceMetadata(init);
  }
});

// node_modules/@aws-sdk/eventstream-serde-node/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/eventstream-marshaller/node_modules/tslib/tslib.js
var require_tslib6 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js
var require_tslib7 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-crypto/crc32/build/index.js
var require_build = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Crc32 = exports2.crc32 = void 0;
  var tslib_1 = require_tslib7();
  function crc32(data) {
    return new Crc32().update(data).digest();
  }
  exports2.crc32 = crc32;
  var Crc32 = function() {
    function Crc322() {
      this.checksum = 4294967295;
    }
    Crc322.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc322.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc322;
  }();
  exports2.Crc32 = Crc32;
  var lookupTable = Uint32Array.from([
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918e3,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ]);
});

// node_modules/@aws-sdk/util-hex-encoding/dist/cjs/index.js
var require_cjs9 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.toHex = exports2.fromHex = void 0;
  var SHORT_TO_HEX = {};
  var HEX_TO_SHORT = {};
  for (let i = 0; i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
      encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
  }
  function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
      throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0; i < encoded.length; i += 2) {
      const encodedByte = encoded.substr(i, 2).toLowerCase();
      if (encodedByte in HEX_TO_SHORT) {
        out[i / 2] = HEX_TO_SHORT[encodedByte];
      } else {
        throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
      }
    }
    return out;
  }
  exports2.fromHex = fromHex;
  function toHex(bytes) {
    let out = "";
    for (let i = 0; i < bytes.byteLength; i++) {
      out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
  }
  exports2.toHex = toHex;
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/Int64.js
var require_Int64 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Int64 = void 0;
  var util_hex_encoding_1 = require_cjs9();
  var Int64 = class {
    constructor(bytes) {
      this.bytes = bytes;
      if (bytes.byteLength !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
    }
    static fromNumber(number) {
      if (number > 9223372036854776e3 || number < -9223372036854776e3) {
        throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
      }
      const bytes = new Uint8Array(8);
      for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new Int64(bytes);
    }
    valueOf() {
      const bytes = this.bytes.slice(0);
      const negative = bytes[0] & 128;
      if (negative) {
        negate(bytes);
      }
      return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
      return String(this.valueOf());
    }
  };
  exports2.Int64 = Int64;
  function negate(bytes) {
    for (let i = 0; i < 8; i++) {
      bytes[i] ^= 255;
    }
    for (let i = 7; i > -1; i--) {
      bytes[i]++;
      if (bytes[i] !== 0)
        break;
    }
  }
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/HeaderMarshaller.js
var require_HeaderMarshaller = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HeaderMarshaller = void 0;
  var util_hex_encoding_1 = require_cjs9();
  var Int64_1 = require_Int64();
  var HeaderMarshaller = class {
    constructor(toUtf8, fromUtf8) {
      this.toUtf8 = toUtf8;
      this.fromUtf8 = fromUtf8;
    }
    format(headers) {
      const chunks = [];
      for (const headerName of Object.keys(headers)) {
        const bytes = this.fromUtf8(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
      const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
      let position = 0;
      for (const chunk of chunks) {
        out.set(chunk, position);
        position += chunk.byteLength;
      }
      return out;
    }
    formatHeaderValue(header) {
      switch (header.type) {
        case "boolean":
          return Uint8Array.from([header.value ? 0 : 1]);
        case "byte":
          return Uint8Array.from([2, header.value]);
        case "short":
          const shortView = new DataView(new ArrayBuffer(3));
          shortView.setUint8(0, 3);
          shortView.setInt16(1, header.value, false);
          return new Uint8Array(shortView.buffer);
        case "integer":
          const intView = new DataView(new ArrayBuffer(5));
          intView.setUint8(0, 4);
          intView.setInt32(1, header.value, false);
          return new Uint8Array(intView.buffer);
        case "long":
          const longBytes = new Uint8Array(9);
          longBytes[0] = 5;
          longBytes.set(header.value.bytes, 1);
          return longBytes;
        case "binary":
          const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
          binView.setUint8(0, 6);
          binView.setUint16(1, header.value.byteLength, false);
          const binBytes = new Uint8Array(binView.buffer);
          binBytes.set(header.value, 3);
          return binBytes;
        case "string":
          const utf8Bytes = this.fromUtf8(header.value);
          const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
          strView.setUint8(0, 7);
          strView.setUint16(1, utf8Bytes.byteLength, false);
          const strBytes = new Uint8Array(strView.buffer);
          strBytes.set(utf8Bytes, 3);
          return strBytes;
        case "timestamp":
          const tsBytes = new Uint8Array(9);
          tsBytes[0] = 8;
          tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
          return tsBytes;
        case "uuid":
          if (!UUID_PATTERN.test(header.value)) {
            throw new Error(`Invalid UUID received: ${header.value}`);
          }
          const uuidBytes = new Uint8Array(17);
          uuidBytes[0] = 9;
          uuidBytes.set(util_hex_encoding_1.fromHex(header.value.replace(/\-/g, "")), 1);
          return uuidBytes;
      }
    }
    parse(headers) {
      const out = {};
      let position = 0;
      while (position < headers.byteLength) {
        const nameLength = headers.getUint8(position++);
        const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
        position += nameLength;
        switch (headers.getUint8(position++)) {
          case 0:
            out[name] = {
              type: BOOLEAN_TAG,
              value: true
            };
            break;
          case 1:
            out[name] = {
              type: BOOLEAN_TAG,
              value: false
            };
            break;
          case 2:
            out[name] = {
              type: BYTE_TAG,
              value: headers.getInt8(position++)
            };
            break;
          case 3:
            out[name] = {
              type: SHORT_TAG,
              value: headers.getInt16(position, false)
            };
            position += 2;
            break;
          case 4:
            out[name] = {
              type: INT_TAG,
              value: headers.getInt32(position, false)
            };
            position += 4;
            break;
          case 5:
            out[name] = {
              type: LONG_TAG,
              value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
            };
            position += 8;
            break;
          case 6:
            const binaryLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: BINARY_TAG,
              value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
            };
            position += binaryLength;
            break;
          case 7:
            const stringLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: STRING_TAG,
              value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
            };
            position += stringLength;
            break;
          case 8:
            out[name] = {
              type: TIMESTAMP_TAG,
              value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
            };
            position += 8;
            break;
          case 9:
            const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
            position += 16;
            out[name] = {
              type: UUID_TAG,
              value: `${util_hex_encoding_1.toHex(uuidBytes.subarray(0, 4))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(4, 6))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(6, 8))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(8, 10))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(10))}`
            };
            break;
          default:
            throw new Error(`Unrecognized header type tag`);
        }
      }
      return out;
    }
  };
  exports2.HeaderMarshaller = HeaderMarshaller;
  var HEADER_VALUE_TYPE;
  (function(HEADER_VALUE_TYPE2) {
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
  })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
  var BOOLEAN_TAG = "boolean";
  var BYTE_TAG = "byte";
  var SHORT_TAG = "short";
  var INT_TAG = "integer";
  var LONG_TAG = "long";
  var BINARY_TAG = "binary";
  var STRING_TAG = "string";
  var TIMESTAMP_TAG = "timestamp";
  var UUID_TAG = "uuid";
  var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/splitMessage.js
var require_splitMessage = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.splitMessage = void 0;
  var crc32_1 = require_build();
  var PRELUDE_MEMBER_LENGTH = 4;
  var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
  var CHECKSUM_LENGTH = 4;
  var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  function splitMessage({byteLength, byteOffset, buffer}) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
      throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
      throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
      throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
      throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
      headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
      body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
  }
  exports2.splitMessage = splitMessage;
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/EventStreamMarshaller.js
var require_EventStreamMarshaller = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.EventStreamMarshaller = void 0;
  var crc32_1 = require_build();
  var HeaderMarshaller_1 = require_HeaderMarshaller();
  var splitMessage_1 = require_splitMessage();
  var EventStreamMarshaller = class {
    constructor(toUtf8, fromUtf8) {
      this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
    }
    marshall({headers: rawHeaders, body}) {
      const headers = this.headerMarshaller.format(rawHeaders);
      const length = headers.byteLength + body.byteLength + 16;
      const out = new Uint8Array(length);
      const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      const checksum = new crc32_1.Crc32();
      view.setUint32(0, length, false);
      view.setUint32(4, headers.byteLength, false);
      view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
      out.set(headers, 12);
      out.set(body, headers.byteLength + 12);
      view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
      return out;
    }
    unmarshall(message) {
      const {headers, body} = splitMessage_1.splitMessage(message);
      return {headers: this.headerMarshaller.parse(headers), body};
    }
    formatHeaders(rawHeaders) {
      return this.headerMarshaller.format(rawHeaders);
    }
  };
  exports2.EventStreamMarshaller = EventStreamMarshaller;
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/Message.js
var require_Message = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/eventstream-marshaller/dist/cjs/index.js
var require_cjs10 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib6();
  tslib_1.__exportStar(require_EventStreamMarshaller(), exports2);
  tslib_1.__exportStar(require_Int64(), exports2);
  tslib_1.__exportStar(require_Message(), exports2);
});

// node_modules/@aws-sdk/eventstream-serde-universal/node_modules/tslib/tslib.js
var require_tslib8 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/eventstream-serde-universal/dist/cjs/getChunkedStream.js
var require_getChunkedStream = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getChunkedStream = void 0;
  function getChunkedStream(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = (size) => {
      if (typeof size !== "number") {
        throw new Error("Attempted to allocate an event message where size was not a number: " + size);
      }
      currentMessageTotalLength = size;
      currentMessagePendingLength = 4;
      currentMessage = new Uint8Array(size);
      const currentMessageView = new DataView(currentMessage.buffer);
      currentMessageView.setUint32(0, size, false);
    };
    const iterator = async function* () {
      const sourceIterator = source[Symbol.asyncIterator]();
      while (true) {
        const {value, done} = await sourceIterator.next();
        if (done) {
          if (!currentMessageTotalLength) {
            return;
          } else if (currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
          } else {
            throw new Error("Truncated event message received.");
          }
          return;
        }
        const chunkLength = value.length;
        let currentOffset = 0;
        while (currentOffset < chunkLength) {
          if (!currentMessage) {
            const bytesRemaining = chunkLength - currentOffset;
            if (!messageLengthBuffer) {
              messageLengthBuffer = new Uint8Array(4);
            }
            const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
            currentMessagePendingLength += numBytesForTotal;
            currentOffset += numBytesForTotal;
            if (currentMessagePendingLength < 4) {
              break;
            }
            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
            messageLengthBuffer = null;
          }
          const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
          currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
          currentMessagePendingLength += numBytesToWrite;
          currentOffset += numBytesToWrite;
          if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
          }
        }
      }
    };
    return {
      [Symbol.asyncIterator]: iterator
    };
  }
  exports2.getChunkedStream = getChunkedStream;
});

// node_modules/@aws-sdk/eventstream-serde-universal/dist/cjs/getUnmarshalledStream.js
var require_getUnmarshalledStream = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getUnmarshalledStream = void 0;
  function getUnmarshalledStream(source, options) {
    return {
      [Symbol.asyncIterator]: async function* () {
        for await (const chunk of source) {
          const message = options.eventMarshaller.unmarshall(chunk);
          const {value: messageType} = message.headers[":message-type"];
          if (messageType === "error") {
            const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
            unmodeledError.name = message.headers[":error-code"].value;
            throw unmodeledError;
          } else if (messageType === "exception") {
            const code = message.headers[":exception-type"].value;
            const exception = {[code]: message};
            const deserializedException = await options.deserializer(exception);
            if (deserializedException.$unknown) {
              const error = new Error(options.toUtf8(message.body));
              error.name = code;
              throw error;
            }
            throw deserializedException[code];
          } else if (messageType === "event") {
            const event = {
              [message.headers[":event-type"].value]: message
            };
            const deserialized = await options.deserializer(event);
            if (deserialized.$unknown)
              continue;
            yield deserialized;
          } else {
            throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
          }
        }
      }
    };
  }
  exports2.getUnmarshalledStream = getUnmarshalledStream;
});

// node_modules/@aws-sdk/eventstream-serde-universal/dist/cjs/EventStreamMarshaller.js
var require_EventStreamMarshaller2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.EventStreamMarshaller = void 0;
  var eventstream_marshaller_1 = require_cjs10();
  var getChunkedStream_1 = require_getChunkedStream();
  var getUnmarshalledStream_1 = require_getUnmarshalledStream();
  var EventStreamMarshaller = class {
    constructor({utf8Encoder, utf8Decoder}) {
      this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
      this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
      const chunkedStream = getChunkedStream_1.getChunkedStream(body);
      const unmarshalledStream = getUnmarshalledStream_1.getUnmarshalledStream(chunkedStream, {
        eventMarshaller: this.eventMarshaller,
        deserializer,
        toUtf8: this.utfEncoder
      });
      return unmarshalledStream;
    }
    serialize(input, serializer) {
      const self2 = this;
      const serializedIterator = async function* () {
        for await (const chunk of input) {
          const payloadBuf = self2.eventMarshaller.marshall(serializer(chunk));
          yield payloadBuf;
        }
        yield new Uint8Array(0);
      };
      return {
        [Symbol.asyncIterator]: serializedIterator
      };
    }
  };
  exports2.EventStreamMarshaller = EventStreamMarshaller;
});

// node_modules/@aws-sdk/eventstream-serde-universal/dist/cjs/provider.js
var require_provider = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.eventStreamSerdeProvider = void 0;
  var EventStreamMarshaller_1 = require_EventStreamMarshaller2();
  var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
  exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
});

// node_modules/@aws-sdk/eventstream-serde-universal/dist/cjs/index.js
var require_cjs11 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib8();
  tslib_1.__exportStar(require_provider(), exports2);
  tslib_1.__exportStar(require_EventStreamMarshaller2(), exports2);
});

// node_modules/@aws-sdk/eventstream-serde-node/dist/cjs/utils.js
var require_utils = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.readabletoIterable = void 0;
  async function* readabletoIterable(readStream) {
    let streamEnded = false;
    let generationEnded = false;
    const records = new Array();
    readStream.on("error", (err) => {
      if (!streamEnded) {
        streamEnded = true;
      }
      if (err) {
        throw err;
      }
    });
    readStream.on("data", (data) => {
      records.push(data);
    });
    readStream.on("end", () => {
      streamEnded = true;
    });
    while (!generationEnded) {
      const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
      if (value) {
        yield value;
      }
      generationEnded = streamEnded && records.length === 0;
    }
  }
  exports2.readabletoIterable = readabletoIterable;
});

// node_modules/@aws-sdk/eventstream-serde-node/dist/cjs/EventStreamMarshaller.js
var require_EventStreamMarshaller3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.EventStreamMarshaller = void 0;
  var eventstream_marshaller_1 = require_cjs10();
  var eventstream_serde_universal_1 = require_cjs11();
  var stream_1 = require("stream");
  var utils_1 = require_utils();
  var EventStreamMarshaller = class {
    constructor({utf8Encoder, utf8Decoder}) {
      this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
      this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
        utf8Decoder,
        utf8Encoder
      });
    }
    deserialize(body, deserializer) {
      const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : utils_1.readabletoIterable(body);
      return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
      const serializedIterable = this.universalMarshaller.serialize(input, serializer);
      if (typeof stream_1.Readable.from === "function") {
        return stream_1.Readable.from(serializedIterable);
      } else {
        const iterator = serializedIterable[Symbol.asyncIterator]();
        const serializedStream = new stream_1.Readable({
          autoDestroy: true,
          objectMode: true,
          async read() {
            iterator.next().then(({done, value}) => {
              if (done) {
                this.push(null);
              } else {
                this.push(value);
              }
            }).catch((err) => {
              this.destroy(err);
            });
          }
        });
        serializedStream.on("error", () => {
          serializedStream.destroy();
        });
        serializedStream.on("end", () => {
          serializedStream.destroy();
        });
        return serializedStream;
      }
    }
  };
  exports2.EventStreamMarshaller = EventStreamMarshaller;
});

// node_modules/@aws-sdk/eventstream-serde-node/dist/cjs/provider.js
var require_provider2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.eventStreamSerdeProvider = void 0;
  var EventStreamMarshaller_1 = require_EventStreamMarshaller3();
  var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
  exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
});

// node_modules/@aws-sdk/eventstream-serde-node/dist/cjs/index.js
var require_cjs12 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib5();
  tslib_1.__exportStar(require_provider2(), exports2);
  tslib_1.__exportStar(require_EventStreamMarshaller3(), exports2);
});

// node_modules/@aws-sdk/is-array-buffer/dist/cjs/index.js
var require_cjs13 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isArrayBuffer = void 0;
  var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
  exports2.isArrayBuffer = isArrayBuffer;
});

// node_modules/@aws-sdk/util-buffer-from/dist/cjs/index.js
var require_cjs14 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromString = exports2.fromArrayBuffer = void 0;
  var is_array_buffer_1 = require_cjs13();
  var buffer_1 = require("buffer");
  var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
    if (!is_array_buffer_1.isArrayBuffer(input)) {
      throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return buffer_1.Buffer.from(input, offset, length);
  };
  exports2.fromArrayBuffer = fromArrayBuffer;
  var fromString = (input, encoding) => {
    if (typeof input !== "string") {
      throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
  };
  exports2.fromString = fromString;
});

// node_modules/@aws-sdk/hash-node/dist/cjs/index.js
var require_cjs15 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Hash = void 0;
  var util_buffer_from_1 = require_cjs14();
  var buffer_1 = require("buffer");
  var crypto_1 = require("crypto");
  var Hash = class {
    constructor(algorithmIdentifier, secret) {
      this.hash = secret ? crypto_1.createHmac(algorithmIdentifier, castSourceData(secret)) : crypto_1.createHash(algorithmIdentifier);
    }
    update(toHash, encoding) {
      this.hash.update(castSourceData(toHash, encoding));
    }
    digest() {
      return Promise.resolve(this.hash.digest());
    }
  };
  exports2.Hash = Hash;
  function castSourceData(toCast, encoding) {
    if (buffer_1.Buffer.isBuffer(toCast)) {
      return toCast;
    }
    if (typeof toCast === "string") {
      return util_buffer_from_1.fromString(toCast, encoding);
    }
    if (ArrayBuffer.isView(toCast)) {
      return util_buffer_from_1.fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    }
    return util_buffer_from_1.fromArrayBuffer(toCast);
  }
});

// node_modules/@aws-sdk/hash-stream-node/dist/cjs/hash-calculator.js
var require_hash_calculator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HashCalculator = void 0;
  var stream_1 = require("stream");
  var HashCalculator = class extends stream_1.Writable {
    constructor(hash, options) {
      super(options);
      this.hash = hash;
    }
    _write(chunk, encoding, callback) {
      try {
        this.hash.update(chunk);
      } catch (err) {
        return callback(err);
      }
      callback();
    }
  };
  exports2.HashCalculator = HashCalculator;
});

// node_modules/@aws-sdk/hash-stream-node/dist/cjs/index.js
var require_cjs16 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fileStreamHasher = void 0;
  var fs_1 = require("fs");
  var hash_calculator_1 = require_hash_calculator();
  var fileStreamHasher = function fileStreamHasher2(hashCtor, fileStream) {
    return new Promise((resolve, reject) => {
      if (!isReadStream(fileStream)) {
        reject(new Error("Unable to calculate hash for non-file streams."));
        return;
      }
      const fileStreamTee = fs_1.createReadStream(fileStream.path, {
        start: fileStream.start,
        end: fileStream.end
      });
      const hash = new hashCtor();
      const hashCalculator = new hash_calculator_1.HashCalculator(hash);
      fileStreamTee.pipe(hashCalculator);
      fileStreamTee.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", function() {
        hash.digest().then(resolve).catch(reject);
      });
    });
  };
  exports2.fileStreamHasher = fileStreamHasher;
  function isReadStream(stream) {
    return typeof stream.path === "string";
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/node_modules/tslib/tslib.js
var require_tslib9 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/protocol-http/node_modules/tslib/tslib.js
var require_tslib10 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/protocol-http/dist/cjs/httpResponse.js
var require_httpResponse = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HttpResponse = void 0;
  var HttpResponse = class {
    constructor(options) {
      this.statusCode = options.statusCode;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    static isInstance(response) {
      if (!response)
        return false;
      const resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
  };
  exports2.HttpResponse = HttpResponse;
});

// node_modules/@aws-sdk/protocol-http/dist/cjs/httpRequest.js
var require_httpRequest2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HttpRequest = void 0;
  var HttpRequest = class {
    constructor(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
    }
    static isInstance(request) {
      if (!request)
        return false;
      const req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
      const cloned = new HttpRequest({
        ...this,
        headers: {...this.headers}
      });
      if (cloned.query)
        cloned.query = cloneQuery(cloned.query);
      return cloned;
    }
  };
  exports2.HttpRequest = HttpRequest;
  function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }
});

// node_modules/@aws-sdk/protocol-http/dist/cjs/httpHandler.js
var require_httpHandler = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/protocol-http/dist/cjs/isValidHostname.js
var require_isValidHostname = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isValidHostname = void 0;
  function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    return hostPattern.test(hostname);
  }
  exports2.isValidHostname = isValidHostname;
});

// node_modules/@aws-sdk/protocol-http/dist/cjs/index.js
var require_cjs17 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib10();
  tslib_1.__exportStar(require_httpResponse(), exports2);
  tslib_1.__exportStar(require_httpRequest2(), exports2);
  tslib_1.__exportStar(require_httpHandler(), exports2);
  tslib_1.__exportStar(require_isValidHostname(), exports2);
});

// node_modules/@aws-sdk/util-arn-parser/dist/cjs/index.js
var require_cjs18 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.build = exports2.parse = exports2.validate = void 0;
  var validate = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
  exports2.validate = validate;
  var parse = (arn) => {
    const segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn")
      throw new Error("Malformed ARN");
    const [
      ,
      partition,
      service,
      region,
      accountId,
      ...resource
    ] = segments;
    return {
      partition,
      service,
      region,
      accountId,
      resource: resource.join(":")
    };
  };
  exports2.parse = parse;
  var build = (arnObject) => {
    const {partition = "aws", service, region, accountId, resource} = arnObject;
    if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
      throw new Error("Input ARN object is invalid");
    }
    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
  };
  exports2.build = build;
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist/cjs/bucketHostnameUtils.js
var require_bucketHostnameUtils = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.getArnResources = exports2.validateDNSHostLabel = exports2.validateAccountId = exports2.validateRegion = exports2.validatePartition = exports2.validateOutpostService = exports2.validateS3Service = exports2.validateService = exports2.validateArnEndpointOptions = exports2.getSuffixForArnEndpoint = exports2.getSuffix = exports2.isDnsCompatibleBucketName = exports2.getPseudoRegion = exports2.isBucketNameOptions = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = void 0;
  var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  var DOTS_PATTERN = /\.\./;
  exports2.DOT_PATTERN = /\./;
  exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3[.-]([a-z0-9-]+)\./;
  var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
  var AWS_PARTITION_SUFFIX = "amazonaws.com";
  var isBucketNameOptions = (options) => typeof options.bucketName === "string";
  exports2.isBucketNameOptions = isBucketNameOptions;
  var getPseudoRegion = (region) => isFipsRegion(region) ? region.replace(/fips-|-fips/, "") : region;
  exports2.getPseudoRegion = getPseudoRegion;
  var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
  exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
  var getRegionalSuffix = (hostname) => {
    const parts = hostname.match(exports2.S3_HOSTNAME_PATTERN);
    return [parts[2], hostname.replace(new RegExp(`^${parts[0]}`), "")];
  };
  var getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
  exports2.getSuffix = getSuffix;
  var getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
  exports2.getSuffixForArnEndpoint = getSuffixForArnEndpoint;
  var validateArnEndpointOptions = (options) => {
    if (options.pathStyleEndpoint) {
      throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
    }
    if (options.accelerateEndpoint) {
      throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
    }
    if (!options.tlsCompatible) {
      throw new Error("HTTPS is required when bucket is an ARN");
    }
  };
  exports2.validateArnEndpointOptions = validateArnEndpointOptions;
  var validateService = (service) => {
    if (service !== "s3" && service !== "s3-outposts") {
      throw new Error("Expect 's3' or 's3-outposts' in ARN service component");
    }
  };
  exports2.validateService = validateService;
  var validateS3Service = (service) => {
    if (service !== "s3") {
      throw new Error("Expect 's3' in Accesspoint ARN service component");
    }
  };
  exports2.validateS3Service = validateS3Service;
  var validateOutpostService = (service) => {
    if (service !== "s3-outposts") {
      throw new Error("Expect 's3-posts' in Outpost ARN service component");
    }
  };
  exports2.validateOutpostService = validateOutpostService;
  var validatePartition = (partition, options) => {
    if (partition !== options.clientPartition) {
      throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
    }
  };
  exports2.validatePartition = validatePartition;
  var validateRegion = (region, options) => {
    if (region === "") {
      throw new Error("ARN region is empty");
    }
    if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion) && !isEqualRegions(region, options.clientSigningRegion)) {
      throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
    }
    if (options.useArnRegion && isFipsRegion(region)) {
      throw new Error("Endpoint does not support FIPS region");
    }
  };
  exports2.validateRegion = validateRegion;
  var isFipsRegion = (region) => region.startsWith("fips-") || region.endsWith("-fips");
  var isEqualRegions = (regionA, regionB) => regionA === regionB || exports2.getPseudoRegion(regionA) === regionB || regionA === exports2.getPseudoRegion(regionB);
  var validateAccountId = (accountId) => {
    if (!/[0-9]{12}/.exec(accountId)) {
      throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
    }
  };
  exports2.validateAccountId = validateAccountId;
  var validateDNSHostLabel = (label, options = {tlsCompatible: true}) => {
    if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && exports2.DOT_PATTERN.test(label)) {
      throw new Error(`Invalid DNS label ${label}`);
    }
  };
  exports2.validateDNSHostLabel = validateDNSHostLabel;
  var getArnResources = (resource) => {
    const delimiter = resource.includes(":") ? ":" : "/";
    const [resourceType, ...rest] = resource.split(delimiter);
    if (resourceType === "accesspoint") {
      if (rest.length !== 1 || rest[0] === "") {
        throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
      }
      return {accesspointName: rest[0]};
    } else if (resourceType === "outpost") {
      if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
        throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
      }
      const [outpostId, _, accesspointName] = rest;
      return {outpostId, accesspointName};
    } else {
      throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
    }
  };
  exports2.getArnResources = getArnResources;
  var validateNoDualstack = (dualstackEndpoint) => {
    if (dualstackEndpoint)
      throw new Error("Dualstack endpoint is not supported with Outpost");
  };
  exports2.validateNoDualstack = validateNoDualstack;
  var validateNoFIPS = (region) => {
    if (isFipsRegion(region !== null && region !== void 0 ? region : ""))
      throw new Error(`FIPS region is not supported with Outpost, got ${region}`);
  };
  exports2.validateNoFIPS = validateNoFIPS;
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist/cjs/bucketHostname.js
var require_bucketHostname = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.bucketHostname = void 0;
  var bucketHostnameUtils_1 = require_bucketHostnameUtils();
  var bucketHostname = (options) => {
    const {baseHostname} = options;
    if (!bucketHostnameUtils_1.S3_HOSTNAME_PATTERN.test(baseHostname)) {
      return {
        bucketEndpoint: false,
        hostname: baseHostname
      };
    }
    return bucketHostnameUtils_1.isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
  };
  exports2.bucketHostname = bucketHostname;
  var getEndpointFromArn = (options) => {
    const [clientRegion, hostnameSuffix] = bucketHostnameUtils_1.getSuffixForArnEndpoint(options.baseHostname);
    const {pathStyleEndpoint, dualstackEndpoint = false, accelerateEndpoint = false, tlsCompatible = true, useArnRegion, bucketName, clientPartition = "aws", clientSigningRegion = clientRegion} = options;
    bucketHostnameUtils_1.validateArnEndpointOptions({pathStyleEndpoint, accelerateEndpoint, tlsCompatible});
    const {service, partition, accountId, region, resource} = bucketName;
    bucketHostnameUtils_1.validateService(service);
    bucketHostnameUtils_1.validatePartition(partition, {clientPartition});
    bucketHostnameUtils_1.validateAccountId(accountId);
    bucketHostnameUtils_1.validateRegion(region, {useArnRegion, clientRegion, clientSigningRegion});
    const {accesspointName, outpostId} = bucketHostnameUtils_1.getArnResources(resource);
    bucketHostnameUtils_1.validateDNSHostLabel(`${accesspointName}-${accountId}`, {tlsCompatible});
    const endpointRegion = useArnRegion ? region : clientRegion;
    const signingRegion = useArnRegion ? region : clientSigningRegion;
    if (outpostId) {
      bucketHostnameUtils_1.validateOutpostService(service);
      bucketHostnameUtils_1.validateDNSHostLabel(outpostId, {tlsCompatible});
      bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);
      bucketHostnameUtils_1.validateNoFIPS(endpointRegion);
      return {
        bucketEndpoint: true,
        hostname: `${accesspointName}-${accountId}.${outpostId}.s3-outposts.${endpointRegion}.${hostnameSuffix}`,
        signingRegion,
        signingService: "s3-outposts"
      };
    }
    bucketHostnameUtils_1.validateS3Service(service);
    return {
      bucketEndpoint: true,
      hostname: `${accesspointName}-${accountId}.s3-accesspoint${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}.${hostnameSuffix}`,
      signingRegion
    };
  };
  var getEndpointFromBucketName = ({accelerateEndpoint = false, baseHostname, bucketName, dualstackEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true}) => {
    const [clientRegion, hostnameSuffix] = bucketHostnameUtils_1.getSuffix(baseHostname);
    if (pathStyleEndpoint || !bucketHostnameUtils_1.isDnsCompatibleBucketName(bucketName) || tlsCompatible && bucketHostnameUtils_1.DOT_PATTERN.test(bucketName)) {
      return {
        bucketEndpoint: false,
        hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
      };
    }
    if (accelerateEndpoint) {
      baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
    } else if (dualstackEndpoint) {
      baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
    }
    return {
      bucketEndpoint: true,
      hostname: `${bucketName}.${baseHostname}`
    };
  };
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist/cjs/bucketEndpointMiddleware.js
var require_bucketEndpointMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getBucketEndpointPlugin = exports2.bucketEndpointMiddlewareOptions = exports2.bucketEndpointMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  var util_arn_parser_1 = require_cjs18();
  var bucketHostname_1 = require_bucketHostname();
  var bucketHostnameUtils_1 = require_bucketHostnameUtils();
  var bucketEndpointMiddleware = (options) => (next, context) => async (args) => {
    const {Bucket: bucketName} = args.input;
    let replaceBucketInPath = options.bucketEndpoint;
    const request = args.request;
    if (protocol_http_1.HttpRequest.isInstance(request)) {
      if (options.bucketEndpoint) {
        request.hostname = bucketName;
      } else if (util_arn_parser_1.validate(bucketName)) {
        const bucketArn = util_arn_parser_1.parse(bucketName);
        const clientRegion = bucketHostnameUtils_1.getPseudoRegion(await options.region());
        const {partition, signingRegion = clientRegion} = await options.regionInfoProvider(clientRegion) || {};
        const useArnRegion = await options.useArnRegion();
        const {hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService} = bucketHostname_1.bucketHostname({
          bucketName: bucketArn,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint: options.useDualstackEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:",
          useArnRegion,
          clientPartition: partition,
          clientSigningRegion: signingRegion
        });
        if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
          context["signing_region"] = modifiedSigningRegion;
        }
        if (signingService && signingService !== "s3") {
          context["signing_service"] = signingService;
        }
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      } else {
        const {hostname, bucketEndpoint} = bucketHostname_1.bucketHostname({
          bucketName,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint: options.useDualstackEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:"
        });
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      }
      if (replaceBucketInPath) {
        request.path = request.path.replace(/^(\/)?[^\/]+/, "");
        if (request.path === "") {
          request.path = "/";
        }
      }
    }
    return next({...args, request});
  };
  exports2.bucketEndpointMiddleware = bucketEndpointMiddleware;
  exports2.bucketEndpointMiddlewareOptions = {
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware"
  };
  var getBucketEndpointPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(exports2.bucketEndpointMiddleware(options), exports2.bucketEndpointMiddlewareOptions);
    }
  });
  exports2.getBucketEndpointPlugin = getBucketEndpointPlugin;
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist/cjs/configurations.js
var require_configurations = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = exports2.NODE_USE_ARN_REGION_INI_NAME = exports2.NODE_USE_ARN_REGION_ENV_NAME = exports2.resolveBucketEndpointConfig = void 0;
  function resolveBucketEndpointConfig(input) {
    const {bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useDualstackEndpoint = false, useArnRegion = false} = input;
    return {
      ...input,
      bucketEndpoint,
      forcePathStyle,
      useAccelerateEndpoint,
      useDualstackEndpoint,
      useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion)
    };
  }
  exports2.resolveBucketEndpointConfig = resolveBucketEndpointConfig;
  exports2.NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
  exports2.NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
  exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      if (!Object.prototype.hasOwnProperty.call(env, exports2.NODE_USE_ARN_REGION_ENV_NAME))
        return void 0;
      if (env[exports2.NODE_USE_ARN_REGION_ENV_NAME] === "true")
        return true;
      if (env[exports2.NODE_USE_ARN_REGION_ENV_NAME] === "false")
        return false;
      throw new Error(`Cannot load env ${exports2.NODE_USE_ARN_REGION_ENV_NAME}. Expected "true" or "false", got ${env[exports2.NODE_USE_ARN_REGION_ENV_NAME]}.`);
    },
    configFileSelector: (profile) => {
      if (!Object.prototype.hasOwnProperty.call(profile, exports2.NODE_USE_ARN_REGION_INI_NAME))
        return void 0;
      if (profile[exports2.NODE_USE_ARN_REGION_INI_NAME] === "true")
        return true;
      if (profile[exports2.NODE_USE_ARN_REGION_INI_NAME] === "false")
        return false;
      throw new Error(`Cannot load shared config entry ${exports2.NODE_USE_ARN_REGION_INI_NAME}. Expected "true" or "false", got ${profile[exports2.NODE_USE_ARN_REGION_INI_NAME]}.`);
    },
    default: false
  };
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist/cjs/index.js
var require_cjs19 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.validateDNSHostLabel = exports2.validateRegion = exports2.validateAccountId = exports2.validatePartition = exports2.validateOutpostService = exports2.getSuffixForArnEndpoint = exports2.getPseudoRegion = exports2.getArnResources = void 0;
  var tslib_1 = require_tslib9();
  tslib_1.__exportStar(require_bucketEndpointMiddleware(), exports2);
  tslib_1.__exportStar(require_bucketHostname(), exports2);
  tslib_1.__exportStar(require_configurations(), exports2);
  var bucketHostnameUtils_1 = require_bucketHostnameUtils();
  Object.defineProperty(exports2, "getArnResources", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.getArnResources;
  }});
  Object.defineProperty(exports2, "getPseudoRegion", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.getPseudoRegion;
  }});
  Object.defineProperty(exports2, "getSuffixForArnEndpoint", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.getSuffixForArnEndpoint;
  }});
  Object.defineProperty(exports2, "validateOutpostService", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateOutpostService;
  }});
  Object.defineProperty(exports2, "validatePartition", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validatePartition;
  }});
  Object.defineProperty(exports2, "validateAccountId", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateAccountId;
  }});
  Object.defineProperty(exports2, "validateRegion", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateRegion;
  }});
  Object.defineProperty(exports2, "validateDNSHostLabel", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateDNSHostLabel;
  }});
  Object.defineProperty(exports2, "validateNoDualstack", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateNoDualstack;
  }});
  Object.defineProperty(exports2, "validateNoFIPS", {enumerable: true, get: function() {
    return bucketHostnameUtils_1.validateNoFIPS;
  }});
});

// node_modules/@aws-sdk/middleware-retry/node_modules/tslib/tslib.js
var require_tslib11 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
  var retryMiddleware = (options) => (next) => async (args) => options.retryStrategy.retry(next, args);
  exports2.retryMiddleware = retryMiddleware;
  exports2.retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high"
  };
  var getRetryPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(exports2.retryMiddleware(options), exports2.retryMiddlewareOptions);
    }
  });
  exports2.getRetryPlugin = getRetryPlugin;
});

// node_modules/@aws-sdk/service-error-classification/dist/cjs/constants.js
var require_constants = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
  exports2.CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
  ];
  exports2.THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
  ];
  exports2.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
  exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
});

// node_modules/@aws-sdk/service-error-classification/dist/cjs/index.js
var require_cjs20 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
  var constants_1 = require_constants();
  var isRetryableByTrait = (error) => error.$retryable !== void 0;
  exports2.isRetryableByTrait = isRetryableByTrait;
  var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
  exports2.isClockSkewError = isClockSkewError;
  var isThrottlingError = (error) => {
    var _a, _b;
    return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
  };
  exports2.isThrottlingError = isThrottlingError;
  var isTransientError = (error) => {
    var _a;
    return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
  };
  exports2.isTransientError = isTransientError;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/constants.js
var require_constants2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
  exports2.DEFAULT_RETRY_DELAY_BASE = 100;
  exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
  exports2.THROTTLING_RETRY_DELAY_BASE = 500;
  exports2.INITIAL_RETRY_TOKENS = 500;
  exports2.RETRY_COST = 5;
  exports2.TIMEOUT_RETRY_COST = 10;
  exports2.NO_RETRY_INCREMENT = 1;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getDefaultRetryQuota = void 0;
  var constants_1 = require_constants2();
  var getDefaultRetryQuota = (initialRetryTokens) => {
    const MAX_CAPACITY = initialRetryTokens;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error) => error.name === "TimeoutError" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error) => {
      if (!hasRetryTokens(error)) {
        throw new Error("No retry token available");
      }
      const capacityAmount = getCapacityAmount(error);
      availableCapacity -= capacityAmount;
      return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount) => {
      availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : constants_1.NO_RETRY_INCREMENT;
      availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
      hasRetryTokens,
      retrieveRetryTokens,
      releaseRetryTokens
    });
  };
  exports2.getDefaultRetryQuota = getDefaultRetryQuota;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/delayDecider.js
var require_delayDecider = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.defaultDelayDecider = void 0;
  var constants_1 = require_constants2();
  var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
  exports2.defaultDelayDecider = defaultDelayDecider;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/retryDecider.js
var require_retryDecider = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.defaultRetryDecider = void 0;
  var service_error_classification_1 = require_cjs20();
  var defaultRetryDecider = (error) => {
    if (!error) {
      return false;
    }
    return service_error_classification_1.isRetryableByTrait(error) || service_error_classification_1.isClockSkewError(error) || service_error_classification_1.isThrottlingError(error) || service_error_classification_1.isTransientError(error);
  };
  exports2.defaultRetryDecider = defaultRetryDecider;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js
var require_defaultStrategy = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.StandardRetryStrategy = exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = void 0;
  var protocol_http_1 = require_cjs17();
  var service_error_classification_1 = require_cjs20();
  var uuid_1 = require_uuid();
  var constants_1 = require_constants2();
  var defaultRetryQuota_1 = require_defaultRetryQuota();
  var delayDecider_1 = require_delayDecider();
  var retryDecider_1 = require_retryDecider();
  exports2.DEFAULT_MAX_ATTEMPTS = 3;
  exports2.DEFAULT_RETRY_MODE = "standard";
  var StandardRetryStrategy = class {
    constructor(maxAttemptsProvider, options) {
      var _a, _b, _c;
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
      this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
      this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : defaultRetryQuota_1.getDefaultRetryQuota(constants_1.INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
      return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
      let maxAttempts;
      try {
        maxAttempts = await this.maxAttemptsProvider();
      } catch (error) {
        maxAttempts = exports2.DEFAULT_MAX_ATTEMPTS;
      }
      return maxAttempts;
    }
    async retry(next, args) {
      let retryTokenAmount;
      let attempts = 0;
      let totalDelay = 0;
      const maxAttempts = await this.getMaxAttempts();
      const {request} = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        request.headers["amz-sdk-invocation-id"] = uuid_1.v4();
      }
      while (true) {
        try {
          if (protocol_http_1.HttpRequest.isInstance(request)) {
            request.headers["amz-sdk-request"] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          const {response, output} = await next(args);
          this.retryQuota.releaseRetryTokens(retryTokenAmount);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalDelay;
          return {response, output};
        } catch (err) {
          attempts++;
          if (this.shouldRetry(err, attempts, maxAttempts)) {
            retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
            const delay = this.delayDecider(service_error_classification_1.isThrottlingError(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
            totalDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
            continue;
          }
          if (!err.$metadata) {
            err.$metadata = {};
          }
          err.$metadata.attempts = attempts;
          err.$metadata.totalRetryDelay = totalDelay;
          throw err;
        }
      }
    }
  };
  exports2.StandardRetryStrategy = StandardRetryStrategy;
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/configurations.js
var require_configurations2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
  var defaultStrategy_1 = require_defaultStrategy();
  exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
  exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
  exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      const value = env[exports2.ENV_MAX_ATTEMPTS];
      if (!value)
        return void 0;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    configFileSelector: (profile) => {
      const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
      if (!value)
        return void 0;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    default: defaultStrategy_1.DEFAULT_MAX_ATTEMPTS
  };
  var resolveRetryConfig = (input) => {
    const maxAttempts = normalizeMaxAttempts(input.maxAttempts);
    return {
      ...input,
      maxAttempts,
      retryStrategy: input.retryStrategy || new defaultStrategy_1.StandardRetryStrategy(maxAttempts)
    };
  };
  exports2.resolveRetryConfig = resolveRetryConfig;
  var normalizeMaxAttempts = (maxAttempts = defaultStrategy_1.DEFAULT_MAX_ATTEMPTS) => {
    if (typeof maxAttempts === "number") {
      const promisified = Promise.resolve(maxAttempts);
      return () => promisified;
    }
    return maxAttempts;
  };
  exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
  exports2.CONFIG_RETRY_MODE = "retry_mode";
  exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
    default: defaultStrategy_1.DEFAULT_RETRY_MODE
  };
});

// node_modules/@aws-sdk/middleware-retry/dist/cjs/index.js
var require_cjs21 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib11();
  tslib_1.__exportStar(require_retryMiddleware(), exports2);
  tslib_1.__exportStar(require_defaultStrategy(), exports2);
  tslib_1.__exportStar(require_configurations2(), exports2);
  tslib_1.__exportStar(require_delayDecider(), exports2);
  tslib_1.__exportStar(require_retryDecider(), exports2);
});

// node_modules/@aws-sdk/node-config-provider/node_modules/tslib/tslib.js
var require_tslib12 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/node-config-provider/dist/cjs/fromEnv.js
var require_fromEnv = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromEnv = void 0;
  var property_provider_1 = require_cjs2();
  var fromEnv = (envVarSelector) => async () => {
    try {
      const config = envVarSelector(process.env);
      if (config === void 0) {
        throw new Error();
      }
      return config;
    } catch (e) {
      throw new property_provider_1.ProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
    }
  };
  exports2.fromEnv = fromEnv;
});

// node_modules/@aws-sdk/node-config-provider/dist/cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromSharedConfigFiles = exports2.ENV_PROFILE = void 0;
  var property_provider_1 = require_cjs2();
  var shared_ini_file_loader_1 = require_cjs5();
  var DEFAULT_PROFILE = "default";
  exports2.ENV_PROFILE = "AWS_PROFILE";
  var fromSharedConfigFiles = (configSelector, {preferredFile = "config", ...init} = {}) => async () => {
    const {loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init), profile = process.env[exports2.ENV_PROFILE] || DEFAULT_PROFILE} = init;
    const {configFile, credentialsFile} = await loadedConfig;
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config" ? {...profileFromCredentials, ...profileFromConfig} : {...profileFromConfig, ...profileFromCredentials};
    try {
      const configValue = configSelector(mergedProfile);
      if (configValue === void 0) {
        throw new Error();
      }
      return configValue;
    } catch (e) {
      throw new property_provider_1.ProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
    }
  };
  exports2.fromSharedConfigFiles = fromSharedConfigFiles;
});

// node_modules/@aws-sdk/node-config-provider/dist/cjs/fromStatic.js
var require_fromStatic2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fromStatic = void 0;
  var property_provider_1 = require_cjs2();
  var isFunction = (func) => typeof func === "function";
  var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => defaultValue() : property_provider_1.fromStatic(defaultValue);
  exports2.fromStatic = fromStatic;
});

// node_modules/@aws-sdk/node-config-provider/dist/cjs/configLoader.js
var require_configLoader = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.loadConfig = void 0;
  var property_provider_1 = require_cjs2();
  var fromEnv_1 = require_fromEnv();
  var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
  var fromStatic_1 = require_fromStatic2();
  var loadConfig = ({environmentVariableSelector, configFileSelector, default: defaultValue}, configuration = {}) => property_provider_1.memoize(property_provider_1.chain(fromEnv_1.fromEnv(environmentVariableSelector), fromSharedConfigFiles_1.fromSharedConfigFiles(configFileSelector, configuration), fromStatic_1.fromStatic(defaultValue)));
  exports2.loadConfig = loadConfig;
});

// node_modules/@aws-sdk/node-config-provider/dist/cjs/index.js
var require_cjs22 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib12();
  tslib_1.__exportStar(require_configLoader(), exports2);
});

// node_modules/@aws-sdk/node-http-handler/node_modules/tslib/tslib.js
var require_tslib13 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/util-uri-escape/node_modules/tslib/tslib.js
var require_tslib14 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/util-uri-escape/dist/cjs/escape-uri.js
var require_escape_uri = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.escapeUri = void 0;
  var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
  exports2.escapeUri = escapeUri;
  var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
});

// node_modules/@aws-sdk/util-uri-escape/dist/cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.escapeUriPath = void 0;
  var escape_uri_1 = require_escape_uri();
  var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
  exports2.escapeUriPath = escapeUriPath;
});

// node_modules/@aws-sdk/util-uri-escape/dist/cjs/index.js
var require_cjs23 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib14();
  tslib_1.__exportStar(require_escape_uri(), exports2);
  tslib_1.__exportStar(require_escape_uri_path(), exports2);
});

// node_modules/@aws-sdk/querystring-builder/dist/cjs/index.js
var require_cjs24 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.buildQueryString = void 0;
  var util_uri_escape_1 = require_cjs23();
  function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
      const value = query[key];
      key = util_uri_escape_1.escapeUri(key);
      if (Array.isArray(value)) {
        for (let i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(`${key}=${util_uri_escape_1.escapeUri(value[i])}`);
        }
      } else {
        let qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += `=${util_uri_escape_1.escapeUri(value)}`;
        }
        parts.push(qsEntry);
      }
    }
    return parts.join("&");
  }
  exports2.buildQueryString = buildQueryString;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/constants.js
var require_constants3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
  exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getTransformedHeaders = void 0;
  var getTransformedHeaders = (headers) => {
    const transformedHeaders = {};
    for (const name of Object.keys(headers)) {
      const headerValues = headers[name];
      transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
  };
  exports2.getTransformedHeaders = getTransformedHeaders;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.setConnectionTimeout = void 0;
  var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
    if (!timeoutInMs) {
      return;
    }
    request.on("socket", (socket) => {
      if (socket.connecting) {
        const timeoutId = setTimeout(() => {
          request.destroy();
          reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
            name: "TimeoutError"
          }));
        }, timeoutInMs);
        socket.on("connect", () => {
          clearTimeout(timeoutId);
        });
      }
    });
  };
  exports2.setConnectionTimeout = setConnectionTimeout;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.setSocketTimeout = void 0;
  var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
    request.setTimeout(timeoutInMs, () => {
      request.destroy();
      reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), {name: "TimeoutError"}));
    });
  };
  exports2.setSocketTimeout = setSocketTimeout;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/write-request-body.js
var require_write_request_body = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.writeRequestBody = void 0;
  var stream_1 = require("stream");
  function writeRequestBody(httpRequest, request) {
    const expect = request.headers["Expect"] || request.headers["expect"];
    if (expect === "100-continue") {
      httpRequest.on("continue", () => {
        writeBody(httpRequest, request.body);
      });
    } else {
      writeBody(httpRequest, request.body);
    }
  }
  exports2.writeRequestBody = writeRequestBody;
  function writeBody(httpRequest, body) {
    if (body instanceof stream_1.Readable) {
      body.pipe(httpRequest);
    } else if (body) {
      httpRequest.end(Buffer.from(body));
    } else {
      httpRequest.end();
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/node-http-handler.js
var require_node_http_handler = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NodeHttpHandler = void 0;
  var protocol_http_1 = require_cjs17();
  var querystring_builder_1 = require_cjs24();
  var http_1 = require("http");
  var https_1 = require("https");
  var constants_1 = require_constants3();
  var get_transformed_headers_1 = require_get_transformed_headers();
  var set_connection_timeout_1 = require_set_connection_timeout();
  var set_socket_timeout_1 = require_set_socket_timeout();
  var write_request_body_1 = require_write_request_body();
  var NodeHttpHandler = class {
    constructor({connectionTimeout, socketTimeout, httpAgent, httpsAgent} = {}) {
      this.metadata = {handlerProtocol: "http/1.1"};
      this.connectionTimeout = connectionTimeout;
      this.socketTimeout = socketTimeout;
      const keepAlive = true;
      this.httpAgent = httpAgent || new http_1.Agent({keepAlive});
      this.httpsAgent = httpsAgent || new https_1.Agent({keepAlive});
    }
    destroy() {
      this.httpAgent.destroy();
      this.httpsAgent.destroy();
    }
    handle(request, {abortSignal} = {}) {
      return new Promise((resolve, reject) => {
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const isSSL = request.protocol === "https:";
        const queryString = querystring_builder_1.buildQueryString(request.query || {});
        const nodeHttpsOptions = {
          headers: request.headers,
          host: request.hostname,
          method: request.method,
          path: queryString ? `${request.path}?${queryString}` : request.path,
          port: request.port,
          agent: isSSL ? this.httpsAgent : this.httpAgent
        };
        const requestFunc = isSSL ? https_1.request : http_1.request;
        const req = requestFunc(nodeHttpsOptions, (res) => {
          const httpResponse = new protocol_http_1.HttpResponse({
            statusCode: res.statusCode || -1,
            headers: get_transformed_headers_1.getTransformedHeaders(res.headers),
            body: res
          });
          resolve({response: httpResponse});
        });
        req.on("error", (err) => {
          if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
            reject(Object.assign(err, {name: "TimeoutError"}));
          } else {
            reject(err);
          }
        });
        set_connection_timeout_1.setConnectionTimeout(req, reject, this.connectionTimeout);
        set_socket_timeout_1.setSocketTimeout(req, reject, this.socketTimeout);
        if (abortSignal) {
          abortSignal.onabort = () => {
            req.abort();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          };
        }
        write_request_body_1.writeRequestBody(req, request);
      });
    }
  };
  exports2.NodeHttpHandler = NodeHttpHandler;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NodeHttp2Handler = void 0;
  var protocol_http_1 = require_cjs17();
  var querystring_builder_1 = require_cjs24();
  var http2_1 = require("http2");
  var get_transformed_headers_1 = require_get_transformed_headers();
  var write_request_body_1 = require_write_request_body();
  var NodeHttp2Handler = class {
    constructor({requestTimeout, sessionTimeout} = {}) {
      this.metadata = {handlerProtocol: "h2"};
      this.requestTimeout = requestTimeout;
      this.sessionTimeout = sessionTimeout;
      this.connectionPool = new Map();
    }
    destroy() {
      for (const [_, http2Session] of this.connectionPool) {
        http2Session.destroy();
      }
      this.connectionPool.clear();
    }
    handle(request, {abortSignal} = {}) {
      return new Promise((resolve, reject) => {
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const {hostname, method, port, protocol, path, query} = request;
        const queryString = querystring_builder_1.buildQueryString(query || {});
        const req = this.getSession(`${protocol}//${hostname}${port ? `:${port}` : ""}`).request({
          ...request.headers,
          [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
          [http2_1.constants.HTTP2_HEADER_METHOD]: method
        });
        req.on("response", (headers) => {
          const httpResponse = new protocol_http_1.HttpResponse({
            statusCode: headers[":status"] || -1,
            headers: get_transformed_headers_1.getTransformedHeaders(headers),
            body: req
          });
          resolve({response: httpResponse});
        });
        req.on("error", reject);
        req.on("frameError", reject);
        req.on("aborted", reject);
        const requestTimeout = this.requestTimeout;
        if (requestTimeout) {
          req.setTimeout(requestTimeout, () => {
            req.close();
            const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
          });
        }
        if (abortSignal) {
          abortSignal.onabort = () => {
            req.close();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          };
        }
        write_request_body_1.writeRequestBody(req, request);
      });
    }
    getSession(authority) {
      const connectionPool = this.connectionPool;
      const existingSession = connectionPool.get(authority);
      if (existingSession)
        return existingSession;
      const newSession = http2_1.connect(authority);
      connectionPool.set(authority, newSession);
      const sessionTimeout = this.sessionTimeout;
      if (sessionTimeout) {
        newSession.setTimeout(sessionTimeout, () => {
          newSession.close();
          connectionPool.delete(authority);
        });
      }
      return newSession;
    }
  };
  exports2.NodeHttp2Handler = NodeHttp2Handler;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/stream-collector/collector.js
var require_collector = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Collector = void 0;
  var stream_1 = require("stream");
  var Collector = class extends stream_1.Writable {
    constructor() {
      super(...arguments);
      this.bufferedBytes = [];
    }
    _write(chunk, encoding, callback) {
      this.bufferedBytes.push(chunk);
      callback();
    }
  };
  exports2.Collector = Collector;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/stream-collector/index.js
var require_stream_collector = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.streamCollector = void 0;
  var collector_1 = require_collector();
  var streamCollector = (stream) => new Promise((resolve, reject) => {
    const collector = new collector_1.Collector();
    stream.pipe(collector);
    stream.on("error", (err) => {
      collector.end();
      reject(err);
    });
    collector.on("error", reject);
    collector.on("finish", function() {
      const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
      resolve(bytes);
    });
  });
  exports2.streamCollector = streamCollector;
});

// node_modules/@aws-sdk/node-http-handler/dist/cjs/index.js
var require_cjs25 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib13();
  tslib_1.__exportStar(require_node_http_handler(), exports2);
  tslib_1.__exportStar(require_node_http2_handler(), exports2);
  tslib_1.__exportStar(require_stream_collector(), exports2);
});

// node_modules/@aws-sdk/querystring-parser/dist/cjs/index.js
var require_cjs26 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.parseQueryString = void 0;
  function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
      for (const pair of querystring.split("&")) {
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    }
    return query;
  }
  exports2.parseQueryString = parseQueryString;
});

// node_modules/@aws-sdk/url-parser-node/dist/cjs/index.js
var require_cjs27 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.parseUrl = void 0;
  var querystring_parser_1 = require_cjs26();
  var url_1 = require("url");
  var parseUrl = (url) => {
    const {hostname = "localhost", pathname = "/", port, protocol = "https:", search} = url_1.parse(url);
    let query;
    if (search) {
      query = querystring_parser_1.parseQueryString(search);
    }
    return {
      hostname,
      port: port ? parseInt(port) : void 0,
      protocol,
      path: pathname,
      query
    };
  };
  exports2.parseUrl = parseUrl;
});

// node_modules/@aws-sdk/util-base64-node/dist/cjs/index.js
var require_cjs28 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.toBase64 = exports2.fromBase64 = void 0;
  var util_buffer_from_1 = require_cjs14();
  function fromBase64(input) {
    const buffer = util_buffer_from_1.fromString(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  }
  exports2.fromBase64 = fromBase64;
  function toBase64(input) {
    return util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
  }
  exports2.toBase64 = toBase64;
});

// node_modules/@aws-sdk/util-body-length-node/dist/cjs/index.js
var require_cjs29 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.calculateBodyLength = void 0;
  var fs_1 = require("fs");
  function calculateBodyLength(body) {
    if (!body) {
      return 0;
    }
    if (typeof body === "string") {
      return Buffer.from(body).length;
    } else if (typeof body.byteLength === "number") {
      return body.byteLength;
    } else if (typeof body.size === "number") {
      return body.size;
    } else if (typeof body.path === "string") {
      return fs_1.lstatSync(body.path).size;
    }
  }
  exports2.calculateBodyLength = calculateBodyLength;
});

// node_modules/@aws-sdk/util-user-agent-node/node_modules/tslib/tslib.js
var require_tslib15 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/util-user-agent-node/dist/cjs/index.js
var require_cjs30 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.defaultUserAgent = void 0;
  var tslib_1 = require_tslib15();
  var process_1 = tslib_1.__importDefault(require("process"));
  function defaultUserAgent(packageName, packageVersion) {
    let engine = `${process_1.default.platform}/${process_1.default.version}`;
    if (process_1.default.env.AWS_EXECUTION_ENV) {
      engine += ` exec-env/${process_1.default.env.AWS_EXECUTION_ENV}`;
    }
    return `aws-sdk-nodejs-v3-${packageName}/${packageVersion} ${engine}`;
  }
  exports2.defaultUserAgent = defaultUserAgent;
});

// node_modules/@aws-sdk/util-utf8-node/dist/cjs/index.js
var require_cjs31 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.toUtf8 = exports2.fromUtf8 = void 0;
  var util_buffer_from_1 = require_cjs14();
  var fromUtf8 = (input) => {
    const buf = util_buffer_from_1.fromString(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  };
  exports2.fromUtf8 = fromUtf8;
  var toUtf8 = (input) => util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
  exports2.toUtf8 = toUtf8;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/endpoints.js
var require_endpoints = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.defaultRegionInfoProvider = void 0;
  var AWS_TEMPLATE = "s3.{region}.amazonaws.com";
  var AWS_CN_TEMPLATE = "s3.{region}.amazonaws.com.cn";
  var AWS_ISO_TEMPLATE = "s3.{region}.c2s.ic.gov";
  var AWS_ISO_B_TEMPLATE = "s3.{region}.sc2s.sgov.gov";
  var AWS_US_GOV_TEMPLATE = "s3.{region}.amazonaws.com";
  var AWS_REGIONS = new Set([
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2"
  ]);
  var AWS_CN_REGIONS = new Set(["cn-north-1", "cn-northwest-1"]);
  var AWS_ISO_REGIONS = new Set(["us-iso-east-1"]);
  var AWS_ISO_B_REGIONS = new Set(["us-isob-east-1"]);
  var AWS_US_GOV_REGIONS = new Set(["us-gov-east-1", "us-gov-west-1"]);
  var defaultRegionInfoProvider = (region, options) => {
    let regionInfo = void 0;
    switch (region) {
      case "ap-east-1":
        regionInfo = {
          hostname: "s3.ap-east-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ap-northeast-1":
        regionInfo = {
          hostname: "s3.ap-northeast-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ap-northeast-2":
        regionInfo = {
          hostname: "s3.ap-northeast-2.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ap-south-1":
        regionInfo = {
          hostname: "s3.ap-south-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ap-southeast-1":
        regionInfo = {
          hostname: "s3.ap-southeast-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ap-southeast-2":
        regionInfo = {
          hostname: "s3.ap-southeast-2.amazonaws.com",
          partition: "aws"
        };
        break;
      case "ca-central-1":
        regionInfo = {
          hostname: "s3.ca-central-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "cn-north-1":
        regionInfo = {
          hostname: "s3.cn-north-1.amazonaws.com.cn",
          partition: "aws-cn"
        };
        break;
      case "cn-northwest-1":
        regionInfo = {
          hostname: "s3.cn-northwest-1.amazonaws.com.cn",
          partition: "aws-cn"
        };
        break;
      case "eu-central-1":
        regionInfo = {
          hostname: "s3.eu-central-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "eu-north-1":
        regionInfo = {
          hostname: "s3.eu-north-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "eu-west-1":
        regionInfo = {
          hostname: "s3.eu-west-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "eu-west-2":
        regionInfo = {
          hostname: "s3.eu-west-2.amazonaws.com",
          partition: "aws"
        };
        break;
      case "eu-west-3":
        regionInfo = {
          hostname: "s3.eu-west-3.amazonaws.com",
          partition: "aws"
        };
        break;
      case "fips-us-gov-west-1":
        regionInfo = {
          hostname: "s3-fips-us-gov-west-1.amazonaws.com",
          partition: "aws-us-gov",
          signingRegion: "us-gov-west-1"
        };
        break;
      case "me-south-1":
        regionInfo = {
          hostname: "s3.me-south-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "s3-external-1":
        regionInfo = {
          hostname: "s3-external-1.amazonaws.com",
          partition: "aws",
          signingRegion: "us-east-1"
        };
        break;
      case "sa-east-1":
        regionInfo = {
          hostname: "s3.sa-east-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "us-east-1":
        regionInfo = {
          hostname: "s3.amazonaws.com",
          partition: "aws"
        };
        break;
      case "us-east-2":
        regionInfo = {
          hostname: "s3.us-east-2.amazonaws.com",
          partition: "aws"
        };
        break;
      case "us-gov-east-1":
        regionInfo = {
          hostname: "s3.us-gov-east-1.amazonaws.com",
          partition: "aws-us-gov"
        };
        break;
      case "us-gov-west-1":
        regionInfo = {
          hostname: "s3.us-gov-west-1.amazonaws.com",
          partition: "aws-us-gov"
        };
        break;
      case "us-iso-east-1":
        regionInfo = {
          hostname: "s3.us-iso-east-1.c2s.ic.gov",
          partition: "aws-iso"
        };
        break;
      case "us-isob-east-1":
        regionInfo = {
          hostname: "s3.us-isob-east-1.sc2s.sgov.gov",
          partition: "aws-iso-b"
        };
        break;
      case "us-west-1":
        regionInfo = {
          hostname: "s3.us-west-1.amazonaws.com",
          partition: "aws"
        };
        break;
      case "us-west-2":
        regionInfo = {
          hostname: "s3.us-west-2.amazonaws.com",
          partition: "aws"
        };
        break;
      default:
        if (AWS_REGIONS.has(region)) {
          regionInfo = {
            hostname: AWS_TEMPLATE.replace("{region}", region),
            partition: "aws"
          };
        }
        if (AWS_CN_REGIONS.has(region)) {
          regionInfo = {
            hostname: AWS_CN_TEMPLATE.replace("{region}", region),
            partition: "aws-cn"
          };
        }
        if (AWS_ISO_REGIONS.has(region)) {
          regionInfo = {
            hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
            partition: "aws-iso"
          };
        }
        if (AWS_ISO_B_REGIONS.has(region)) {
          regionInfo = {
            hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
            partition: "aws-iso-b"
          };
        }
        if (AWS_US_GOV_REGIONS.has(region)) {
          regionInfo = {
            hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
            partition: "aws-us-gov"
          };
        }
        if (regionInfo === void 0) {
          regionInfo = {
            hostname: AWS_TEMPLATE.replace("{region}", region),
            partition: "aws"
          };
        }
    }
    return Promise.resolve(regionInfo);
  };
  exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ClientSharedValues = void 0;
  var endpoints_1 = require_endpoints();
  exports2.ClientSharedValues = {
    apiVersion: "2006-03-01",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: endpoints_1.defaultRegionInfoProvider,
    signingEscapePath: false,
    signingName: "s3",
    useArnRegion: false
  };
});

// node_modules/@aws-sdk/client-s3/dist/cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ClientDefaultValues = void 0;
  var tslib_1 = require_tslib();
  var package_json_1 = tslib_1.__importDefault(require_package());
  var config_resolver_1 = require_cjs();
  var credential_provider_node_1 = require_cjs8();
  var eventstream_serde_node_1 = require_cjs12();
  var hash_node_1 = require_cjs15();
  var hash_stream_node_1 = require_cjs16();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_retry_1 = require_cjs21();
  var node_config_provider_1 = require_cjs22();
  var node_http_handler_1 = require_cjs25();
  var url_parser_node_1 = require_cjs27();
  var util_base64_node_1 = require_cjs28();
  var util_body_length_node_1 = require_cjs29();
  var util_user_agent_node_1 = require_cjs30();
  var util_utf8_node_1 = require_cjs31();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared();
  exports2.ClientDefaultValues = {
    ...runtimeConfig_shared_1.ClientSharedValues,
    runtime: "node",
    base64Decoder: util_base64_node_1.fromBase64,
    base64Encoder: util_base64_node_1.toBase64,
    bodyLengthChecker: util_body_length_node_1.calculateBodyLength,
    credentialDefaultProvider: credential_provider_node_1.defaultProvider,
    defaultUserAgent: util_user_agent_node_1.defaultUserAgent(package_json_1.default.name, package_json_1.default.version),
    eventStreamSerdeProvider: eventstream_serde_node_1.eventStreamSerdeProvider,
    maxAttempts: node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
    md5: hash_node_1.Hash.bind(null, "md5"),
    region: node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
    requestHandler: new node_http_handler_1.NodeHttpHandler(),
    sha256: hash_node_1.Hash.bind(null, "sha256"),
    streamCollector: node_http_handler_1.streamCollector,
    streamHasher: hash_stream_node_1.fileStreamHasher,
    urlParser: url_parser_node_1.parseUrl,
    useArnRegion: node_config_provider_1.loadConfig(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
    utf8Decoder: util_utf8_node_1.fromUtf8,
    utf8Encoder: util_utf8_node_1.toUtf8
  };
});

// node_modules/@aws-sdk/eventstream-serde-config-resolver/node_modules/tslib/tslib.js
var require_tslib16 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/eventstream-serde-config-resolver/dist/cjs/EventStreamSerdeConfig.js
var require_EventStreamSerdeConfig = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveEventStreamSerdeConfig = void 0;
  var resolveEventStreamSerdeConfig = (input) => ({
    ...input,
    eventStreamMarshaller: input.eventStreamSerdeProvider(input)
  });
  exports2.resolveEventStreamSerdeConfig = resolveEventStreamSerdeConfig;
});

// node_modules/@aws-sdk/eventstream-serde-config-resolver/dist/cjs/index.js
var require_cjs32 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib16();
  tslib_1.__exportStar(require_EventStreamSerdeConfig(), exports2);
});

// node_modules/@aws-sdk/middleware-content-length/dist/cjs/index.js
var require_cjs33 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  var CONTENT_LENGTH_HEADER = "content-length";
  function contentLengthMiddleware(bodyLengthChecker) {
    return (next) => async (args) => {
      const request = args.request;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        const {body, headers} = request;
        if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
          const length = bodyLengthChecker(body);
          if (length !== void 0) {
            request.headers = {
              ...request.headers,
              [CONTENT_LENGTH_HEADER]: String(length)
            };
          }
        }
      }
      return next({
        ...args,
        request
      });
    };
  }
  exports2.contentLengthMiddleware = contentLengthMiddleware;
  exports2.contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware"
  };
  var getContentLengthPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
    }
  });
  exports2.getContentLengthPlugin = getContentLengthPlugin;
});

// node_modules/@aws-sdk/middleware-expect-continue/dist/cjs/index.js
var require_cjs34 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getAddExpectContinuePlugin = exports2.addExpectContinueMiddlewareOptions = exports2.addExpectContinueMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  function addExpectContinueMiddleware(options) {
    return (next) => async (args) => {
      const {request} = args;
      if (protocol_http_1.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
        request.headers = {
          ...request.headers,
          Expect: "100-continue"
        };
      }
      return next({
        ...args,
        request
      });
    };
  }
  exports2.addExpectContinueMiddleware = addExpectContinueMiddleware;
  exports2.addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
    name: "addExpectContinueMiddleware"
  };
  var getAddExpectContinuePlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(addExpectContinueMiddleware(options), exports2.addExpectContinueMiddlewareOptions);
    }
  });
  exports2.getAddExpectContinuePlugin = getAddExpectContinuePlugin;
});

// node_modules/@aws-sdk/middleware-host-header/dist/cjs/index.js
var require_cjs35 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
  var protocol_http_1 = require_cjs17();
  function resolveHostHeaderConfig(input) {
    return input;
  }
  exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
  var hostHeaderMiddleware = (options) => (next) => async (args) => {
    if (!protocol_http_1.HttpRequest.isInstance(args.request))
      return next(args);
    const {request} = args;
    const {handlerProtocol = ""} = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
      delete request.headers["host"];
      request.headers[":authority"] = "";
    } else if (!request.headers["host"]) {
      request.headers["host"] = request.hostname;
    }
    return next(args);
  };
  exports2.hostHeaderMiddleware = hostHeaderMiddleware;
  exports2.hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"]
  };
  var getHostHeaderPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(exports2.hostHeaderMiddleware(options), exports2.hostHeaderMiddlewareOptions);
    }
  });
  exports2.getHostHeaderPlugin = getHostHeaderPlugin;
});

// node_modules/@aws-sdk/middleware-logger/node_modules/tslib/tslib.js
var require_tslib17 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-logger/dist/cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
  var loggerMiddleware = () => (next, context) => async (args) => {
    var _a;
    const {logger} = context;
    const response = await next(args);
    if (!logger) {
      return response;
    }
    const httpResponse = response.response;
    if (typeof logger.info === "function") {
      logger.info({
        metadata: {
          statusCode: httpResponse.statusCode,
          requestId: (_a = httpResponse.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : httpResponse.headers["x-amzn-request-id"],
          extendedRequestId: httpResponse.headers["x-amz-id-2"],
          cfId: httpResponse.headers["x-amz-cf-id"]
        }
      });
    }
    return response;
  };
  exports2.loggerMiddleware = loggerMiddleware;
  exports2.loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize"
  };
  var getLoggerPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(exports2.loggerMiddleware(), exports2.loggerMiddlewareOptions);
    }
  });
  exports2.getLoggerPlugin = getLoggerPlugin;
});

// node_modules/@aws-sdk/middleware-logger/dist/cjs/index.js
var require_cjs36 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib17();
  tslib_1.__exportStar(require_loggerMiddleware(), exports2);
});

// node_modules/@aws-sdk/middleware-sdk-s3/node_modules/tslib/tslib.js
var require_tslib18 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist/cjs/validate-bucket-name.js
var require_validate_bucket_name = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getValidateBucketNamePlugin = exports2.validateBucketNameMiddlewareOptions = exports2.validateBucketNameMiddleware = void 0;
  var util_arn_parser_1 = require_cjs18();
  function validateBucketNameMiddleware() {
    return (next) => async (args) => {
      const {input: {Bucket}} = args;
      if (typeof Bucket === "string" && !util_arn_parser_1.validate(Bucket) && Bucket.indexOf("/") >= 0) {
        const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
        err.name = "InvalidBucketName";
        throw err;
      }
      return next({...args});
    };
  }
  exports2.validateBucketNameMiddleware = validateBucketNameMiddleware;
  exports2.validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware"
  };
  var getValidateBucketNamePlugin = (unused) => ({
    applyToStack: (clientStack) => {
      clientStack.add(validateBucketNameMiddleware(), exports2.validateBucketNameMiddlewareOptions);
    }
  });
  exports2.getValidateBucketNamePlugin = getValidateBucketNamePlugin;
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist/cjs/use-regional-endpoint.js
var require_use_regional_endpoint = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getUseRegionalEndpointPlugin = exports2.useRegionalEndpointMiddlewareOptions = exports2.useRegionalEndpointMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  var useRegionalEndpointMiddleware = (config) => (next) => async (args) => {
    const {request} = args;
    if (!protocol_http_1.HttpRequest.isInstance(request) || config.isCustomEndpoint)
      return next({...args});
    if (request.hostname === "s3.amazonaws.com") {
      request.hostname = "s3.us-east-1.amazonaws.com";
    } else if (await config.region() === "aws-global") {
      request.hostname = "s3.amazonaws.com";
    }
    return next({...args});
  };
  exports2.useRegionalEndpointMiddleware = useRegionalEndpointMiddleware;
  exports2.useRegionalEndpointMiddlewareOptions = {
    step: "build",
    tags: ["USE_REGIONAL_ENDPOINT", "S3"],
    name: "useRegionalEndpointMiddleware"
  };
  var getUseRegionalEndpointPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(exports2.useRegionalEndpointMiddleware(config), exports2.useRegionalEndpointMiddlewareOptions);
    }
  });
  exports2.getUseRegionalEndpointPlugin = getUseRegionalEndpointPlugin;
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist/cjs/throw-200-exceptions.js
var require_throw_200_exceptions = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getThrow200ExceptionsPlugin = exports2.throw200ExceptionsMiddlewareOptions = exports2.throw200ExceptionsMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  var throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
    const result = await next(args);
    const {response} = result;
    if (!protocol_http_1.HttpResponse.isInstance(response))
      return result;
    const {statusCode, body} = response;
    if (statusCode < 200 && statusCode >= 300)
      return result;
    const bodyBytes = await collectBody(body, config);
    const bodyString = await collectBodyString(bodyBytes, config);
    if (bodyBytes.length === 0) {
      const err = new Error("S3 aborted request");
      err.name = "InternalError";
      throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
      response.statusCode = 400;
    }
    response.body = bodyBytes;
    return result;
  };
  exports2.throw200ExceptionsMiddleware = throw200ExceptionsMiddleware;
  var collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
      return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
  };
  var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
  exports2.throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware"
  };
  var getThrow200ExceptionsPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(exports2.throw200ExceptionsMiddleware(config), exports2.throw200ExceptionsMiddlewareOptions);
    }
  });
  exports2.getThrow200ExceptionsPlugin = getThrow200ExceptionsPlugin;
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist/cjs/index.js
var require_cjs37 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib18();
  tslib_1.__exportStar(require_validate_bucket_name(), exports2);
  tslib_1.__exportStar(require_use_regional_endpoint(), exports2);
  tslib_1.__exportStar(require_throw_200_exceptions(), exports2);
});

// node_modules/@aws-sdk/middleware-signing/node_modules/tslib/tslib.js
var require_tslib19 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/signature-v4/node_modules/tslib/tslib.js
var require_tslib20 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/constants.js
var require_constants4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
  exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
  exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
  exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
  exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
  exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
  exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
  exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
  exports2.AUTH_HEADER = "authorization";
  exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
  exports2.DATE_HEADER = "date";
  exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
  exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
  exports2.SHA256_HEADER = "x-amz-content-sha256";
  exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
  exports2.HOST_HEADER = "host";
  exports2.ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
  };
  exports2.PROXY_HEADER_PATTERN = /^proxy-/;
  exports2.SEC_HEADER_PATTERN = /^sec-/;
  exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
  exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
  exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
  exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  exports2.MAX_CACHE_SIZE = 50;
  exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
  exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
  var constants_1 = require_constants4();
  var signingKeyCache = {};
  var cacheQueue = [];
  function createScope(shortDate, region, service) {
    return `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
  }
  exports2.createScope = createScope;
  function getSigningKey(sha256Constructor, credentials, shortDate, region, service) {
    const cacheKey = `${shortDate}:${region}:${service}:${credentials.accessKeyId}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
      return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
      delete signingKeyCache[cacheQueue.shift()];
    }
    return signingKeyCache[cacheKey] = new Promise((resolve, reject) => {
      let keyPromise = Promise.resolve(`AWS4${credentials.secretAccessKey}`);
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        keyPromise = keyPromise.then((intermediateKey) => hmac(sha256Constructor, intermediateKey, signable));
        keyPromise.catch(() => {
        });
      }
      keyPromise.then(resolve, (reason) => {
        delete signingKeyCache[cacheKey];
        reject(reason);
      });
    });
  }
  exports2.getSigningKey = getSigningKey;
  function clearCredentialCache() {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
      delete signingKeyCache[cacheKey];
    });
  }
  exports2.clearCredentialCache = clearCredentialCache;
  function hmac(ctor, secret, data) {
    const hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
  }
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCanonicalHeaders = void 0;
  var constants_1 = require_constants4();
  function getCanonicalHeaders({headers}, unsignableHeaders, signableHeaders) {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
      const canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
  }
  exports2.getCanonicalHeaders = getCanonicalHeaders;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCanonicalQuery = void 0;
  var util_uri_escape_1 = require_cjs23();
  var constants_1 = require_constants4();
  function getCanonicalQuery({query = {}}) {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()) {
      if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
        continue;
      }
      keys.push(key);
      const value = query[key];
      if (typeof value === "string") {
        serialized[key] = `${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value)}`;
      } else if (Array.isArray(value)) {
        serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value2)}`]), []).join("&");
      }
    }
    return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
  }
  exports2.getCanonicalQuery = getCanonicalQuery;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getPayloadHash = void 0;
  var is_array_buffer_1 = require_cjs13();
  var util_hex_encoding_1 = require_cjs9();
  var constants_1 = require_constants4();
  async function getPayloadHash({headers, body}, hashConstructor) {
    for (const headerName of Object.keys(headers)) {
      if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
        return headers[headerName];
      }
    }
    if (body == void 0) {
      return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    } else if (typeof body === "string" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {
      const hashCtor = new hashConstructor();
      hashCtor.update(body);
      return util_hex_encoding_1.toHex(await hashCtor.digest());
    }
    return constants_1.UNSIGNED_PAYLOAD;
  }
  exports2.getPayloadHash = getPayloadHash;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/hasHeader.js
var require_hasHeader = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.hasHeader = void 0;
  function hasHeader(soughtHeader, headers) {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }
  exports2.hasHeader = hasHeader;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/cloneRequest.js
var require_cloneRequest = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.cloneRequest = void 0;
  function cloneRequest({headers, query, ...rest}) {
    return {
      ...rest,
      headers: {...headers},
      query: query ? cloneQuery(query) : void 0
    };
  }
  exports2.cloneRequest = cloneRequest;
  function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.moveHeadersToQuery = void 0;
  var cloneRequest_1 = require_cloneRequest();
  function moveHeadersToQuery(request, options = {}) {
    var _a;
    const {headers, query = {}} = typeof request.clone === "function" ? request.clone() : cloneRequest_1.cloneRequest(request);
    for (const name of Object.keys(headers)) {
      const lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
    return {
      ...request,
      headers,
      query
    };
  }
  exports2.moveHeadersToQuery = moveHeadersToQuery;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/prepareRequest.js
var require_prepareRequest = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.prepareRequest = void 0;
  var cloneRequest_1 = require_cloneRequest();
  var constants_1 = require_constants4();
  function prepareRequest(request) {
    request = typeof request.clone === "function" ? request.clone() : cloneRequest_1.cloneRequest(request);
    for (const headerName of Object.keys(request.headers)) {
      if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
    return request;
  }
  exports2.prepareRequest = prepareRequest;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/utilDate.js
var require_utilDate = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.toDate = exports2.iso8601 = void 0;
  function iso8601(time) {
    return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
  }
  exports2.iso8601 = iso8601;
  function toDate(time) {
    if (typeof time === "number") {
      return new Date(time * 1e3);
    }
    if (typeof time === "string") {
      if (Number(time)) {
        return new Date(Number(time) * 1e3);
      }
      return new Date(time);
    }
    return time;
  }
  exports2.toDate = toDate;
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/SignatureV4.js
var require_SignatureV4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SignatureV4 = void 0;
  var util_hex_encoding_1 = require_cjs9();
  var constants_1 = require_constants4();
  var credentialDerivation_1 = require_credentialDerivation();
  var getCanonicalHeaders_1 = require_getCanonicalHeaders();
  var getCanonicalQuery_1 = require_getCanonicalQuery();
  var getPayloadHash_1 = require_getPayloadHash();
  var hasHeader_1 = require_hasHeader();
  var moveHeadersToQuery_1 = require_moveHeadersToQuery();
  var prepareRequest_1 = require_prepareRequest();
  var utilDate_1 = require_utilDate();
  var SignatureV4 = class {
    constructor({applyChecksum, credentials, region, service, sha256, uriEscapePath = true}) {
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = normalizeRegionProvider(region);
      this.credentialProvider = normalizeCredentialsProvider(credentials);
    }
    async presign(originalRequest, options = {}) {
      const {signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService} = options;
      const credentials = await this.credentialProvider();
      const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
      const {longDate, shortDate} = formatDate(signingDate);
      if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
        return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
      }
      const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
      const request = moveHeadersToQuery_1.moveHeadersToQuery(prepareRequest_1.prepareRequest(originalRequest), {unhoistableHeaders});
      if (credentials.sessionToken) {
        request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
      }
      request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
      request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
      request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
      request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
      const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
      request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash_1.getPayloadHash(originalRequest, this.sha256)));
      return request;
    }
    async sign(toSign, options) {
      if (typeof toSign === "string") {
        return this.signString(toSign, options);
      } else if (toSign.headers && toSign.payload) {
        return this.signEvent(toSign, options);
      } else {
        return this.signRequest(toSign, options);
      }
    }
    async signEvent({headers, payload}, {signingDate = new Date(), priorSignature, signingRegion, signingService}) {
      const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
      const {shortDate, longDate} = formatDate(signingDate);
      const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
      const hashedPayload = await getPayloadHash_1.getPayloadHash({headers: {}, body: payload}, this.sha256);
      const hash = new this.sha256();
      hash.update(headers);
      const hashedHeaders = util_hex_encoding_1.toHex(await hash.digest());
      const stringToSign = [
        constants_1.EVENT_ALGORITHM_IDENTIFIER,
        longDate,
        scope,
        priorSignature,
        hashedHeaders,
        hashedPayload
      ].join("\n");
      return this.signString(stringToSign, {signingDate, signingRegion: region, signingService});
    }
    async signString(stringToSign, {signingDate = new Date(), signingRegion, signingService} = {}) {
      const credentials = await this.credentialProvider();
      const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
      const {shortDate} = formatDate(signingDate);
      const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
      hash.update(stringToSign);
      return util_hex_encoding_1.toHex(await hash.digest());
    }
    async signRequest(requestToSign, {signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService} = {}) {
      const credentials = await this.credentialProvider();
      const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
      const request = prepareRequest_1.prepareRequest(requestToSign);
      const {longDate, shortDate} = formatDate(signingDate);
      const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
      request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
      if (credentials.sessionToken) {
        request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
      }
      const payloadHash = await getPayloadHash_1.getPayloadHash(request, this.sha256);
      if (!hasHeader_1.hasHeader(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
        request.headers[constants_1.SHA256_HEADER] = payloadHash;
      }
      const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
      request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
      return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
      const sortedHeaders = Object.keys(canonicalHeaders).sort();
      return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery_1.getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
      const hash = new this.sha256();
      hash.update(canonicalRequest);
      const hashedRequest = await hash.digest();
      return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${util_hex_encoding_1.toHex(hashedRequest)}`;
    }
    getCanonicalPath({path}) {
      if (this.uriEscapePath) {
        const doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
        return `/${doubleEncoded.replace(/%2F/g, "/")}`;
      }
      return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
      const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
      const hash = new this.sha256(await keyPromise);
      hash.update(stringToSign);
      return util_hex_encoding_1.toHex(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
      return credentialDerivation_1.getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
  };
  exports2.SignatureV4 = SignatureV4;
  var formatDate = (now) => {
    const longDate = utilDate_1.iso8601(now).replace(/[\-:]/g, "");
    return {
      longDate,
      shortDate: longDate.substr(0, 8)
    };
  };
  var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  var normalizeRegionProvider = (region) => {
    if (typeof region === "string") {
      const promisified = Promise.resolve(region);
      return () => promisified;
    } else {
      return region;
    }
  };
  var normalizeCredentialsProvider = (credentials) => {
    if (typeof credentials === "object") {
      const promisified = Promise.resolve(credentials);
      return () => promisified;
    } else {
      return credentials;
    }
  };
});

// node_modules/@aws-sdk/signature-v4/dist/cjs/index.js
var require_cjs38 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib20();
  tslib_1.__exportStar(require_credentialDerivation(), exports2);
  tslib_1.__exportStar(require_SignatureV4(), exports2);
});

// node_modules/@aws-sdk/middleware-signing/dist/cjs/configurations.js
var require_configurations3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveAwsAuthConfig = void 0;
  var signature_v4_1 = require_cjs38();
  function resolveAwsAuthConfig(input) {
    const credentials = input.credentials || input.credentialDefaultProvider(input);
    const normalizedCreds = normalizeProvider(credentials);
    const {signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256} = input;
    let signer2;
    if (input.signer) {
      signer2 = normalizeProvider(input.signer);
    } else {
      signer2 = () => normalizeProvider(input.region)().then(async (region) => [await input.regionInfoProvider(region) || {}, region]).then(([regionInfo, region]) => {
        const {signingRegion = input.signingRegion, signingService = input.signingName} = regionInfo;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService;
        return new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    }
    return {
      ...input,
      systemClockOffset,
      signingEscapePath,
      credentials: normalizedCreds,
      signer: signer2
    };
  }
  exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
  function normalizeProvider(input) {
    if (typeof input === "object") {
      const promisified = Promise.resolve(input);
      return () => promisified;
    }
    return input;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist/cjs/middleware.js
var require_middleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  var isClockSkewed = (newServerTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 3e5;
  var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  function awsAuthMiddleware(options) {
    return (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer2 = typeof options.signer === "function" ? await options.signer() : options.signer;
      const output = await next({
        ...args,
        request: await signer2.sign(args.request, {
          signingDate: new Date(Date.now() + options.systemClockOffset),
          signingRegion: context["signing_region"],
          signingService: context["signing_service"]
        })
      });
      const {headers} = output.response;
      const dateHeader = headers && (headers.date || headers.Date);
      if (dateHeader) {
        const serverTime = Date.parse(dateHeader);
        if (isClockSkewed(serverTime, options.systemClockOffset)) {
          options.systemClockOffset = serverTime - Date.now();
        }
      }
      return output;
    };
  }
  exports2.awsAuthMiddleware = awsAuthMiddleware;
  exports2.awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: ["SIGNATURE", "AWSAUTH"],
    relation: "after",
    toMiddleware: "retryMiddleware"
  };
  var getAwsAuthPlugin = (options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(awsAuthMiddleware(options), exports2.awsAuthMiddlewareOptions);
    }
  });
  exports2.getAwsAuthPlugin = getAwsAuthPlugin;
});

// node_modules/@aws-sdk/middleware-signing/dist/cjs/index.js
var require_cjs39 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib19();
  tslib_1.__exportStar(require_configurations3(), exports2);
  tslib_1.__exportStar(require_middleware(), exports2);
});

// node_modules/@aws-sdk/middleware-user-agent/node_modules/tslib/tslib.js
var require_tslib21 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-user-agent/dist/cjs/configurations.js
var require_configurations4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveUserAgentConfig = void 0;
  function resolveUserAgentConfig(input) {
    return input;
  }
  exports2.resolveUserAgentConfig = resolveUserAgentConfig;
});

// node_modules/@aws-sdk/middleware-user-agent/dist/cjs/middleware.js
var require_middleware2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
  var protocol_http_1 = require_cjs17();
  function userAgentMiddleware(options) {
    return (next) => (args) => {
      const {request} = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const {headers} = request;
      const userAgentHeader = options.runtime === "node" ? "user-agent" : "x-amz-user-agent";
      if (!headers[userAgentHeader]) {
        headers[userAgentHeader] = `${options.defaultUserAgent}`;
      } else {
        headers[userAgentHeader] += ` ${options.defaultUserAgent}`;
      }
      if (options.customUserAgent) {
        headers[userAgentHeader] += ` ${options.customUserAgent}`;
      }
      return next({
        ...args,
        request
      });
    };
  }
  exports2.userAgentMiddleware = userAgentMiddleware;
  exports2.getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    tags: ["SET_USER_AGENT", "USER_AGENT"]
  };
  var getUserAgentPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(userAgentMiddleware(config), exports2.getUserAgentMiddlewareOptions);
    }
  });
  exports2.getUserAgentPlugin = getUserAgentPlugin;
});

// node_modules/@aws-sdk/middleware-user-agent/dist/cjs/index.js
var require_cjs40 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib21();
  tslib_1.__exportStar(require_configurations4(), exports2);
  tslib_1.__exportStar(require_middleware2(), exports2);
});

// node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.js
var require_tslib22 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-stack/node_modules/tslib/tslib.js
var require_tslib23 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-stack/dist/cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.constructStack = void 0;
  var constructStack = () => {
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove) => {
      let isRemoved = false;
      const filterCb = (entry) => {
        if (entry.name && entry.name === toRemove) {
          isRemoved = true;
          entriesNameSet.delete(toRemove);
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    };
    const removeByReference = (toRemove) => {
      let isRemoved = false;
      const filterCb = (entry) => {
        if (entry.middleware === toRemove) {
          isRemoved = true;
          if (entry.name)
            entriesNameSet.delete(entry.name);
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    };
    const cloneTo = (toStack) => {
      absoluteEntries.forEach((entry) => {
        toStack.add(entry.middleware, {...entry});
      });
      relativeEntries.forEach((entry) => {
        toStack.addRelativeTo(entry.middleware, {...entry});
      });
      return toStack;
    };
    const expandRelativeMiddlewareList = (from) => {
      const expandedMiddlewareList = [];
      from.before.forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      expandedMiddlewareList.push(from);
      from.after.reverse().forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      return expandedMiddlewareList;
    };
    const getMiddlewareList = () => {
      const normalizedAbsoluteEntries = [];
      const normalizedRelativeEntries = [];
      const normalizedEntriesNameMap = {};
      absoluteEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        if (normalizedEntry.name)
          normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
        normalizedAbsoluteEntries.push(normalizedEntry);
      });
      relativeEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        if (normalizedEntry.name)
          normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
        normalizedRelativeEntries.push(normalizedEntry);
      });
      normalizedRelativeEntries.forEach((entry) => {
        if (entry.toMiddleware) {
          const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
          if (toMiddleware === void 0) {
            throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
          }
          if (entry.relation === "after") {
            toMiddleware.after.push(entry);
          }
          if (entry.relation === "before") {
            toMiddleware.before.push(entry);
          }
        }
      });
      const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
        wholeList.push(...expendedMiddlewareList);
        return wholeList;
      }, []);
      return mainChain.map((entry) => entry.middleware);
    };
    const stack = {
      add: (middleware, options = {}) => {
        const {name} = options;
        const entry = {
          step: "initialize",
          priority: "normal",
          middleware,
          ...options
        };
        if (name) {
          if (entriesNameSet.has(name)) {
            throw new Error(`Duplicate middleware name '${name}'`);
          }
          entriesNameSet.add(name);
        }
        absoluteEntries.push(entry);
      },
      addRelativeTo: (middleware, options) => {
        const {name} = options;
        const entry = {
          middleware,
          ...options
        };
        if (name) {
          if (entriesNameSet.has(name)) {
            throw new Error(`Duplicated middleware name '${name}'`);
          }
          entriesNameSet.add(name);
        }
        relativeEntries.push(entry);
      },
      clone: () => cloneTo(exports2.constructStack()),
      use: (plugin) => {
        plugin.applyToStack(stack);
      },
      remove: (toRemove) => {
        if (typeof toRemove === "string")
          return removeByName(toRemove);
        else
          return removeByReference(toRemove);
      },
      removeByTag: (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          const {tags, name} = entry;
          if (tags && tags.includes(toRemove)) {
            if (name)
              entriesNameSet.delete(name);
            isRemoved = true;
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      },
      concat: (from) => {
        const cloned = cloneTo(exports2.constructStack());
        cloned.use(from);
        return cloned;
      },
      applyToStack: cloneTo,
      resolve: (handler, context) => {
        for (const middleware of getMiddlewareList().reverse()) {
          handler = middleware(handler, context);
        }
        return handler;
      }
    };
    return stack;
  };
  exports2.constructStack = constructStack;
  var stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
  };
  var priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
  };
});

// node_modules/@aws-sdk/middleware-stack/dist/cjs/index.js
var require_cjs41 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib23();
  tslib_1.__exportStar(require_MiddlewareStack(), exports2);
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/client.js
var require_client = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Client = void 0;
  var middleware_stack_1 = require_cjs41();
  var Client = class {
    constructor(config) {
      this.middlewareStack = middleware_stack_1.constructStack();
      this.config = config;
    }
    send(command, optionsOrCb, cb) {
      const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
      const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      if (callback) {
        handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
        });
      } else {
        return handler(command).then((result) => result.output);
      }
    }
    destroy() {
      if (this.config.requestHandler.destroy)
        this.config.requestHandler.destroy();
    }
  };
  exports2.Client = Client;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/command.js
var require_command = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Command = void 0;
  var middleware_stack_1 = require_cjs41();
  var Command = class {
    constructor() {
      this.middlewareStack = middleware_stack_1.constructStack();
    }
  };
  exports2.Command = Command;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/document-type.js
var require_document_type = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/exception.js
var require_exception = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.extendedEncodeURIComponent = void 0;
  function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  }
  exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getArrayIfSingleItem = void 0;
  var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
  exports2.getArrayIfSingleItem = getArrayIfSingleItem;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getValueFromTextNode = void 0;
  var getValueFromTextNode = (obj) => {
    const textNodeName = "#text";
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
        obj[key] = obj[key][textNodeName];
      } else if (typeof obj[key] === "object" && obj[key] !== null) {
        obj[key] = exports2.getValueFromTextNode(obj[key]);
      }
    }
    return obj;
  };
  exports2.getValueFromTextNode = getValueFromTextNode;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/lazy-json.js
var require_lazy_json = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.LazyJsonString = exports2.StringWrapper = void 0;
  var StringWrapper = function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [null, ...arguments]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
  };
  exports2.StringWrapper = StringWrapper;
  exports2.StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
      value: exports2.StringWrapper,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  Object.setPrototypeOf(exports2.StringWrapper, String);
  var LazyJsonString = class extends exports2.StringWrapper {
    deserializeJSON() {
      return JSON.parse(super.toString());
    }
    toJSON() {
      return super.toString();
    }
    static fromObject(object) {
      if (object instanceof LazyJsonString) {
        return object;
      } else if (object instanceof String || typeof object === "string") {
        return new LazyJsonString(object);
      }
      return new LazyJsonString(JSON.stringify(object));
    }
  };
  exports2.LazyJsonString = LazyJsonString;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/date-utils.js
var require_date_utils = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dateToUtcString = void 0;
  var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${days[dayOfWeek]}, ${dayOfMonthString} ${months[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
  }
  exports2.dateToUtcString = dateToUtcString;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/split-every.js
var require_split_every = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.splitEvery = void 0;
  function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
      throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
      return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for (let i = 0; i < segments.length; i++) {
      if (currentSegment === "") {
        currentSegment = segments[i];
      } else {
        currentSegment += delimiter + segments[i];
      }
      if ((i + 1) % numDelimiters === 0) {
        compoundSegments.push(currentSegment);
        currentSegment = "";
      }
    }
    if (currentSegment !== "") {
      compoundSegments.push(currentSegment);
    }
    return compoundSegments;
  }
  exports2.splitEvery = splitEvery;
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/constants.js
var require_constants5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SENSITIVE_STRING = void 0;
  exports2.SENSITIVE_STRING = "***SensitiveInformation***";
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/retryable-trait.js
var require_retryable_trait = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/sdk-error.js
var require_sdk_error = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/smithy-client/dist/cjs/index.js
var require_cjs42 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib22();
  tslib_1.__exportStar(require_client(), exports2);
  tslib_1.__exportStar(require_command(), exports2);
  tslib_1.__exportStar(require_document_type(), exports2);
  tslib_1.__exportStar(require_exception(), exports2);
  tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
  tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
  tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
  tslib_1.__exportStar(require_lazy_json(), exports2);
  tslib_1.__exportStar(require_date_utils(), exports2);
  tslib_1.__exportStar(require_split_every(), exports2);
  tslib_1.__exportStar(require_constants5(), exports2);
  tslib_1.__exportStar(require_retryable_trait(), exports2);
  tslib_1.__exportStar(require_sdk_error(), exports2);
});

// node_modules/@aws-sdk/client-s3/dist/cjs/S3Client.js
var require_S3Client = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.S3Client = void 0;
  var runtimeConfig_1 = require_runtimeConfig();
  var config_resolver_1 = require_cjs();
  var eventstream_serde_config_resolver_1 = require_cjs32();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_content_length_1 = require_cjs33();
  var middleware_expect_continue_1 = require_cjs34();
  var middleware_host_header_1 = require_cjs35();
  var middleware_logger_1 = require_cjs36();
  var middleware_retry_1 = require_cjs21();
  var middleware_sdk_s3_1 = require_cjs37();
  var middleware_signing_1 = require_cjs39();
  var middleware_user_agent_1 = require_cjs40();
  var smithy_client_1 = require_cjs42();
  var S3Client2 = class extends smithy_client_1.Client {
    constructor(configuration) {
      let _config_0 = {
        ...runtimeConfig_1.ClientDefaultValues,
        ...configuration
      };
      let _config_1 = config_resolver_1.resolveRegionConfig(_config_0);
      let _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);
      let _config_3 = middleware_signing_1.resolveAwsAuthConfig(_config_2);
      let _config_4 = middleware_retry_1.resolveRetryConfig(_config_3);
      let _config_5 = middleware_user_agent_1.resolveUserAgentConfig(_config_4);
      let _config_6 = middleware_host_header_1.resolveHostHeaderConfig(_config_5);
      let _config_7 = middleware_bucket_endpoint_1.resolveBucketEndpointConfig(_config_6);
      let _config_8 = eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig(_config_7);
      super(_config_8);
      this.config = _config_8;
      this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(this.config));
      this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));
      this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));
      this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));
      this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));
      this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));
      this.middlewareStack.use(middleware_sdk_s3_1.getValidateBucketNamePlugin(this.config));
      this.middlewareStack.use(middleware_sdk_s3_1.getUseRegionalEndpointPlugin(this.config));
      this.middlewareStack.use(middleware_expect_continue_1.getAddExpectContinuePlugin(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  exports2.S3Client = S3Client2;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/models/models_0.js
var require_models_0 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketAccelerateConfigurationOutput = exports2.DeletePublicAccessBlockRequest = exports2.DeleteObjectTaggingRequest = exports2.DeleteObjectTaggingOutput = exports2.DeleteObjectsRequest = exports2.Delete = exports2.ObjectIdentifier = exports2.DeleteObjectsOutput = exports2._Error = exports2.DeletedObject = exports2.DeleteObjectRequest = exports2.DeleteObjectOutput = exports2.DeleteBucketWebsiteRequest = exports2.DeleteBucketTaggingRequest = exports2.DeleteBucketReplicationRequest = exports2.DeleteBucketPolicyRequest = exports2.DeleteBucketOwnershipControlsRequest = exports2.DeleteBucketMetricsConfigurationRequest = exports2.DeleteBucketLifecycleRequest = exports2.DeleteBucketInventoryConfigurationRequest = exports2.DeleteBucketIntelligentTieringConfigurationRequest = exports2.DeleteBucketEncryptionRequest = exports2.DeleteBucketCorsRequest = exports2.DeleteBucketAnalyticsConfigurationRequest = exports2.DeleteBucketRequest = exports2.CreateMultipartUploadRequest = exports2.CreateMultipartUploadOutput = exports2.CreateBucketRequest = exports2.CreateBucketConfiguration = exports2.CreateBucketOutput = exports2.BucketAlreadyOwnedByYou = exports2.BucketAlreadyExists = exports2.ObjectNotInActiveTierError = exports2.CopyObjectRequest = exports2.CopyObjectOutput = exports2.CopyObjectResult = exports2.CompleteMultipartUploadRequest = exports2.CompletedMultipartUpload = exports2.CompletedPart = exports2.CompleteMultipartUploadOutput = exports2.AccessControlTranslation = exports2.AccessControlPolicy = exports2.Owner = exports2.Grant = exports2.Grantee = exports2.AccelerateConfiguration = exports2.NoSuchUpload = exports2.AbortMultipartUploadRequest = exports2.AbortMultipartUploadOutput = exports2.AbortIncompleteMultipartUpload = void 0;
  exports2.LoggingEnabled = exports2.TargetGrant = exports2.GetBucketLocationRequest = exports2.GetBucketLocationOutput = exports2.GetBucketLifecycleConfigurationRequest = exports2.GetBucketLifecycleConfigurationOutput = exports2.LifecycleRule = exports2.Transition = exports2.NoncurrentVersionTransition = exports2.NoncurrentVersionExpiration = exports2.LifecycleRuleFilter = exports2.LifecycleRuleAndOperator = exports2.LifecycleExpiration = exports2.GetBucketInventoryConfigurationRequest = exports2.GetBucketInventoryConfigurationOutput = exports2.InventoryConfiguration = exports2.InventorySchedule = exports2.InventoryFilter = exports2.InventoryDestination = exports2.InventoryS3BucketDestination = exports2.InventoryEncryption = exports2.SSES3 = exports2.SSEKMS = exports2.GetBucketIntelligentTieringConfigurationRequest = exports2.GetBucketIntelligentTieringConfigurationOutput = exports2.IntelligentTieringConfiguration = exports2.Tiering = exports2.IntelligentTieringFilter = exports2.IntelligentTieringAndOperator = exports2.GetBucketEncryptionRequest = exports2.GetBucketEncryptionOutput = exports2.ServerSideEncryptionConfiguration = exports2.ServerSideEncryptionRule = exports2.ServerSideEncryptionByDefault = exports2.GetBucketCorsRequest = exports2.GetBucketCorsOutput = exports2.CORSRule = exports2.GetBucketAnalyticsConfigurationRequest = exports2.GetBucketAnalyticsConfigurationOutput = exports2.AnalyticsConfiguration = exports2.StorageClassAnalysis = exports2.StorageClassAnalysisDataExport = exports2.AnalyticsExportDestination = exports2.AnalyticsS3BucketDestination = exports2.AnalyticsFilter = exports2.AnalyticsAndOperator = exports2.Tag = exports2.GetBucketAclRequest = exports2.GetBucketAclOutput = exports2.GetBucketAccelerateConfigurationRequest = void 0;
  exports2.Condition = exports2.RedirectAllRequestsTo = exports2.IndexDocument = exports2.ErrorDocument = exports2.GetBucketVersioningRequest = exports2.GetBucketVersioningOutput = exports2.GetBucketTaggingRequest = exports2.GetBucketTaggingOutput = exports2.GetBucketRequestPaymentRequest = exports2.GetBucketRequestPaymentOutput = exports2.GetBucketReplicationRequest = exports2.GetBucketReplicationOutput = exports2.ReplicationConfiguration = exports2.ReplicationRule = exports2.SourceSelectionCriteria = exports2.SseKmsEncryptedObjects = exports2.ReplicaModifications = exports2.ReplicationRuleFilter = exports2.ReplicationRuleAndOperator = exports2.ExistingObjectReplication = exports2.Destination = exports2.ReplicationTime = exports2.Metrics = exports2.ReplicationTimeValue = exports2.EncryptionConfiguration = exports2.DeleteMarkerReplication = exports2.GetBucketPolicyStatusRequest = exports2.GetBucketPolicyStatusOutput = exports2.PolicyStatus = exports2.GetBucketPolicyRequest = exports2.GetBucketPolicyOutput = exports2.GetBucketOwnershipControlsRequest = exports2.GetBucketOwnershipControlsOutput = exports2.OwnershipControls = exports2.OwnershipControlsRule = exports2.NotificationConfiguration = exports2.TopicConfiguration = exports2.QueueConfiguration = exports2.LambdaFunctionConfiguration = exports2.NotificationConfigurationFilter = exports2.S3KeyFilter = exports2.FilterRule = exports2.GetBucketNotificationConfigurationRequest = exports2.GetBucketMetricsConfigurationRequest = exports2.GetBucketMetricsConfigurationOutput = exports2.MetricsConfiguration = exports2.MetricsFilter = exports2.MetricsAndOperator = exports2.GetBucketLoggingRequest = exports2.GetBucketLoggingOutput = void 0;
  exports2.ListObjectsRequest = exports2.ListObjectsOutput = exports2._Object = exports2.ListMultipartUploadsRequest = exports2.ListMultipartUploadsOutput = exports2.MultipartUpload = exports2.Initiator = exports2.CommonPrefix = exports2.ListBucketsOutput = exports2.Bucket = exports2.ListBucketMetricsConfigurationsRequest = exports2.ListBucketMetricsConfigurationsOutput = exports2.ListBucketInventoryConfigurationsRequest = exports2.ListBucketInventoryConfigurationsOutput = exports2.ListBucketIntelligentTieringConfigurationsRequest = exports2.ListBucketIntelligentTieringConfigurationsOutput = exports2.ListBucketAnalyticsConfigurationsRequest = exports2.ListBucketAnalyticsConfigurationsOutput = exports2.HeadObjectRequest = exports2.HeadObjectOutput = exports2.NoSuchBucket = exports2.HeadBucketRequest = exports2.GetPublicAccessBlockRequest = exports2.GetPublicAccessBlockOutput = exports2.PublicAccessBlockConfiguration = exports2.GetObjectTorrentRequest = exports2.GetObjectTorrentOutput = exports2.GetObjectTaggingRequest = exports2.GetObjectTaggingOutput = exports2.GetObjectRetentionRequest = exports2.GetObjectRetentionOutput = exports2.ObjectLockRetention = exports2.GetObjectLockConfigurationRequest = exports2.GetObjectLockConfigurationOutput = exports2.ObjectLockConfiguration = exports2.ObjectLockRule = exports2.DefaultRetention = exports2.GetObjectLegalHoldRequest = exports2.GetObjectLegalHoldOutput = exports2.ObjectLockLegalHold = exports2.GetObjectAclRequest = exports2.GetObjectAclOutput = exports2.NoSuchKey = exports2.InvalidObjectState = exports2.GetObjectRequest = exports2.GetObjectOutput = exports2.GetBucketWebsiteRequest = exports2.GetBucketWebsiteOutput = exports2.RoutingRule = exports2.Redirect = void 0;
  exports2.GlacierJobParameters = exports2.RestoreObjectOutput = exports2.ObjectAlreadyInActiveTierError = exports2.PutPublicAccessBlockRequest = exports2.PutObjectTaggingRequest = exports2.PutObjectTaggingOutput = exports2.PutObjectRetentionRequest = exports2.PutObjectRetentionOutput = exports2.PutObjectLockConfigurationRequest = exports2.PutObjectLockConfigurationOutput = exports2.PutObjectLegalHoldRequest = exports2.PutObjectLegalHoldOutput = exports2.PutObjectAclRequest = exports2.PutObjectAclOutput = exports2.PutObjectRequest = exports2.PutObjectOutput = exports2.PutBucketWebsiteRequest = exports2.WebsiteConfiguration = exports2.PutBucketVersioningRequest = exports2.VersioningConfiguration = exports2.PutBucketTaggingRequest = exports2.Tagging = exports2.PutBucketRequestPaymentRequest = exports2.RequestPaymentConfiguration = exports2.PutBucketReplicationRequest = exports2.PutBucketPolicyRequest = exports2.PutBucketOwnershipControlsRequest = exports2.PutBucketNotificationConfigurationRequest = exports2.PutBucketMetricsConfigurationRequest = exports2.PutBucketLoggingRequest = exports2.BucketLoggingStatus = exports2.PutBucketLifecycleConfigurationRequest = exports2.BucketLifecycleConfiguration = exports2.PutBucketInventoryConfigurationRequest = exports2.PutBucketIntelligentTieringConfigurationRequest = exports2.PutBucketEncryptionRequest = exports2.PutBucketCorsRequest = exports2.CORSConfiguration = exports2.PutBucketAnalyticsConfigurationRequest = exports2.PutBucketAclRequest = exports2.PutBucketAccelerateConfigurationRequest = exports2.ListPartsRequest = exports2.ListPartsOutput = exports2.Part = exports2.ListObjectVersionsRequest = exports2.ListObjectVersionsOutput = exports2.ObjectVersion = exports2.DeleteMarkerEntry = exports2.ListObjectsV2Request = exports2.ListObjectsV2Output = void 0;
  exports2.Encryption = void 0;
  var smithy_client_1 = require_cjs42();
  var AbortIncompleteMultipartUpload;
  (function(AbortIncompleteMultipartUpload2) {
    AbortIncompleteMultipartUpload2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AbortIncompleteMultipartUpload = exports2.AbortIncompleteMultipartUpload || (exports2.AbortIncompleteMultipartUpload = {}));
  var AbortMultipartUploadOutput;
  (function(AbortMultipartUploadOutput2) {
    AbortMultipartUploadOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AbortMultipartUploadOutput = exports2.AbortMultipartUploadOutput || (exports2.AbortMultipartUploadOutput = {}));
  var AbortMultipartUploadRequest;
  (function(AbortMultipartUploadRequest2) {
    AbortMultipartUploadRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AbortMultipartUploadRequest = exports2.AbortMultipartUploadRequest || (exports2.AbortMultipartUploadRequest = {}));
  var NoSuchUpload;
  (function(NoSuchUpload2) {
    NoSuchUpload2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NoSuchUpload = exports2.NoSuchUpload || (exports2.NoSuchUpload = {}));
  var AccelerateConfiguration;
  (function(AccelerateConfiguration2) {
    AccelerateConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AccelerateConfiguration = exports2.AccelerateConfiguration || (exports2.AccelerateConfiguration = {}));
  var Grantee;
  (function(Grantee2) {
    Grantee2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Grantee = exports2.Grantee || (exports2.Grantee = {}));
  var Grant;
  (function(Grant2) {
    Grant2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Grant = exports2.Grant || (exports2.Grant = {}));
  var Owner;
  (function(Owner2) {
    Owner2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Owner = exports2.Owner || (exports2.Owner = {}));
  var AccessControlPolicy;
  (function(AccessControlPolicy2) {
    AccessControlPolicy2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AccessControlPolicy = exports2.AccessControlPolicy || (exports2.AccessControlPolicy = {}));
  var AccessControlTranslation;
  (function(AccessControlTranslation2) {
    AccessControlTranslation2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AccessControlTranslation = exports2.AccessControlTranslation || (exports2.AccessControlTranslation = {}));
  var CompleteMultipartUploadOutput;
  (function(CompleteMultipartUploadOutput2) {
    CompleteMultipartUploadOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(CompleteMultipartUploadOutput = exports2.CompleteMultipartUploadOutput || (exports2.CompleteMultipartUploadOutput = {}));
  var CompletedPart;
  (function(CompletedPart2) {
    CompletedPart2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CompletedPart = exports2.CompletedPart || (exports2.CompletedPart = {}));
  var CompletedMultipartUpload;
  (function(CompletedMultipartUpload2) {
    CompletedMultipartUpload2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CompletedMultipartUpload = exports2.CompletedMultipartUpload || (exports2.CompletedMultipartUpload = {}));
  var CompleteMultipartUploadRequest;
  (function(CompleteMultipartUploadRequest2) {
    CompleteMultipartUploadRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CompleteMultipartUploadRequest = exports2.CompleteMultipartUploadRequest || (exports2.CompleteMultipartUploadRequest = {}));
  var CopyObjectResult;
  (function(CopyObjectResult2) {
    CopyObjectResult2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CopyObjectResult = exports2.CopyObjectResult || (exports2.CopyObjectResult = {}));
  var CopyObjectOutput;
  (function(CopyObjectOutput2) {
    CopyObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING}
    });
  })(CopyObjectOutput = exports2.CopyObjectOutput || (exports2.CopyObjectOutput = {}));
  var CopyObjectRequest;
  (function(CopyObjectRequest2) {
    CopyObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING},
      ...obj.CopySourceSSECustomerKey && {CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(CopyObjectRequest = exports2.CopyObjectRequest || (exports2.CopyObjectRequest = {}));
  var ObjectNotInActiveTierError;
  (function(ObjectNotInActiveTierError2) {
    ObjectNotInActiveTierError2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectNotInActiveTierError = exports2.ObjectNotInActiveTierError || (exports2.ObjectNotInActiveTierError = {}));
  var BucketAlreadyExists;
  (function(BucketAlreadyExists2) {
    BucketAlreadyExists2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(BucketAlreadyExists = exports2.BucketAlreadyExists || (exports2.BucketAlreadyExists = {}));
  var BucketAlreadyOwnedByYou;
  (function(BucketAlreadyOwnedByYou2) {
    BucketAlreadyOwnedByYou2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(BucketAlreadyOwnedByYou = exports2.BucketAlreadyOwnedByYou || (exports2.BucketAlreadyOwnedByYou = {}));
  var CreateBucketOutput;
  (function(CreateBucketOutput2) {
    CreateBucketOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CreateBucketOutput = exports2.CreateBucketOutput || (exports2.CreateBucketOutput = {}));
  var CreateBucketConfiguration;
  (function(CreateBucketConfiguration2) {
    CreateBucketConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CreateBucketConfiguration = exports2.CreateBucketConfiguration || (exports2.CreateBucketConfiguration = {}));
  var CreateBucketRequest;
  (function(CreateBucketRequest2) {
    CreateBucketRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CreateBucketRequest = exports2.CreateBucketRequest || (exports2.CreateBucketRequest = {}));
  var CreateMultipartUploadOutput;
  (function(CreateMultipartUploadOutput2) {
    CreateMultipartUploadOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING}
    });
  })(CreateMultipartUploadOutput = exports2.CreateMultipartUploadOutput || (exports2.CreateMultipartUploadOutput = {}));
  var CreateMultipartUploadRequest;
  (function(CreateMultipartUploadRequest2) {
    CreateMultipartUploadRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING}
    });
  })(CreateMultipartUploadRequest = exports2.CreateMultipartUploadRequest || (exports2.CreateMultipartUploadRequest = {}));
  var DeleteBucketRequest;
  (function(DeleteBucketRequest2) {
    DeleteBucketRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketRequest = exports2.DeleteBucketRequest || (exports2.DeleteBucketRequest = {}));
  var DeleteBucketAnalyticsConfigurationRequest;
  (function(DeleteBucketAnalyticsConfigurationRequest2) {
    DeleteBucketAnalyticsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketAnalyticsConfigurationRequest = exports2.DeleteBucketAnalyticsConfigurationRequest || (exports2.DeleteBucketAnalyticsConfigurationRequest = {}));
  var DeleteBucketCorsRequest;
  (function(DeleteBucketCorsRequest2) {
    DeleteBucketCorsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketCorsRequest = exports2.DeleteBucketCorsRequest || (exports2.DeleteBucketCorsRequest = {}));
  var DeleteBucketEncryptionRequest;
  (function(DeleteBucketEncryptionRequest2) {
    DeleteBucketEncryptionRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketEncryptionRequest = exports2.DeleteBucketEncryptionRequest || (exports2.DeleteBucketEncryptionRequest = {}));
  var DeleteBucketIntelligentTieringConfigurationRequest;
  (function(DeleteBucketIntelligentTieringConfigurationRequest2) {
    DeleteBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketIntelligentTieringConfigurationRequest = exports2.DeleteBucketIntelligentTieringConfigurationRequest || (exports2.DeleteBucketIntelligentTieringConfigurationRequest = {}));
  var DeleteBucketInventoryConfigurationRequest;
  (function(DeleteBucketInventoryConfigurationRequest2) {
    DeleteBucketInventoryConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketInventoryConfigurationRequest = exports2.DeleteBucketInventoryConfigurationRequest || (exports2.DeleteBucketInventoryConfigurationRequest = {}));
  var DeleteBucketLifecycleRequest;
  (function(DeleteBucketLifecycleRequest2) {
    DeleteBucketLifecycleRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketLifecycleRequest = exports2.DeleteBucketLifecycleRequest || (exports2.DeleteBucketLifecycleRequest = {}));
  var DeleteBucketMetricsConfigurationRequest;
  (function(DeleteBucketMetricsConfigurationRequest2) {
    DeleteBucketMetricsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketMetricsConfigurationRequest = exports2.DeleteBucketMetricsConfigurationRequest || (exports2.DeleteBucketMetricsConfigurationRequest = {}));
  var DeleteBucketOwnershipControlsRequest;
  (function(DeleteBucketOwnershipControlsRequest2) {
    DeleteBucketOwnershipControlsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketOwnershipControlsRequest = exports2.DeleteBucketOwnershipControlsRequest || (exports2.DeleteBucketOwnershipControlsRequest = {}));
  var DeleteBucketPolicyRequest;
  (function(DeleteBucketPolicyRequest2) {
    DeleteBucketPolicyRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketPolicyRequest = exports2.DeleteBucketPolicyRequest || (exports2.DeleteBucketPolicyRequest = {}));
  var DeleteBucketReplicationRequest;
  (function(DeleteBucketReplicationRequest2) {
    DeleteBucketReplicationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketReplicationRequest = exports2.DeleteBucketReplicationRequest || (exports2.DeleteBucketReplicationRequest = {}));
  var DeleteBucketTaggingRequest;
  (function(DeleteBucketTaggingRequest2) {
    DeleteBucketTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketTaggingRequest = exports2.DeleteBucketTaggingRequest || (exports2.DeleteBucketTaggingRequest = {}));
  var DeleteBucketWebsiteRequest;
  (function(DeleteBucketWebsiteRequest2) {
    DeleteBucketWebsiteRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteBucketWebsiteRequest = exports2.DeleteBucketWebsiteRequest || (exports2.DeleteBucketWebsiteRequest = {}));
  var DeleteObjectOutput;
  (function(DeleteObjectOutput2) {
    DeleteObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectOutput = exports2.DeleteObjectOutput || (exports2.DeleteObjectOutput = {}));
  var DeleteObjectRequest;
  (function(DeleteObjectRequest2) {
    DeleteObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectRequest = exports2.DeleteObjectRequest || (exports2.DeleteObjectRequest = {}));
  var DeletedObject;
  (function(DeletedObject2) {
    DeletedObject2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeletedObject = exports2.DeletedObject || (exports2.DeletedObject = {}));
  var _Error;
  (function(_Error2) {
    _Error2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(_Error = exports2._Error || (exports2._Error = {}));
  var DeleteObjectsOutput;
  (function(DeleteObjectsOutput2) {
    DeleteObjectsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectsOutput = exports2.DeleteObjectsOutput || (exports2.DeleteObjectsOutput = {}));
  var ObjectIdentifier;
  (function(ObjectIdentifier2) {
    ObjectIdentifier2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectIdentifier = exports2.ObjectIdentifier || (exports2.ObjectIdentifier = {}));
  var Delete;
  (function(Delete2) {
    Delete2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Delete = exports2.Delete || (exports2.Delete = {}));
  var DeleteObjectsRequest;
  (function(DeleteObjectsRequest2) {
    DeleteObjectsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectsRequest = exports2.DeleteObjectsRequest || (exports2.DeleteObjectsRequest = {}));
  var DeleteObjectTaggingOutput;
  (function(DeleteObjectTaggingOutput2) {
    DeleteObjectTaggingOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectTaggingOutput = exports2.DeleteObjectTaggingOutput || (exports2.DeleteObjectTaggingOutput = {}));
  var DeleteObjectTaggingRequest;
  (function(DeleteObjectTaggingRequest2) {
    DeleteObjectTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteObjectTaggingRequest = exports2.DeleteObjectTaggingRequest || (exports2.DeleteObjectTaggingRequest = {}));
  var DeletePublicAccessBlockRequest;
  (function(DeletePublicAccessBlockRequest2) {
    DeletePublicAccessBlockRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeletePublicAccessBlockRequest = exports2.DeletePublicAccessBlockRequest || (exports2.DeletePublicAccessBlockRequest = {}));
  var GetBucketAccelerateConfigurationOutput;
  (function(GetBucketAccelerateConfigurationOutput2) {
    GetBucketAccelerateConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketAccelerateConfigurationOutput = exports2.GetBucketAccelerateConfigurationOutput || (exports2.GetBucketAccelerateConfigurationOutput = {}));
  var GetBucketAccelerateConfigurationRequest;
  (function(GetBucketAccelerateConfigurationRequest2) {
    GetBucketAccelerateConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketAccelerateConfigurationRequest = exports2.GetBucketAccelerateConfigurationRequest || (exports2.GetBucketAccelerateConfigurationRequest = {}));
  var GetBucketAclOutput;
  (function(GetBucketAclOutput2) {
    GetBucketAclOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketAclOutput = exports2.GetBucketAclOutput || (exports2.GetBucketAclOutput = {}));
  var GetBucketAclRequest;
  (function(GetBucketAclRequest2) {
    GetBucketAclRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketAclRequest = exports2.GetBucketAclRequest || (exports2.GetBucketAclRequest = {}));
  var Tag;
  (function(Tag2) {
    Tag2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Tag = exports2.Tag || (exports2.Tag = {}));
  var AnalyticsAndOperator;
  (function(AnalyticsAndOperator2) {
    AnalyticsAndOperator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AnalyticsAndOperator = exports2.AnalyticsAndOperator || (exports2.AnalyticsAndOperator = {}));
  var AnalyticsFilter;
  (function(AnalyticsFilter2) {
    AnalyticsFilter2.visit = (value, visitor) => {
      if (value.Prefix !== void 0)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== void 0)
        return visitor.Tag(value.Tag);
      if (value.And !== void 0)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    AnalyticsFilter2.filterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return {Prefix: obj.Prefix};
      if (obj.Tag !== void 0)
        return {Tag: Tag.filterSensitiveLog(obj.Tag)};
      if (obj.And !== void 0)
        return {And: AnalyticsAndOperator.filterSensitiveLog(obj.And)};
      if (obj.$unknown !== void 0)
        return {[obj.$unknown[0]]: "UNKNOWN"};
    };
  })(AnalyticsFilter = exports2.AnalyticsFilter || (exports2.AnalyticsFilter = {}));
  var AnalyticsS3BucketDestination;
  (function(AnalyticsS3BucketDestination2) {
    AnalyticsS3BucketDestination2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AnalyticsS3BucketDestination = exports2.AnalyticsS3BucketDestination || (exports2.AnalyticsS3BucketDestination = {}));
  var AnalyticsExportDestination;
  (function(AnalyticsExportDestination2) {
    AnalyticsExportDestination2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(AnalyticsExportDestination = exports2.AnalyticsExportDestination || (exports2.AnalyticsExportDestination = {}));
  var StorageClassAnalysisDataExport;
  (function(StorageClassAnalysisDataExport2) {
    StorageClassAnalysisDataExport2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(StorageClassAnalysisDataExport = exports2.StorageClassAnalysisDataExport || (exports2.StorageClassAnalysisDataExport = {}));
  var StorageClassAnalysis;
  (function(StorageClassAnalysis2) {
    StorageClassAnalysis2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(StorageClassAnalysis = exports2.StorageClassAnalysis || (exports2.StorageClassAnalysis = {}));
  var AnalyticsConfiguration;
  (function(AnalyticsConfiguration2) {
    AnalyticsConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && {Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter)}
    });
  })(AnalyticsConfiguration = exports2.AnalyticsConfiguration || (exports2.AnalyticsConfiguration = {}));
  var GetBucketAnalyticsConfigurationOutput;
  (function(GetBucketAnalyticsConfigurationOutput2) {
    GetBucketAnalyticsConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
      }
    });
  })(GetBucketAnalyticsConfigurationOutput = exports2.GetBucketAnalyticsConfigurationOutput || (exports2.GetBucketAnalyticsConfigurationOutput = {}));
  var GetBucketAnalyticsConfigurationRequest;
  (function(GetBucketAnalyticsConfigurationRequest2) {
    GetBucketAnalyticsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketAnalyticsConfigurationRequest = exports2.GetBucketAnalyticsConfigurationRequest || (exports2.GetBucketAnalyticsConfigurationRequest = {}));
  var CORSRule;
  (function(CORSRule2) {
    CORSRule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CORSRule = exports2.CORSRule || (exports2.CORSRule = {}));
  var GetBucketCorsOutput;
  (function(GetBucketCorsOutput2) {
    GetBucketCorsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketCorsOutput = exports2.GetBucketCorsOutput || (exports2.GetBucketCorsOutput = {}));
  var GetBucketCorsRequest;
  (function(GetBucketCorsRequest2) {
    GetBucketCorsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketCorsRequest = exports2.GetBucketCorsRequest || (exports2.GetBucketCorsRequest = {}));
  var ServerSideEncryptionByDefault;
  (function(ServerSideEncryptionByDefault2) {
    ServerSideEncryptionByDefault2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && {KMSMasterKeyID: smithy_client_1.SENSITIVE_STRING}
    });
  })(ServerSideEncryptionByDefault = exports2.ServerSideEncryptionByDefault || (exports2.ServerSideEncryptionByDefault = {}));
  var ServerSideEncryptionRule;
  (function(ServerSideEncryptionRule2) {
    ServerSideEncryptionRule2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
      }
    });
  })(ServerSideEncryptionRule = exports2.ServerSideEncryptionRule || (exports2.ServerSideEncryptionRule = {}));
  var ServerSideEncryptionConfiguration;
  (function(ServerSideEncryptionConfiguration2) {
    ServerSideEncryptionConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && {Rules: obj.Rules.map((item) => ServerSideEncryptionRule.filterSensitiveLog(item))}
    });
  })(ServerSideEncryptionConfiguration = exports2.ServerSideEncryptionConfiguration || (exports2.ServerSideEncryptionConfiguration = {}));
  var GetBucketEncryptionOutput;
  (function(GetBucketEncryptionOutput2) {
    GetBucketEncryptionOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    });
  })(GetBucketEncryptionOutput = exports2.GetBucketEncryptionOutput || (exports2.GetBucketEncryptionOutput = {}));
  var GetBucketEncryptionRequest;
  (function(GetBucketEncryptionRequest2) {
    GetBucketEncryptionRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketEncryptionRequest = exports2.GetBucketEncryptionRequest || (exports2.GetBucketEncryptionRequest = {}));
  var IntelligentTieringAndOperator;
  (function(IntelligentTieringAndOperator2) {
    IntelligentTieringAndOperator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(IntelligentTieringAndOperator = exports2.IntelligentTieringAndOperator || (exports2.IntelligentTieringAndOperator = {}));
  var IntelligentTieringFilter;
  (function(IntelligentTieringFilter2) {
    IntelligentTieringFilter2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(IntelligentTieringFilter = exports2.IntelligentTieringFilter || (exports2.IntelligentTieringFilter = {}));
  var Tiering;
  (function(Tiering2) {
    Tiering2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Tiering = exports2.Tiering || (exports2.Tiering = {}));
  var IntelligentTieringConfiguration;
  (function(IntelligentTieringConfiguration2) {
    IntelligentTieringConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(IntelligentTieringConfiguration = exports2.IntelligentTieringConfiguration || (exports2.IntelligentTieringConfiguration = {}));
  var GetBucketIntelligentTieringConfigurationOutput;
  (function(GetBucketIntelligentTieringConfigurationOutput2) {
    GetBucketIntelligentTieringConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketIntelligentTieringConfigurationOutput = exports2.GetBucketIntelligentTieringConfigurationOutput || (exports2.GetBucketIntelligentTieringConfigurationOutput = {}));
  var GetBucketIntelligentTieringConfigurationRequest;
  (function(GetBucketIntelligentTieringConfigurationRequest2) {
    GetBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketIntelligentTieringConfigurationRequest = exports2.GetBucketIntelligentTieringConfigurationRequest || (exports2.GetBucketIntelligentTieringConfigurationRequest = {}));
  var SSEKMS;
  (function(SSEKMS2) {
    SSEKMS2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KeyId && {KeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(SSEKMS = exports2.SSEKMS || (exports2.SSEKMS = {}));
  var SSES3;
  (function(SSES32) {
    SSES32.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(SSES3 = exports2.SSES3 || (exports2.SSES3 = {}));
  var InventoryEncryption;
  (function(InventoryEncryption2) {
    InventoryEncryption2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMS && {SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS)}
    });
  })(InventoryEncryption = exports2.InventoryEncryption || (exports2.InventoryEncryption = {}));
  var InventoryS3BucketDestination;
  (function(InventoryS3BucketDestination2) {
    InventoryS3BucketDestination2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && {Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption)}
    });
  })(InventoryS3BucketDestination = exports2.InventoryS3BucketDestination || (exports2.InventoryS3BucketDestination = {}));
  var InventoryDestination;
  (function(InventoryDestination2) {
    InventoryDestination2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination)
      }
    });
  })(InventoryDestination = exports2.InventoryDestination || (exports2.InventoryDestination = {}));
  var InventoryFilter;
  (function(InventoryFilter2) {
    InventoryFilter2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(InventoryFilter = exports2.InventoryFilter || (exports2.InventoryFilter = {}));
  var InventorySchedule;
  (function(InventorySchedule2) {
    InventorySchedule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(InventorySchedule = exports2.InventorySchedule || (exports2.InventorySchedule = {}));
  var InventoryConfiguration;
  (function(InventoryConfiguration2) {
    InventoryConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Destination && {Destination: InventoryDestination.filterSensitiveLog(obj.Destination)}
    });
  })(InventoryConfiguration = exports2.InventoryConfiguration || (exports2.InventoryConfiguration = {}));
  var GetBucketInventoryConfigurationOutput;
  (function(GetBucketInventoryConfigurationOutput2) {
    GetBucketInventoryConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
      }
    });
  })(GetBucketInventoryConfigurationOutput = exports2.GetBucketInventoryConfigurationOutput || (exports2.GetBucketInventoryConfigurationOutput = {}));
  var GetBucketInventoryConfigurationRequest;
  (function(GetBucketInventoryConfigurationRequest2) {
    GetBucketInventoryConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketInventoryConfigurationRequest = exports2.GetBucketInventoryConfigurationRequest || (exports2.GetBucketInventoryConfigurationRequest = {}));
  var LifecycleExpiration;
  (function(LifecycleExpiration2) {
    LifecycleExpiration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(LifecycleExpiration = exports2.LifecycleExpiration || (exports2.LifecycleExpiration = {}));
  var LifecycleRuleAndOperator;
  (function(LifecycleRuleAndOperator2) {
    LifecycleRuleAndOperator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(LifecycleRuleAndOperator = exports2.LifecycleRuleAndOperator || (exports2.LifecycleRuleAndOperator = {}));
  var LifecycleRuleFilter;
  (function(LifecycleRuleFilter2) {
    LifecycleRuleFilter2.visit = (value, visitor) => {
      if (value.Prefix !== void 0)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== void 0)
        return visitor.Tag(value.Tag);
      if (value.And !== void 0)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    LifecycleRuleFilter2.filterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return {Prefix: obj.Prefix};
      if (obj.Tag !== void 0)
        return {Tag: Tag.filterSensitiveLog(obj.Tag)};
      if (obj.And !== void 0)
        return {And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And)};
      if (obj.$unknown !== void 0)
        return {[obj.$unknown[0]]: "UNKNOWN"};
    };
  })(LifecycleRuleFilter = exports2.LifecycleRuleFilter || (exports2.LifecycleRuleFilter = {}));
  var NoncurrentVersionExpiration;
  (function(NoncurrentVersionExpiration2) {
    NoncurrentVersionExpiration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NoncurrentVersionExpiration = exports2.NoncurrentVersionExpiration || (exports2.NoncurrentVersionExpiration = {}));
  var NoncurrentVersionTransition;
  (function(NoncurrentVersionTransition2) {
    NoncurrentVersionTransition2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NoncurrentVersionTransition = exports2.NoncurrentVersionTransition || (exports2.NoncurrentVersionTransition = {}));
  var Transition;
  (function(Transition2) {
    Transition2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Transition = exports2.Transition || (exports2.Transition = {}));
  var LifecycleRule;
  (function(LifecycleRule2) {
    LifecycleRule2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && {Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter)}
    });
  })(LifecycleRule = exports2.LifecycleRule || (exports2.LifecycleRule = {}));
  var GetBucketLifecycleConfigurationOutput;
  (function(GetBucketLifecycleConfigurationOutput2) {
    GetBucketLifecycleConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && {Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item))}
    });
  })(GetBucketLifecycleConfigurationOutput = exports2.GetBucketLifecycleConfigurationOutput || (exports2.GetBucketLifecycleConfigurationOutput = {}));
  var GetBucketLifecycleConfigurationRequest;
  (function(GetBucketLifecycleConfigurationRequest2) {
    GetBucketLifecycleConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketLifecycleConfigurationRequest = exports2.GetBucketLifecycleConfigurationRequest || (exports2.GetBucketLifecycleConfigurationRequest = {}));
  var GetBucketLocationOutput;
  (function(GetBucketLocationOutput2) {
    GetBucketLocationOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketLocationOutput = exports2.GetBucketLocationOutput || (exports2.GetBucketLocationOutput = {}));
  var GetBucketLocationRequest;
  (function(GetBucketLocationRequest2) {
    GetBucketLocationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketLocationRequest = exports2.GetBucketLocationRequest || (exports2.GetBucketLocationRequest = {}));
  var TargetGrant;
  (function(TargetGrant2) {
    TargetGrant2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(TargetGrant = exports2.TargetGrant || (exports2.TargetGrant = {}));
  var LoggingEnabled;
  (function(LoggingEnabled2) {
    LoggingEnabled2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(LoggingEnabled = exports2.LoggingEnabled || (exports2.LoggingEnabled = {}));
  var GetBucketLoggingOutput;
  (function(GetBucketLoggingOutput2) {
    GetBucketLoggingOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketLoggingOutput = exports2.GetBucketLoggingOutput || (exports2.GetBucketLoggingOutput = {}));
  var GetBucketLoggingRequest;
  (function(GetBucketLoggingRequest2) {
    GetBucketLoggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketLoggingRequest = exports2.GetBucketLoggingRequest || (exports2.GetBucketLoggingRequest = {}));
  var MetricsAndOperator;
  (function(MetricsAndOperator2) {
    MetricsAndOperator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(MetricsAndOperator = exports2.MetricsAndOperator || (exports2.MetricsAndOperator = {}));
  var MetricsFilter;
  (function(MetricsFilter2) {
    MetricsFilter2.visit = (value, visitor) => {
      if (value.Prefix !== void 0)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== void 0)
        return visitor.Tag(value.Tag);
      if (value.And !== void 0)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    MetricsFilter2.filterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return {Prefix: obj.Prefix};
      if (obj.Tag !== void 0)
        return {Tag: Tag.filterSensitiveLog(obj.Tag)};
      if (obj.And !== void 0)
        return {And: MetricsAndOperator.filterSensitiveLog(obj.And)};
      if (obj.$unknown !== void 0)
        return {[obj.$unknown[0]]: "UNKNOWN"};
    };
  })(MetricsFilter = exports2.MetricsFilter || (exports2.MetricsFilter = {}));
  var MetricsConfiguration;
  (function(MetricsConfiguration2) {
    MetricsConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && {Filter: MetricsFilter.filterSensitiveLog(obj.Filter)}
    });
  })(MetricsConfiguration = exports2.MetricsConfiguration || (exports2.MetricsConfiguration = {}));
  var GetBucketMetricsConfigurationOutput;
  (function(GetBucketMetricsConfigurationOutput2) {
    GetBucketMetricsConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfiguration && {
        MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
      }
    });
  })(GetBucketMetricsConfigurationOutput = exports2.GetBucketMetricsConfigurationOutput || (exports2.GetBucketMetricsConfigurationOutput = {}));
  var GetBucketMetricsConfigurationRequest;
  (function(GetBucketMetricsConfigurationRequest2) {
    GetBucketMetricsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketMetricsConfigurationRequest = exports2.GetBucketMetricsConfigurationRequest || (exports2.GetBucketMetricsConfigurationRequest = {}));
  var GetBucketNotificationConfigurationRequest;
  (function(GetBucketNotificationConfigurationRequest2) {
    GetBucketNotificationConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketNotificationConfigurationRequest = exports2.GetBucketNotificationConfigurationRequest || (exports2.GetBucketNotificationConfigurationRequest = {}));
  var FilterRule;
  (function(FilterRule2) {
    FilterRule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(FilterRule = exports2.FilterRule || (exports2.FilterRule = {}));
  var S3KeyFilter;
  (function(S3KeyFilter2) {
    S3KeyFilter2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(S3KeyFilter = exports2.S3KeyFilter || (exports2.S3KeyFilter = {}));
  var NotificationConfigurationFilter;
  (function(NotificationConfigurationFilter2) {
    NotificationConfigurationFilter2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NotificationConfigurationFilter = exports2.NotificationConfigurationFilter || (exports2.NotificationConfigurationFilter = {}));
  var LambdaFunctionConfiguration;
  (function(LambdaFunctionConfiguration2) {
    LambdaFunctionConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(LambdaFunctionConfiguration = exports2.LambdaFunctionConfiguration || (exports2.LambdaFunctionConfiguration = {}));
  var QueueConfiguration;
  (function(QueueConfiguration2) {
    QueueConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(QueueConfiguration = exports2.QueueConfiguration || (exports2.QueueConfiguration = {}));
  var TopicConfiguration;
  (function(TopicConfiguration2) {
    TopicConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(TopicConfiguration = exports2.TopicConfiguration || (exports2.TopicConfiguration = {}));
  var NotificationConfiguration;
  (function(NotificationConfiguration2) {
    NotificationConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NotificationConfiguration = exports2.NotificationConfiguration || (exports2.NotificationConfiguration = {}));
  var OwnershipControlsRule;
  (function(OwnershipControlsRule2) {
    OwnershipControlsRule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(OwnershipControlsRule = exports2.OwnershipControlsRule || (exports2.OwnershipControlsRule = {}));
  var OwnershipControls;
  (function(OwnershipControls2) {
    OwnershipControls2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(OwnershipControls = exports2.OwnershipControls || (exports2.OwnershipControls = {}));
  var GetBucketOwnershipControlsOutput;
  (function(GetBucketOwnershipControlsOutput2) {
    GetBucketOwnershipControlsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketOwnershipControlsOutput = exports2.GetBucketOwnershipControlsOutput || (exports2.GetBucketOwnershipControlsOutput = {}));
  var GetBucketOwnershipControlsRequest;
  (function(GetBucketOwnershipControlsRequest2) {
    GetBucketOwnershipControlsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketOwnershipControlsRequest = exports2.GetBucketOwnershipControlsRequest || (exports2.GetBucketOwnershipControlsRequest = {}));
  var GetBucketPolicyOutput;
  (function(GetBucketPolicyOutput2) {
    GetBucketPolicyOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketPolicyOutput = exports2.GetBucketPolicyOutput || (exports2.GetBucketPolicyOutput = {}));
  var GetBucketPolicyRequest;
  (function(GetBucketPolicyRequest2) {
    GetBucketPolicyRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketPolicyRequest = exports2.GetBucketPolicyRequest || (exports2.GetBucketPolicyRequest = {}));
  var PolicyStatus;
  (function(PolicyStatus2) {
    PolicyStatus2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PolicyStatus = exports2.PolicyStatus || (exports2.PolicyStatus = {}));
  var GetBucketPolicyStatusOutput;
  (function(GetBucketPolicyStatusOutput2) {
    GetBucketPolicyStatusOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketPolicyStatusOutput = exports2.GetBucketPolicyStatusOutput || (exports2.GetBucketPolicyStatusOutput = {}));
  var GetBucketPolicyStatusRequest;
  (function(GetBucketPolicyStatusRequest2) {
    GetBucketPolicyStatusRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketPolicyStatusRequest = exports2.GetBucketPolicyStatusRequest || (exports2.GetBucketPolicyStatusRequest = {}));
  var DeleteMarkerReplication;
  (function(DeleteMarkerReplication2) {
    DeleteMarkerReplication2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteMarkerReplication = exports2.DeleteMarkerReplication || (exports2.DeleteMarkerReplication = {}));
  var EncryptionConfiguration;
  (function(EncryptionConfiguration2) {
    EncryptionConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(EncryptionConfiguration = exports2.EncryptionConfiguration || (exports2.EncryptionConfiguration = {}));
  var ReplicationTimeValue;
  (function(ReplicationTimeValue2) {
    ReplicationTimeValue2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ReplicationTimeValue = exports2.ReplicationTimeValue || (exports2.ReplicationTimeValue = {}));
  var Metrics;
  (function(Metrics2) {
    Metrics2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Metrics = exports2.Metrics || (exports2.Metrics = {}));
  var ReplicationTime;
  (function(ReplicationTime2) {
    ReplicationTime2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ReplicationTime = exports2.ReplicationTime || (exports2.ReplicationTime = {}));
  var Destination;
  (function(Destination2) {
    Destination2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Destination = exports2.Destination || (exports2.Destination = {}));
  var ExistingObjectReplication;
  (function(ExistingObjectReplication2) {
    ExistingObjectReplication2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ExistingObjectReplication = exports2.ExistingObjectReplication || (exports2.ExistingObjectReplication = {}));
  var ReplicationRuleAndOperator;
  (function(ReplicationRuleAndOperator2) {
    ReplicationRuleAndOperator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ReplicationRuleAndOperator = exports2.ReplicationRuleAndOperator || (exports2.ReplicationRuleAndOperator = {}));
  var ReplicationRuleFilter;
  (function(ReplicationRuleFilter2) {
    ReplicationRuleFilter2.visit = (value, visitor) => {
      if (value.Prefix !== void 0)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== void 0)
        return visitor.Tag(value.Tag);
      if (value.And !== void 0)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    ReplicationRuleFilter2.filterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return {Prefix: obj.Prefix};
      if (obj.Tag !== void 0)
        return {Tag: Tag.filterSensitiveLog(obj.Tag)};
      if (obj.And !== void 0)
        return {And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And)};
      if (obj.$unknown !== void 0)
        return {[obj.$unknown[0]]: "UNKNOWN"};
    };
  })(ReplicationRuleFilter = exports2.ReplicationRuleFilter || (exports2.ReplicationRuleFilter = {}));
  var ReplicaModifications;
  (function(ReplicaModifications2) {
    ReplicaModifications2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ReplicaModifications = exports2.ReplicaModifications || (exports2.ReplicaModifications = {}));
  var SseKmsEncryptedObjects;
  (function(SseKmsEncryptedObjects2) {
    SseKmsEncryptedObjects2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(SseKmsEncryptedObjects = exports2.SseKmsEncryptedObjects || (exports2.SseKmsEncryptedObjects = {}));
  var SourceSelectionCriteria;
  (function(SourceSelectionCriteria2) {
    SourceSelectionCriteria2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(SourceSelectionCriteria = exports2.SourceSelectionCriteria || (exports2.SourceSelectionCriteria = {}));
  var ReplicationRule;
  (function(ReplicationRule2) {
    ReplicationRule2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && {Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter)}
    });
  })(ReplicationRule = exports2.ReplicationRule || (exports2.ReplicationRule = {}));
  var ReplicationConfiguration;
  (function(ReplicationConfiguration2) {
    ReplicationConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && {Rules: obj.Rules.map((item) => ReplicationRule.filterSensitiveLog(item))}
    });
  })(ReplicationConfiguration = exports2.ReplicationConfiguration || (exports2.ReplicationConfiguration = {}));
  var GetBucketReplicationOutput;
  (function(GetBucketReplicationOutput2) {
    GetBucketReplicationOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ReplicationConfiguration && {
        ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
      }
    });
  })(GetBucketReplicationOutput = exports2.GetBucketReplicationOutput || (exports2.GetBucketReplicationOutput = {}));
  var GetBucketReplicationRequest;
  (function(GetBucketReplicationRequest2) {
    GetBucketReplicationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketReplicationRequest = exports2.GetBucketReplicationRequest || (exports2.GetBucketReplicationRequest = {}));
  var GetBucketRequestPaymentOutput;
  (function(GetBucketRequestPaymentOutput2) {
    GetBucketRequestPaymentOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketRequestPaymentOutput = exports2.GetBucketRequestPaymentOutput || (exports2.GetBucketRequestPaymentOutput = {}));
  var GetBucketRequestPaymentRequest;
  (function(GetBucketRequestPaymentRequest2) {
    GetBucketRequestPaymentRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketRequestPaymentRequest = exports2.GetBucketRequestPaymentRequest || (exports2.GetBucketRequestPaymentRequest = {}));
  var GetBucketTaggingOutput;
  (function(GetBucketTaggingOutput2) {
    GetBucketTaggingOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketTaggingOutput = exports2.GetBucketTaggingOutput || (exports2.GetBucketTaggingOutput = {}));
  var GetBucketTaggingRequest;
  (function(GetBucketTaggingRequest2) {
    GetBucketTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketTaggingRequest = exports2.GetBucketTaggingRequest || (exports2.GetBucketTaggingRequest = {}));
  var GetBucketVersioningOutput;
  (function(GetBucketVersioningOutput2) {
    GetBucketVersioningOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketVersioningOutput = exports2.GetBucketVersioningOutput || (exports2.GetBucketVersioningOutput = {}));
  var GetBucketVersioningRequest;
  (function(GetBucketVersioningRequest2) {
    GetBucketVersioningRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketVersioningRequest = exports2.GetBucketVersioningRequest || (exports2.GetBucketVersioningRequest = {}));
  var ErrorDocument;
  (function(ErrorDocument2) {
    ErrorDocument2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ErrorDocument = exports2.ErrorDocument || (exports2.ErrorDocument = {}));
  var IndexDocument;
  (function(IndexDocument2) {
    IndexDocument2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(IndexDocument = exports2.IndexDocument || (exports2.IndexDocument = {}));
  var RedirectAllRequestsTo;
  (function(RedirectAllRequestsTo2) {
    RedirectAllRequestsTo2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RedirectAllRequestsTo = exports2.RedirectAllRequestsTo || (exports2.RedirectAllRequestsTo = {}));
  var Condition;
  (function(Condition2) {
    Condition2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Condition = exports2.Condition || (exports2.Condition = {}));
  var Redirect;
  (function(Redirect2) {
    Redirect2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Redirect = exports2.Redirect || (exports2.Redirect = {}));
  var RoutingRule;
  (function(RoutingRule2) {
    RoutingRule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RoutingRule = exports2.RoutingRule || (exports2.RoutingRule = {}));
  var GetBucketWebsiteOutput;
  (function(GetBucketWebsiteOutput2) {
    GetBucketWebsiteOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketWebsiteOutput = exports2.GetBucketWebsiteOutput || (exports2.GetBucketWebsiteOutput = {}));
  var GetBucketWebsiteRequest;
  (function(GetBucketWebsiteRequest2) {
    GetBucketWebsiteRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetBucketWebsiteRequest = exports2.GetBucketWebsiteRequest || (exports2.GetBucketWebsiteRequest = {}));
  var GetObjectOutput;
  (function(GetObjectOutput2) {
    GetObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(GetObjectOutput = exports2.GetObjectOutput || (exports2.GetObjectOutput = {}));
  var GetObjectRequest;
  (function(GetObjectRequest2) {
    GetObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(GetObjectRequest = exports2.GetObjectRequest || (exports2.GetObjectRequest = {}));
  var InvalidObjectState;
  (function(InvalidObjectState2) {
    InvalidObjectState2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(InvalidObjectState = exports2.InvalidObjectState || (exports2.InvalidObjectState = {}));
  var NoSuchKey;
  (function(NoSuchKey2) {
    NoSuchKey2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NoSuchKey = exports2.NoSuchKey || (exports2.NoSuchKey = {}));
  var GetObjectAclOutput;
  (function(GetObjectAclOutput2) {
    GetObjectAclOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectAclOutput = exports2.GetObjectAclOutput || (exports2.GetObjectAclOutput = {}));
  var GetObjectAclRequest;
  (function(GetObjectAclRequest2) {
    GetObjectAclRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectAclRequest = exports2.GetObjectAclRequest || (exports2.GetObjectAclRequest = {}));
  var ObjectLockLegalHold;
  (function(ObjectLockLegalHold2) {
    ObjectLockLegalHold2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectLockLegalHold = exports2.ObjectLockLegalHold || (exports2.ObjectLockLegalHold = {}));
  var GetObjectLegalHoldOutput;
  (function(GetObjectLegalHoldOutput2) {
    GetObjectLegalHoldOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectLegalHoldOutput = exports2.GetObjectLegalHoldOutput || (exports2.GetObjectLegalHoldOutput = {}));
  var GetObjectLegalHoldRequest;
  (function(GetObjectLegalHoldRequest2) {
    GetObjectLegalHoldRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectLegalHoldRequest = exports2.GetObjectLegalHoldRequest || (exports2.GetObjectLegalHoldRequest = {}));
  var DefaultRetention;
  (function(DefaultRetention2) {
    DefaultRetention2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DefaultRetention = exports2.DefaultRetention || (exports2.DefaultRetention = {}));
  var ObjectLockRule;
  (function(ObjectLockRule2) {
    ObjectLockRule2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectLockRule = exports2.ObjectLockRule || (exports2.ObjectLockRule = {}));
  var ObjectLockConfiguration;
  (function(ObjectLockConfiguration2) {
    ObjectLockConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectLockConfiguration = exports2.ObjectLockConfiguration || (exports2.ObjectLockConfiguration = {}));
  var GetObjectLockConfigurationOutput;
  (function(GetObjectLockConfigurationOutput2) {
    GetObjectLockConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectLockConfigurationOutput = exports2.GetObjectLockConfigurationOutput || (exports2.GetObjectLockConfigurationOutput = {}));
  var GetObjectLockConfigurationRequest;
  (function(GetObjectLockConfigurationRequest2) {
    GetObjectLockConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectLockConfigurationRequest = exports2.GetObjectLockConfigurationRequest || (exports2.GetObjectLockConfigurationRequest = {}));
  var ObjectLockRetention;
  (function(ObjectLockRetention2) {
    ObjectLockRetention2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectLockRetention = exports2.ObjectLockRetention || (exports2.ObjectLockRetention = {}));
  var GetObjectRetentionOutput;
  (function(GetObjectRetentionOutput2) {
    GetObjectRetentionOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectRetentionOutput = exports2.GetObjectRetentionOutput || (exports2.GetObjectRetentionOutput = {}));
  var GetObjectRetentionRequest;
  (function(GetObjectRetentionRequest2) {
    GetObjectRetentionRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectRetentionRequest = exports2.GetObjectRetentionRequest || (exports2.GetObjectRetentionRequest = {}));
  var GetObjectTaggingOutput;
  (function(GetObjectTaggingOutput2) {
    GetObjectTaggingOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectTaggingOutput = exports2.GetObjectTaggingOutput || (exports2.GetObjectTaggingOutput = {}));
  var GetObjectTaggingRequest;
  (function(GetObjectTaggingRequest2) {
    GetObjectTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectTaggingRequest = exports2.GetObjectTaggingRequest || (exports2.GetObjectTaggingRequest = {}));
  var GetObjectTorrentOutput;
  (function(GetObjectTorrentOutput2) {
    GetObjectTorrentOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectTorrentOutput = exports2.GetObjectTorrentOutput || (exports2.GetObjectTorrentOutput = {}));
  var GetObjectTorrentRequest;
  (function(GetObjectTorrentRequest2) {
    GetObjectTorrentRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetObjectTorrentRequest = exports2.GetObjectTorrentRequest || (exports2.GetObjectTorrentRequest = {}));
  var PublicAccessBlockConfiguration;
  (function(PublicAccessBlockConfiguration2) {
    PublicAccessBlockConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PublicAccessBlockConfiguration = exports2.PublicAccessBlockConfiguration || (exports2.PublicAccessBlockConfiguration = {}));
  var GetPublicAccessBlockOutput;
  (function(GetPublicAccessBlockOutput2) {
    GetPublicAccessBlockOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetPublicAccessBlockOutput = exports2.GetPublicAccessBlockOutput || (exports2.GetPublicAccessBlockOutput = {}));
  var GetPublicAccessBlockRequest;
  (function(GetPublicAccessBlockRequest2) {
    GetPublicAccessBlockRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GetPublicAccessBlockRequest = exports2.GetPublicAccessBlockRequest || (exports2.GetPublicAccessBlockRequest = {}));
  var HeadBucketRequest;
  (function(HeadBucketRequest2) {
    HeadBucketRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(HeadBucketRequest = exports2.HeadBucketRequest || (exports2.HeadBucketRequest = {}));
  var NoSuchBucket;
  (function(NoSuchBucket2) {
    NoSuchBucket2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(NoSuchBucket = exports2.NoSuchBucket || (exports2.NoSuchBucket = {}));
  var HeadObjectOutput;
  (function(HeadObjectOutput2) {
    HeadObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(HeadObjectOutput = exports2.HeadObjectOutput || (exports2.HeadObjectOutput = {}));
  var HeadObjectRequest;
  (function(HeadObjectRequest2) {
    HeadObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(HeadObjectRequest = exports2.HeadObjectRequest || (exports2.HeadObjectRequest = {}));
  var ListBucketAnalyticsConfigurationsOutput;
  (function(ListBucketAnalyticsConfigurationsOutput2) {
    ListBucketAnalyticsConfigurationsOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfigurationList && {
        AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) => AnalyticsConfiguration.filterSensitiveLog(item))
      }
    });
  })(ListBucketAnalyticsConfigurationsOutput = exports2.ListBucketAnalyticsConfigurationsOutput || (exports2.ListBucketAnalyticsConfigurationsOutput = {}));
  var ListBucketAnalyticsConfigurationsRequest;
  (function(ListBucketAnalyticsConfigurationsRequest2) {
    ListBucketAnalyticsConfigurationsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketAnalyticsConfigurationsRequest = exports2.ListBucketAnalyticsConfigurationsRequest || (exports2.ListBucketAnalyticsConfigurationsRequest = {}));
  var ListBucketIntelligentTieringConfigurationsOutput;
  (function(ListBucketIntelligentTieringConfigurationsOutput2) {
    ListBucketIntelligentTieringConfigurationsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketIntelligentTieringConfigurationsOutput = exports2.ListBucketIntelligentTieringConfigurationsOutput || (exports2.ListBucketIntelligentTieringConfigurationsOutput = {}));
  var ListBucketIntelligentTieringConfigurationsRequest;
  (function(ListBucketIntelligentTieringConfigurationsRequest2) {
    ListBucketIntelligentTieringConfigurationsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketIntelligentTieringConfigurationsRequest = exports2.ListBucketIntelligentTieringConfigurationsRequest || (exports2.ListBucketIntelligentTieringConfigurationsRequest = {}));
  var ListBucketInventoryConfigurationsOutput;
  (function(ListBucketInventoryConfigurationsOutput2) {
    ListBucketInventoryConfigurationsOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfiguration.filterSensitiveLog(item))
      }
    });
  })(ListBucketInventoryConfigurationsOutput = exports2.ListBucketInventoryConfigurationsOutput || (exports2.ListBucketInventoryConfigurationsOutput = {}));
  var ListBucketInventoryConfigurationsRequest;
  (function(ListBucketInventoryConfigurationsRequest2) {
    ListBucketInventoryConfigurationsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketInventoryConfigurationsRequest = exports2.ListBucketInventoryConfigurationsRequest || (exports2.ListBucketInventoryConfigurationsRequest = {}));
  var ListBucketMetricsConfigurationsOutput;
  (function(ListBucketMetricsConfigurationsOutput2) {
    ListBucketMetricsConfigurationsOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfigurationList && {
        MetricsConfigurationList: obj.MetricsConfigurationList.map((item) => MetricsConfiguration.filterSensitiveLog(item))
      }
    });
  })(ListBucketMetricsConfigurationsOutput = exports2.ListBucketMetricsConfigurationsOutput || (exports2.ListBucketMetricsConfigurationsOutput = {}));
  var ListBucketMetricsConfigurationsRequest;
  (function(ListBucketMetricsConfigurationsRequest2) {
    ListBucketMetricsConfigurationsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketMetricsConfigurationsRequest = exports2.ListBucketMetricsConfigurationsRequest || (exports2.ListBucketMetricsConfigurationsRequest = {}));
  var Bucket;
  (function(Bucket2) {
    Bucket2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Bucket = exports2.Bucket || (exports2.Bucket = {}));
  var ListBucketsOutput;
  (function(ListBucketsOutput2) {
    ListBucketsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListBucketsOutput = exports2.ListBucketsOutput || (exports2.ListBucketsOutput = {}));
  var CommonPrefix;
  (function(CommonPrefix2) {
    CommonPrefix2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CommonPrefix = exports2.CommonPrefix || (exports2.CommonPrefix = {}));
  var Initiator;
  (function(Initiator2) {
    Initiator2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Initiator = exports2.Initiator || (exports2.Initiator = {}));
  var MultipartUpload;
  (function(MultipartUpload2) {
    MultipartUpload2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(MultipartUpload = exports2.MultipartUpload || (exports2.MultipartUpload = {}));
  var ListMultipartUploadsOutput;
  (function(ListMultipartUploadsOutput2) {
    ListMultipartUploadsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListMultipartUploadsOutput = exports2.ListMultipartUploadsOutput || (exports2.ListMultipartUploadsOutput = {}));
  var ListMultipartUploadsRequest;
  (function(ListMultipartUploadsRequest2) {
    ListMultipartUploadsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListMultipartUploadsRequest = exports2.ListMultipartUploadsRequest || (exports2.ListMultipartUploadsRequest = {}));
  var _Object;
  (function(_Object2) {
    _Object2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(_Object = exports2._Object || (exports2._Object = {}));
  var ListObjectsOutput;
  (function(ListObjectsOutput2) {
    ListObjectsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectsOutput = exports2.ListObjectsOutput || (exports2.ListObjectsOutput = {}));
  var ListObjectsRequest;
  (function(ListObjectsRequest2) {
    ListObjectsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectsRequest = exports2.ListObjectsRequest || (exports2.ListObjectsRequest = {}));
  var ListObjectsV2Output;
  (function(ListObjectsV2Output2) {
    ListObjectsV2Output2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectsV2Output = exports2.ListObjectsV2Output || (exports2.ListObjectsV2Output = {}));
  var ListObjectsV2Request;
  (function(ListObjectsV2Request2) {
    ListObjectsV2Request2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectsV2Request = exports2.ListObjectsV2Request || (exports2.ListObjectsV2Request = {}));
  var DeleteMarkerEntry;
  (function(DeleteMarkerEntry2) {
    DeleteMarkerEntry2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(DeleteMarkerEntry = exports2.DeleteMarkerEntry || (exports2.DeleteMarkerEntry = {}));
  var ObjectVersion;
  (function(ObjectVersion2) {
    ObjectVersion2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectVersion = exports2.ObjectVersion || (exports2.ObjectVersion = {}));
  var ListObjectVersionsOutput;
  (function(ListObjectVersionsOutput2) {
    ListObjectVersionsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectVersionsOutput = exports2.ListObjectVersionsOutput || (exports2.ListObjectVersionsOutput = {}));
  var ListObjectVersionsRequest;
  (function(ListObjectVersionsRequest2) {
    ListObjectVersionsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListObjectVersionsRequest = exports2.ListObjectVersionsRequest || (exports2.ListObjectVersionsRequest = {}));
  var Part;
  (function(Part2) {
    Part2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Part = exports2.Part || (exports2.Part = {}));
  var ListPartsOutput;
  (function(ListPartsOutput2) {
    ListPartsOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListPartsOutput = exports2.ListPartsOutput || (exports2.ListPartsOutput = {}));
  var ListPartsRequest;
  (function(ListPartsRequest2) {
    ListPartsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ListPartsRequest = exports2.ListPartsRequest || (exports2.ListPartsRequest = {}));
  var PutBucketAccelerateConfigurationRequest;
  (function(PutBucketAccelerateConfigurationRequest2) {
    PutBucketAccelerateConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketAccelerateConfigurationRequest = exports2.PutBucketAccelerateConfigurationRequest || (exports2.PutBucketAccelerateConfigurationRequest = {}));
  var PutBucketAclRequest;
  (function(PutBucketAclRequest2) {
    PutBucketAclRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketAclRequest = exports2.PutBucketAclRequest || (exports2.PutBucketAclRequest = {}));
  var PutBucketAnalyticsConfigurationRequest;
  (function(PutBucketAnalyticsConfigurationRequest2) {
    PutBucketAnalyticsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
      }
    });
  })(PutBucketAnalyticsConfigurationRequest = exports2.PutBucketAnalyticsConfigurationRequest || (exports2.PutBucketAnalyticsConfigurationRequest = {}));
  var CORSConfiguration;
  (function(CORSConfiguration2) {
    CORSConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CORSConfiguration = exports2.CORSConfiguration || (exports2.CORSConfiguration = {}));
  var PutBucketCorsRequest;
  (function(PutBucketCorsRequest2) {
    PutBucketCorsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketCorsRequest = exports2.PutBucketCorsRequest || (exports2.PutBucketCorsRequest = {}));
  var PutBucketEncryptionRequest;
  (function(PutBucketEncryptionRequest2) {
    PutBucketEncryptionRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
      }
    });
  })(PutBucketEncryptionRequest = exports2.PutBucketEncryptionRequest || (exports2.PutBucketEncryptionRequest = {}));
  var PutBucketIntelligentTieringConfigurationRequest;
  (function(PutBucketIntelligentTieringConfigurationRequest2) {
    PutBucketIntelligentTieringConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketIntelligentTieringConfigurationRequest = exports2.PutBucketIntelligentTieringConfigurationRequest || (exports2.PutBucketIntelligentTieringConfigurationRequest = {}));
  var PutBucketInventoryConfigurationRequest;
  (function(PutBucketInventoryConfigurationRequest2) {
    PutBucketInventoryConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
      }
    });
  })(PutBucketInventoryConfigurationRequest = exports2.PutBucketInventoryConfigurationRequest || (exports2.PutBucketInventoryConfigurationRequest = {}));
  var BucketLifecycleConfiguration;
  (function(BucketLifecycleConfiguration2) {
    BucketLifecycleConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && {Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item))}
    });
  })(BucketLifecycleConfiguration = exports2.BucketLifecycleConfiguration || (exports2.BucketLifecycleConfiguration = {}));
  var PutBucketLifecycleConfigurationRequest;
  (function(PutBucketLifecycleConfigurationRequest2) {
    PutBucketLifecycleConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.LifecycleConfiguration && {
        LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration)
      }
    });
  })(PutBucketLifecycleConfigurationRequest = exports2.PutBucketLifecycleConfigurationRequest || (exports2.PutBucketLifecycleConfigurationRequest = {}));
  var BucketLoggingStatus;
  (function(BucketLoggingStatus2) {
    BucketLoggingStatus2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(BucketLoggingStatus = exports2.BucketLoggingStatus || (exports2.BucketLoggingStatus = {}));
  var PutBucketLoggingRequest;
  (function(PutBucketLoggingRequest2) {
    PutBucketLoggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketLoggingRequest = exports2.PutBucketLoggingRequest || (exports2.PutBucketLoggingRequest = {}));
  var PutBucketMetricsConfigurationRequest;
  (function(PutBucketMetricsConfigurationRequest2) {
    PutBucketMetricsConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfiguration && {
        MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
      }
    });
  })(PutBucketMetricsConfigurationRequest = exports2.PutBucketMetricsConfigurationRequest || (exports2.PutBucketMetricsConfigurationRequest = {}));
  var PutBucketNotificationConfigurationRequest;
  (function(PutBucketNotificationConfigurationRequest2) {
    PutBucketNotificationConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketNotificationConfigurationRequest = exports2.PutBucketNotificationConfigurationRequest || (exports2.PutBucketNotificationConfigurationRequest = {}));
  var PutBucketOwnershipControlsRequest;
  (function(PutBucketOwnershipControlsRequest2) {
    PutBucketOwnershipControlsRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketOwnershipControlsRequest = exports2.PutBucketOwnershipControlsRequest || (exports2.PutBucketOwnershipControlsRequest = {}));
  var PutBucketPolicyRequest;
  (function(PutBucketPolicyRequest2) {
    PutBucketPolicyRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketPolicyRequest = exports2.PutBucketPolicyRequest || (exports2.PutBucketPolicyRequest = {}));
  var PutBucketReplicationRequest;
  (function(PutBucketReplicationRequest2) {
    PutBucketReplicationRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ReplicationConfiguration && {
        ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
      }
    });
  })(PutBucketReplicationRequest = exports2.PutBucketReplicationRequest || (exports2.PutBucketReplicationRequest = {}));
  var RequestPaymentConfiguration;
  (function(RequestPaymentConfiguration2) {
    RequestPaymentConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RequestPaymentConfiguration = exports2.RequestPaymentConfiguration || (exports2.RequestPaymentConfiguration = {}));
  var PutBucketRequestPaymentRequest;
  (function(PutBucketRequestPaymentRequest2) {
    PutBucketRequestPaymentRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketRequestPaymentRequest = exports2.PutBucketRequestPaymentRequest || (exports2.PutBucketRequestPaymentRequest = {}));
  var Tagging;
  (function(Tagging2) {
    Tagging2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Tagging = exports2.Tagging || (exports2.Tagging = {}));
  var PutBucketTaggingRequest;
  (function(PutBucketTaggingRequest2) {
    PutBucketTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketTaggingRequest = exports2.PutBucketTaggingRequest || (exports2.PutBucketTaggingRequest = {}));
  var VersioningConfiguration;
  (function(VersioningConfiguration2) {
    VersioningConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(VersioningConfiguration = exports2.VersioningConfiguration || (exports2.VersioningConfiguration = {}));
  var PutBucketVersioningRequest;
  (function(PutBucketVersioningRequest2) {
    PutBucketVersioningRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketVersioningRequest = exports2.PutBucketVersioningRequest || (exports2.PutBucketVersioningRequest = {}));
  var WebsiteConfiguration;
  (function(WebsiteConfiguration2) {
    WebsiteConfiguration2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(WebsiteConfiguration = exports2.WebsiteConfiguration || (exports2.WebsiteConfiguration = {}));
  var PutBucketWebsiteRequest;
  (function(PutBucketWebsiteRequest2) {
    PutBucketWebsiteRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutBucketWebsiteRequest = exports2.PutBucketWebsiteRequest || (exports2.PutBucketWebsiteRequest = {}));
  var PutObjectOutput;
  (function(PutObjectOutput2) {
    PutObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING}
    });
  })(PutObjectOutput = exports2.PutObjectOutput || (exports2.PutObjectOutput = {}));
  var PutObjectRequest;
  (function(PutObjectRequest2) {
    PutObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING},
      ...obj.SSEKMSEncryptionContext && {SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING}
    });
  })(PutObjectRequest = exports2.PutObjectRequest || (exports2.PutObjectRequest = {}));
  var PutObjectAclOutput;
  (function(PutObjectAclOutput2) {
    PutObjectAclOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectAclOutput = exports2.PutObjectAclOutput || (exports2.PutObjectAclOutput = {}));
  var PutObjectAclRequest;
  (function(PutObjectAclRequest2) {
    PutObjectAclRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectAclRequest = exports2.PutObjectAclRequest || (exports2.PutObjectAclRequest = {}));
  var PutObjectLegalHoldOutput;
  (function(PutObjectLegalHoldOutput2) {
    PutObjectLegalHoldOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectLegalHoldOutput = exports2.PutObjectLegalHoldOutput || (exports2.PutObjectLegalHoldOutput = {}));
  var PutObjectLegalHoldRequest;
  (function(PutObjectLegalHoldRequest2) {
    PutObjectLegalHoldRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectLegalHoldRequest = exports2.PutObjectLegalHoldRequest || (exports2.PutObjectLegalHoldRequest = {}));
  var PutObjectLockConfigurationOutput;
  (function(PutObjectLockConfigurationOutput2) {
    PutObjectLockConfigurationOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectLockConfigurationOutput = exports2.PutObjectLockConfigurationOutput || (exports2.PutObjectLockConfigurationOutput = {}));
  var PutObjectLockConfigurationRequest;
  (function(PutObjectLockConfigurationRequest2) {
    PutObjectLockConfigurationRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectLockConfigurationRequest = exports2.PutObjectLockConfigurationRequest || (exports2.PutObjectLockConfigurationRequest = {}));
  var PutObjectRetentionOutput;
  (function(PutObjectRetentionOutput2) {
    PutObjectRetentionOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectRetentionOutput = exports2.PutObjectRetentionOutput || (exports2.PutObjectRetentionOutput = {}));
  var PutObjectRetentionRequest;
  (function(PutObjectRetentionRequest2) {
    PutObjectRetentionRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectRetentionRequest = exports2.PutObjectRetentionRequest || (exports2.PutObjectRetentionRequest = {}));
  var PutObjectTaggingOutput;
  (function(PutObjectTaggingOutput2) {
    PutObjectTaggingOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectTaggingOutput = exports2.PutObjectTaggingOutput || (exports2.PutObjectTaggingOutput = {}));
  var PutObjectTaggingRequest;
  (function(PutObjectTaggingRequest2) {
    PutObjectTaggingRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutObjectTaggingRequest = exports2.PutObjectTaggingRequest || (exports2.PutObjectTaggingRequest = {}));
  var PutPublicAccessBlockRequest;
  (function(PutPublicAccessBlockRequest2) {
    PutPublicAccessBlockRequest2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(PutPublicAccessBlockRequest = exports2.PutPublicAccessBlockRequest || (exports2.PutPublicAccessBlockRequest = {}));
  var ObjectAlreadyInActiveTierError;
  (function(ObjectAlreadyInActiveTierError2) {
    ObjectAlreadyInActiveTierError2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ObjectAlreadyInActiveTierError = exports2.ObjectAlreadyInActiveTierError || (exports2.ObjectAlreadyInActiveTierError = {}));
  var RestoreObjectOutput;
  (function(RestoreObjectOutput2) {
    RestoreObjectOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RestoreObjectOutput = exports2.RestoreObjectOutput || (exports2.RestoreObjectOutput = {}));
  var GlacierJobParameters;
  (function(GlacierJobParameters2) {
    GlacierJobParameters2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(GlacierJobParameters = exports2.GlacierJobParameters || (exports2.GlacierJobParameters = {}));
  var Encryption;
  (function(Encryption2) {
    Encryption2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSKeyId && {KMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(Encryption = exports2.Encryption || (exports2.Encryption = {}));
});

// node_modules/@aws-sdk/xml-builder/node_modules/tslib/tslib.js
var require_tslib24 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/xml-builder/dist/cjs/escape-attribute.js
var require_escape_attribute = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.escapeAttribute = void 0;
  function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  }
  exports2.escapeAttribute = escapeAttribute;
});

// node_modules/@aws-sdk/xml-builder/dist/cjs/XmlNode.js
var require_XmlNode = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.XmlNode = void 0;
  var escape_attribute_1 = require_escape_attribute();
  var XmlNode = class {
    constructor(name, children = []) {
      this.name = name;
      this.children = children;
      this.attributes = {};
    }
    withName(name) {
      this.name = name;
      return this;
    }
    addAttribute(name, value) {
      this.attributes[name] = value;
      return this;
    }
    addChildNode(child) {
      this.children.push(child);
      return this;
    }
    removeAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    toString() {
      const hasChildren = Boolean(this.children.length);
      let xmlText = `<${this.name}`;
      const attributes = this.attributes;
      for (const attributeName of Object.keys(attributes)) {
        const attribute = attributes[attributeName];
        if (typeof attribute !== "undefined" && attribute !== null) {
          xmlText += ` ${attributeName}="${escape_attribute_1.escapeAttribute("" + attribute)}"`;
        }
      }
      return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
    }
  };
  exports2.XmlNode = XmlNode;
});

// node_modules/@aws-sdk/xml-builder/dist/cjs/escape-element.js
var require_escape_element = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.escapeElement = void 0;
  function escapeElement(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  exports2.escapeElement = escapeElement;
});

// node_modules/@aws-sdk/xml-builder/dist/cjs/XmlText.js
var require_XmlText = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.XmlText = void 0;
  var escape_element_1 = require_escape_element();
  var XmlText = class {
    constructor(value) {
      this.value = value;
    }
    toString() {
      return escape_element_1.escapeElement("" + this.value);
    }
  };
  exports2.XmlText = XmlText;
});

// node_modules/@aws-sdk/xml-builder/dist/cjs/index.js
var require_cjs43 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib24();
  tslib_1.__exportStar(require_XmlNode(), exports2);
  tslib_1.__exportStar(require_XmlText(), exports2);
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS((exports2) => {
  "use strict";
  var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
  var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
  var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
  var regexName = new RegExp("^" + nameRegexp + "$");
  var getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while (match) {
      const allmatches = [];
      const len = match.length;
      for (let index = 0; index < len; index++) {
        allmatches.push(match[index]);
      }
      matches.push(allmatches);
      match = regex.exec(string);
    }
    return matches;
  };
  var isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === "undefined");
  };
  exports2.isExist = function(v) {
    return typeof v !== "undefined";
  };
  exports2.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
  };
  exports2.merge = function(target, a, arrayMode) {
    if (a) {
      const keys = Object.keys(a);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        if (arrayMode === "strict") {
          target[keys[i]] = [a[keys[i]]];
        } else {
          target[keys[i]] = a[keys[i]];
        }
      }
    }
  };
  exports2.getValue = function(v) {
    if (exports2.isExist(v)) {
      return v;
    } else {
      return "";
    }
  };
  exports2.buildOptions = function(options, defaultOptions, props) {
    var newOptions = {};
    if (!options) {
      return defaultOptions;
    }
    for (let i = 0; i < props.length; i++) {
      if (options[props[i]] !== void 0) {
        newOptions[props[i]] = options[props[i]];
      } else {
        newOptions[props[i]] = defaultOptions[props[i]];
      }
    }
    return newOptions;
  };
  exports2.isName = isName;
  exports2.getAllMatches = getAllMatches;
  exports2.nameRegexp = nameRegexp;
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS((exports2) => {
  "use strict";
  var util = require_util();
  var convertToJson = function(node, options) {
    const jObj = {};
    if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
      return util.isExist(node.val) ? node.val : "";
    } else {
      if (util.isExist(node.val)) {
        if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
          if (options.arrayMode === "strict") {
            jObj[options.textNodeName] = [node.val];
          } else {
            jObj[options.textNodeName] = node.val;
          }
        }
      }
    }
    util.merge(jObj, node.attrsMap, options.arrayMode);
    const keys = Object.keys(node.child);
    for (let index = 0; index < keys.length; index++) {
      var tagname = keys[index];
      if (node.child[tagname] && node.child[tagname].length > 1) {
        jObj[tagname] = [];
        for (var tag in node.child[tagname]) {
          jObj[tagname].push(convertToJson(node.child[tagname][tag], options));
        }
      } else {
        if (options.arrayMode === true) {
          const result = convertToJson(node.child[tagname][0], options);
          if (typeof result === "object")
            jObj[tagname] = [result];
          else
            jObj[tagname] = result;
        } else if (options.arrayMode === "strict") {
          jObj[tagname] = [convertToJson(node.child[tagname][0], options)];
        } else {
          jObj[tagname] = convertToJson(node.child[tagname][0], options);
        }
      }
    }
    return jObj;
  };
  exports2.convertToJson = convertToJson;
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = function(tagname, parent, val) {
    this.tagname = tagname;
    this.parent = parent;
    this.child = {};
    this.attrsMap = {};
    this.val = val;
    this.addChild = function(child) {
      if (Array.isArray(this.child[child.tagname])) {
        this.child[child.tagname].push(child);
      } else {
        this.child[child.tagname] = [child];
      }
    };
  };
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS((exports2) => {
  "use strict";
  var util = require_util();
  var buildOptions = require_util().buildOptions;
  var xmlNode = require_xmlNode();
  var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
  if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
  }
  if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
  }
  var defaultOptions = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    ignoreNameSpace: false,
    allowBooleanAttributes: false,
    parseNodeValue: true,
    parseAttributeValue: false,
    arrayMode: false,
    trimValues: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    tagValueProcessor: function(a, tagName) {
      return a;
    },
    attrValueProcessor: function(a, attrName) {
      return a;
    },
    stopNodes: []
  };
  exports2.defaultOptions = defaultOptions;
  var props = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "ignoreNameSpace",
    "allowBooleanAttributes",
    "parseNodeValue",
    "parseAttributeValue",
    "arrayMode",
    "trimValues",
    "cdataTagName",
    "cdataPositionChar",
    "tagValueProcessor",
    "attrValueProcessor",
    "parseTrueNumberOnly",
    "stopNodes"
  ];
  exports2.props = props;
  function processTagValue(tagName, val, options) {
    if (val) {
      if (options.trimValues) {
        val = val.trim();
      }
      val = options.tagValueProcessor(val, tagName);
      val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
    }
    return val;
  }
  function resolveNameSpace(tagname, options) {
    if (options.ignoreNameSpace) {
      const tags = tagname.split(":");
      const prefix = tagname.charAt(0) === "/" ? "/" : "";
      if (tags[0] === "xmlns") {
        return "";
      }
      if (tags.length === 2) {
        tagname = prefix + tags[1];
      }
    }
    return tagname;
  }
  function parseValue(val, shouldParse, parseTrueNumberOnly) {
    if (shouldParse && typeof val === "string") {
      let parsed;
      if (val.trim() === "" || isNaN(val)) {
        parsed = val === "true" ? true : val === "false" ? false : val;
      } else {
        if (val.indexOf("0x") !== -1) {
          parsed = Number.parseInt(val, 16);
        } else if (val.indexOf(".") !== -1) {
          parsed = Number.parseFloat(val);
          val = val.replace(/\.?0+$/, "");
        } else {
          parsed = Number.parseInt(val, 10);
        }
        if (parseTrueNumberOnly) {
          parsed = String(parsed) === val ? parsed : val;
        }
      }
      return parsed;
    } else {
      if (util.isExist(val)) {
        return val;
      } else {
        return "";
      }
    }
  }
  var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
  function buildAttributesMap(attrStr, options) {
    if (!options.ignoreAttributes && typeof attrStr === "string") {
      attrStr = attrStr.replace(/\r?\n/g, " ");
      const matches = util.getAllMatches(attrStr, attrsRegx);
      const len = matches.length;
      const attrs = {};
      for (let i = 0; i < len; i++) {
        const attrName = resolveNameSpace(matches[i][1], options);
        if (attrName.length) {
          if (matches[i][4] !== void 0) {
            if (options.trimValues) {
              matches[i][4] = matches[i][4].trim();
            }
            matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
            attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
          } else if (options.allowBooleanAttributes) {
            attrs[options.attributeNamePrefix + attrName] = true;
          }
        }
      }
      if (!Object.keys(attrs).length) {
        return;
      }
      if (options.attrNodeName) {
        const attrCollection = {};
        attrCollection[options.attrNodeName] = attrs;
        return attrCollection;
      }
      return attrs;
    }
  }
  var getTraversalObj = function(xmlData, options) {
    xmlData = xmlData.replace(/\r\n?/g, "\n");
    options = buildOptions(options, defaultOptions, props);
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    for (let i = 0; i < xmlData.length; i++) {
      const ch = xmlData[i];
      if (ch === "<") {
        if (xmlData[i + 1] === "/") {
          const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
          let tagName = xmlData.substring(i + 2, closeIndex).trim();
          if (options.ignoreNameSpace) {
            const colonIndex = tagName.indexOf(":");
            if (colonIndex !== -1) {
              tagName = tagName.substr(colonIndex + 1);
            }
          }
          if (currentNode) {
            if (currentNode.val) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
            } else {
              currentNode.val = processTagValue(tagName, textData, options);
            }
          }
          if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
            currentNode.child = [];
            if (currentNode.attrsMap == void 0) {
              currentNode.attrsMap = {};
            }
            currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
          }
          currentNode = currentNode.parent;
          textData = "";
          i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
          i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
        } else if (xmlData.substr(i + 1, 3) === "!--") {
          i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
        } else if (xmlData.substr(i + 1, 2) === "!D") {
          const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
          const tagExp = xmlData.substring(i, closeIndex);
          if (tagExp.indexOf("[") >= 0) {
            i = xmlData.indexOf("]>", i) + 1;
          } else {
            i = closeIndex;
          }
        } else if (xmlData.substr(i + 1, 2) === "![") {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
          const tagExp = xmlData.substring(i + 9, closeIndex);
          if (textData) {
            currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
            textData = "";
          }
          if (options.cdataTagName) {
            const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
            currentNode.addChild(childNode);
            currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
            if (tagExp) {
              childNode.val = tagExp;
            }
          } else {
            currentNode.val = (currentNode.val || "") + (tagExp || "");
          }
          i = closeIndex + 2;
        } else {
          const result = closingIndexForOpeningTag(xmlData, i + 1);
          let tagExp = result.data;
          const closeIndex = result.index;
          const separatorIndex = tagExp.indexOf(" ");
          let tagName = tagExp;
          if (separatorIndex !== -1) {
            tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
            tagExp = tagExp.substr(separatorIndex + 1);
          }
          if (options.ignoreNameSpace) {
            const colonIndex = tagName.indexOf(":");
            if (colonIndex !== -1) {
              tagName = tagName.substr(colonIndex + 1);
            }
          }
          if (currentNode && textData) {
            if (currentNode.tagname !== "!xml") {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
            }
          }
          if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substr(0, tagName.length - 1);
              tagExp = tagName;
            } else {
              tagExp = tagExp.substr(0, tagExp.length - 1);
            }
            const childNode = new xmlNode(tagName, currentNode, "");
            if (tagName !== tagExp) {
              childNode.attrsMap = buildAttributesMap(tagExp, options);
            }
            currentNode.addChild(childNode);
          } else {
            const childNode = new xmlNode(tagName, currentNode);
            if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
              childNode.startIndex = closeIndex;
            }
            if (tagName !== tagExp) {
              childNode.attrsMap = buildAttributesMap(tagExp, options);
            }
            currentNode.addChild(childNode);
            currentNode = childNode;
          }
          textData = "";
          i = closeIndex;
        }
      } else {
        textData += xmlData[i];
      }
    }
    return xmlObj;
  };
  function closingIndexForOpeningTag(data, i) {
    let attrBoundary;
    let tagExp = "";
    for (let index = i; index < data.length; index++) {
      let ch = data[index];
      if (attrBoundary) {
        if (ch === attrBoundary)
          attrBoundary = "";
      } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
      } else if (ch === ">") {
        return {
          data: tagExp,
          index
        };
      } else if (ch === "	") {
        ch = " ";
      }
      tagExp += ch;
    }
  }
  function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) {
      throw new Error(errMsg);
    } else {
      return closingIndex + str.length - 1;
    }
  }
  exports2.getTraversalObj = getTraversalObj;
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS((exports2) => {
  "use strict";
  var util = require_util();
  var defaultOptions = {
    allowBooleanAttributes: false
  };
  var props = ["allowBooleanAttributes"];
  exports2.validate = function(xmlData, options) {
    options = util.buildOptions(options, defaultOptions, props);
    const tags = [];
    let tagFound = false;
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") {
      xmlData = xmlData.substr(1);
    }
    for (let i = 0; i < xmlData.length; i++) {
      if (xmlData[i] === "<") {
        i++;
        if (xmlData[i] === "?") {
          i = readPI(xmlData, ++i);
          if (i.err) {
            return i;
          }
        } else if (xmlData[i] === "!") {
          i = readCommentAndCDATA(xmlData, i);
          continue;
        } else {
          let closingTag = false;
          if (xmlData[i] === "/") {
            closingTag = true;
            i++;
          }
          let tagName = "";
          for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
            tagName += xmlData[i];
          }
          tagName = tagName.trim();
          if (tagName[tagName.length - 1] === "/") {
            tagName = tagName.substring(0, tagName.length - 1);
            i--;
          }
          if (!validateTagName(tagName)) {
            let msg;
            if (tagName.trim().length === 0) {
              msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
            } else {
              msg = "Tag '" + tagName + "' is an invalid name.";
            }
            return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
          }
          const result = readAttributeStr(xmlData, i);
          if (result === false) {
            return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
          }
          let attrStr = result.value;
          i = result.index;
          if (attrStr[attrStr.length - 1] === "/") {
            attrStr = attrStr.substring(0, attrStr.length - 1);
            const isValid = validateAttributeString(attrStr, options);
            if (isValid === true) {
              tagFound = true;
            } else {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
            }
          } else if (closingTag) {
            if (!result.tagClosed) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
            } else if (attrStr.trim().length > 0) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
            } else {
              const otg = tags.pop();
              if (tagName !== otg) {
                return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
              }
              if (tags.length == 0) {
                reachedRoot = true;
              }
            }
          } else {
            const isValid = validateAttributeString(attrStr, options);
            if (isValid !== true) {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
            }
            if (reachedRoot === true) {
              return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
            } else {
              tags.push(tagName);
            }
            tagFound = true;
          }
          for (i++; i < xmlData.length; i++) {
            if (xmlData[i] === "<") {
              if (xmlData[i + 1] === "!") {
                i++;
                i = readCommentAndCDATA(xmlData, i);
                continue;
              } else {
                break;
              }
            } else if (xmlData[i] === "&") {
              const afterAmp = validateAmpersand(xmlData, i);
              if (afterAmp == -1)
                return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
              i = afterAmp;
            }
          }
          if (xmlData[i] === "<") {
            i--;
          }
        }
      } else {
        if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
          continue;
        }
        return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
      }
    }
    if (!tagFound) {
      return getErrorObject("InvalidXml", "Start tag expected.", 1);
    } else if (tags.length > 0) {
      return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
    }
    return true;
  };
  function readPI(xmlData, i) {
    var start = i;
    for (; i < xmlData.length; i++) {
      if (xmlData[i] == "?" || xmlData[i] == " ") {
        var tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === "xml") {
          return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
        } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
          i++;
          break;
        } else {
          continue;
        }
      }
    }
    return i;
  }
  function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
      for (i += 3; i < xmlData.length; i++) {
        if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
      let angleBracketsCount = 1;
      for (i += 8; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          angleBracketsCount++;
        } else if (xmlData[i] === ">") {
          angleBracketsCount--;
          if (angleBracketsCount === 0) {
            break;
          }
        }
      }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
      for (i += 8; i < xmlData.length; i++) {
        if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    }
    return i;
  }
  var doubleQuote = '"';
  var singleQuote = "'";
  function readAttributeStr(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for (; i < xmlData.length; i++) {
      if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
        if (startChar === "") {
          startChar = xmlData[i];
        } else if (startChar !== xmlData[i]) {
          continue;
        } else {
          startChar = "";
        }
      } else if (xmlData[i] === ">") {
        if (startChar === "") {
          tagClosed = true;
          break;
        }
      }
      attrStr += xmlData[i];
    }
    if (startChar !== "") {
      return false;
    }
    return {
      value: attrStr,
      index: i,
      tagClosed
    };
  }
  var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
  function validateAttributeString(attrStr, options) {
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for (let i = 0; i < matches.length; i++) {
      if (matches[i][1].length === 0) {
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
      } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
        return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
      }
      const attrName = matches[i][2];
      if (!validateAttrName(attrName)) {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
      }
      if (!attrNames.hasOwnProperty(attrName)) {
        attrNames[attrName] = 1;
      } else {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
      }
    }
    return true;
  }
  function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
      i++;
      re = /[\da-fA-F]/;
    }
    for (; i < xmlData.length; i++) {
      if (xmlData[i] === ";")
        return i;
      if (!xmlData[i].match(re))
        break;
    }
    return -1;
  }
  function validateAmpersand(xmlData, i) {
    i++;
    if (xmlData[i] === ";")
      return -1;
    if (xmlData[i] === "#") {
      i++;
      return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for (; i < xmlData.length; i++, count++) {
      if (xmlData[i].match(/\w/) && count < 20)
        continue;
      if (xmlData[i] === ";")
        break;
      return -1;
    }
    return i;
  }
  function getErrorObject(code, message, lineNumber) {
    return {
      err: {
        code,
        msg: message,
        line: lineNumber
      }
    };
  }
  function validateAttrName(attrName) {
    return util.isName(attrName);
  }
  function validateTagName(tagname) {
    return util.isName(tagname);
  }
  function getLineNumberForPosition(xmlData, index) {
    var lines = xmlData.substring(0, index).split(/\r?\n/);
    return lines.length;
  }
  function getPositionFromMatch(attrStr, match) {
    return attrStr.indexOf(match) + match.length;
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS((exports2) => {
  "use strict";
  var char = function(a) {
    return String.fromCharCode(a);
  };
  var chars = {
    nilChar: char(176),
    missingChar: char(201),
    nilPremitive: char(175),
    missingPremitive: char(200),
    emptyChar: char(178),
    emptyValue: char(177),
    boundryChar: char(179),
    objStart: char(198),
    arrStart: char(204),
    arrayEnd: char(185)
  };
  var charsArr = [
    chars.nilChar,
    chars.nilPremitive,
    chars.missingChar,
    chars.missingPremitive,
    chars.boundryChar,
    chars.emptyChar,
    chars.emptyValue,
    chars.arrayEnd,
    chars.objStart,
    chars.arrStart
  ];
  var _e = function(node, e_schema, options) {
    if (typeof e_schema === "string") {
      if (node && node[0] && node[0].val !== void 0) {
        return getValue(node[0].val, e_schema);
      } else {
        return getValue(node, e_schema);
      }
    } else {
      const hasValidData = hasData(node);
      if (hasValidData === true) {
        let str = "";
        if (Array.isArray(e_schema)) {
          str += chars.arrStart;
          const itemSchema = e_schema[0];
          const arr_len = node.length;
          if (typeof itemSchema === "string") {
            for (let arr_i = 0; arr_i < arr_len; arr_i++) {
              const r = getValue(node[arr_i].val, itemSchema);
              str = processValue(str, r);
            }
          } else {
            for (let arr_i = 0; arr_i < arr_len; arr_i++) {
              const r = _e(node[arr_i], itemSchema, options);
              str = processValue(str, r);
            }
          }
          str += chars.arrayEnd;
        } else {
          str += chars.objStart;
          const keys = Object.keys(e_schema);
          if (Array.isArray(node)) {
            node = node[0];
          }
          for (let i in keys) {
            const key = keys[i];
            let r;
            if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
              r = _e(node.attrsMap[key], e_schema[key], options);
            } else if (key === options.textNodeName) {
              r = _e(node.val, e_schema[key], options);
            } else {
              r = _e(node.child[key], e_schema[key], options);
            }
            str = processValue(str, r);
          }
        }
        return str;
      } else {
        return hasValidData;
      }
    }
  };
  var getValue = function(a) {
    switch (a) {
      case void 0:
        return chars.missingPremitive;
      case null:
        return chars.nilPremitive;
      case "":
        return chars.emptyValue;
      default:
        return a;
    }
  };
  var processValue = function(str, r) {
    if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
      str += chars.boundryChar;
    }
    return str + r;
  };
  var isAppChar = function(ch) {
    return charsArr.indexOf(ch) !== -1;
  };
  function hasData(jObj) {
    if (jObj === void 0) {
      return chars.missingChar;
    } else if (jObj === null) {
      return chars.nilChar;
    } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
      return chars.emptyChar;
    } else {
      return true;
    }
  }
  var x2j = require_xmlstr2xmlnode();
  var buildOptions = require_util().buildOptions;
  var convert2nimn = function(node, e_schema, options) {
    options = buildOptions(options, x2j.defaultOptions, x2j.props);
    return _e(node, e_schema, options);
  };
  exports2.convert2nimn = convert2nimn;
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS((exports2) => {
  "use strict";
  var util = require_util();
  var buildOptions = require_util().buildOptions;
  var x2j = require_xmlstr2xmlnode();
  var convertToJsonString = function(node, options) {
    options = buildOptions(options, x2j.defaultOptions, x2j.props);
    options.indentBy = options.indentBy || "";
    return _cToJsonStr(node, options, 0);
  };
  var _cToJsonStr = function(node, options, level) {
    let jObj = "{";
    const keys = Object.keys(node.child);
    for (let index = 0; index < keys.length; index++) {
      var tagname = keys[index];
      if (node.child[tagname] && node.child[tagname].length > 1) {
        jObj += '"' + tagname + '" : [ ';
        for (var tag in node.child[tagname]) {
          jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
        }
        jObj = jObj.substr(0, jObj.length - 1) + " ] ";
      } else {
        jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
      }
    }
    util.merge(jObj, node.attrsMap);
    if (util.isEmptyObject(jObj)) {
      return util.isExist(node.val) ? node.val : "";
    } else {
      if (util.isExist(node.val)) {
        if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
          jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
        }
      }
    }
    if (jObj[jObj.length - 1] === ",") {
      jObj = jObj.substr(0, jObj.length - 2);
    }
    return jObj + "}";
  };
  function stringval(v) {
    if (v === true || v === false || !isNaN(v)) {
      return v;
    } else {
      return '"' + v + '"';
    }
  }
  exports2.convertToJsonString = convertToJsonString;
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS((exports2, module2) => {
  "use strict";
  var buildOptions = require_util().buildOptions;
  var defaultOptions = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    format: false,
    indentBy: "  ",
    supressEmptyNode: false,
    tagValueProcessor: function(a) {
      return a;
    },
    attrValueProcessor: function(a) {
      return a;
    }
  };
  var props = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "cdataTagName",
    "cdataPositionChar",
    "format",
    "indentBy",
    "supressEmptyNode",
    "tagValueProcessor",
    "attrValueProcessor"
  ];
  function Parser(options) {
    this.options = buildOptions(options, defaultOptions, props);
    if (this.options.ignoreAttributes || this.options.attrNodeName) {
      this.isAttribute = function() {
        return false;
      };
    } else {
      this.attrPrefixLen = this.options.attributeNamePrefix.length;
      this.isAttribute = isAttribute;
    }
    if (this.options.cdataTagName) {
      this.isCDATA = isCDATA;
    } else {
      this.isCDATA = function() {
        return false;
      };
    }
    this.replaceCDATAstr = replaceCDATAstr;
    this.replaceCDATAarr = replaceCDATAarr;
    if (this.options.format) {
      this.indentate = indentate;
      this.tagEndChar = ">\n";
      this.newLine = "\n";
    } else {
      this.indentate = function() {
        return "";
      };
      this.tagEndChar = ">";
      this.newLine = "";
    }
    if (this.options.supressEmptyNode) {
      this.buildTextNode = buildEmptyTextNode;
      this.buildObjNode = buildEmptyObjNode;
    } else {
      this.buildTextNode = buildTextValNode;
      this.buildObjNode = buildObjectNode;
    }
    this.buildTextValNode = buildTextValNode;
    this.buildObjectNode = buildObjectNode;
  }
  Parser.prototype.parse = function(jObj) {
    return this.j2x(jObj, 0).val;
  };
  Parser.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val = "";
    const keys = Object.keys(jObj);
    const len = keys.length;
    for (let i = 0; i < len; i++) {
      const key = keys[i];
      if (typeof jObj[key] === "undefined") {
      } else if (jObj[key] === null) {
        val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
      } else if (jObj[key] instanceof Date) {
        val += this.buildTextNode(jObj[key], key, "", level);
      } else if (typeof jObj[key] !== "object") {
        const attr = this.isAttribute(key);
        if (attr) {
          attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
        } else if (this.isCDATA(key)) {
          if (jObj[this.options.textNodeName]) {
            val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
          } else {
            val += this.replaceCDATAstr("", jObj[key]);
          }
        } else {
          if (key === this.options.textNodeName) {
            if (jObj[this.options.cdataTagName]) {
            } else {
              val += this.options.tagValueProcessor("" + jObj[key]);
            }
          } else {
            val += this.buildTextNode(jObj[key], key, "", level);
          }
        }
      } else if (Array.isArray(jObj[key])) {
        if (this.isCDATA(key)) {
          val += this.indentate(level);
          if (jObj[this.options.textNodeName]) {
            val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
          } else {
            val += this.replaceCDATAarr("", jObj[key]);
          }
        } else {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              const result = this.j2x(item, level + 1);
              val += this.buildObjNode(result.val, key, result.attrStr, level);
            } else {
              val += this.buildTextNode(item, key, "", level);
            }
          }
        }
      } else {
        if (this.options.attrNodeName && key === this.options.attrNodeName) {
          const Ks = Object.keys(jObj[key]);
          const L = Ks.length;
          for (let j = 0; j < L; j++) {
            attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
          }
        } else {
          const result = this.j2x(jObj[key], level + 1);
          val += this.buildObjNode(result.val, key, result.attrStr, level);
        }
      }
    }
    return {attrStr, val};
  };
  function replaceCDATAstr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") {
      return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
    } else {
      return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
    }
  }
  function replaceCDATAarr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") {
      return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
    } else {
      for (let v in cdata) {
        str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
      }
      return str + this.newLine;
    }
  }
  function buildObjectNode(val, key, attrStr, level) {
    if (attrStr && !val.includes("<")) {
      return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
    } else {
      return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
    }
  }
  function buildEmptyObjNode(val, key, attrStr, level) {
    if (val !== "") {
      return this.buildObjectNode(val, key, attrStr, level);
    } else {
      return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
    }
  }
  function buildTextValNode(val, key, attrStr, level) {
    return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
  }
  function buildEmptyTextNode(val, key, attrStr, level) {
    if (val !== "") {
      return this.buildTextValNode(val, key, attrStr, level);
    } else {
      return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
    }
  }
  function indentate(level) {
    return this.options.indentBy.repeat(level);
  }
  function isAttribute(name) {
    if (name.startsWith(this.options.attributeNamePrefix)) {
      return name.substr(this.attrPrefixLen);
    } else {
      return false;
    }
  }
  function isCDATA(name) {
    return name === this.options.cdataTagName;
  }
  module2.exports = Parser;
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS((exports2) => {
  "use strict";
  var nodeToJson = require_node2json();
  var xmlToNodeobj = require_xmlstr2xmlnode();
  var x2xmlnode = require_xmlstr2xmlnode();
  var buildOptions = require_util().buildOptions;
  var validator = require_validator();
  exports2.parse = function(xmlData, options, validationOption) {
    if (validationOption) {
      if (validationOption === true)
        validationOption = {};
      const result = validator.validate(xmlData, validationOption);
      if (result !== true) {
        throw Error(result.err.msg);
      }
    }
    options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
    const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
    return nodeToJson.convertToJson(traversableObj, options);
  };
  exports2.convertTonimn = require_nimndata().convert2nimn;
  exports2.getTraversalObj = xmlToNodeobj.getTraversalObj;
  exports2.convertToJson = nodeToJson.convertToJson;
  exports2.convertToJsonString = require_node2json_str().convertToJsonString;
  exports2.validate = validator.validate;
  exports2.j2xParser = require_json2xml();
  exports2.parseToNimn = function(xmlData, schema, options) {
    return exports2.convertTonimn(exports2.getTraversalObj(xmlData, options), schema, options);
  };
});

// node_modules/@aws-sdk/client-s3/dist/cjs/protocols/Aws_restXml.js
var require_Aws_restXml = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.serializeAws_restXmlGetPublicAccessBlockCommand = exports2.serializeAws_restXmlGetObjectTorrentCommand = exports2.serializeAws_restXmlGetObjectTaggingCommand = exports2.serializeAws_restXmlGetObjectRetentionCommand = exports2.serializeAws_restXmlGetObjectLockConfigurationCommand = exports2.serializeAws_restXmlGetObjectLegalHoldCommand = exports2.serializeAws_restXmlGetObjectAclCommand = exports2.serializeAws_restXmlGetObjectCommand = exports2.serializeAws_restXmlGetBucketWebsiteCommand = exports2.serializeAws_restXmlGetBucketVersioningCommand = exports2.serializeAws_restXmlGetBucketTaggingCommand = exports2.serializeAws_restXmlGetBucketRequestPaymentCommand = exports2.serializeAws_restXmlGetBucketReplicationCommand = exports2.serializeAws_restXmlGetBucketPolicyStatusCommand = exports2.serializeAws_restXmlGetBucketPolicyCommand = exports2.serializeAws_restXmlGetBucketOwnershipControlsCommand = exports2.serializeAws_restXmlGetBucketNotificationConfigurationCommand = exports2.serializeAws_restXmlGetBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlGetBucketLoggingCommand = exports2.serializeAws_restXmlGetBucketLocationCommand = exports2.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports2.serializeAws_restXmlGetBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlGetBucketEncryptionCommand = exports2.serializeAws_restXmlGetBucketCorsCommand = exports2.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlGetBucketAclCommand = exports2.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports2.serializeAws_restXmlDeletePublicAccessBlockCommand = exports2.serializeAws_restXmlDeleteObjectTaggingCommand = exports2.serializeAws_restXmlDeleteObjectsCommand = exports2.serializeAws_restXmlDeleteObjectCommand = exports2.serializeAws_restXmlDeleteBucketWebsiteCommand = exports2.serializeAws_restXmlDeleteBucketTaggingCommand = exports2.serializeAws_restXmlDeleteBucketReplicationCommand = exports2.serializeAws_restXmlDeleteBucketPolicyCommand = exports2.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports2.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketLifecycleCommand = exports2.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketEncryptionCommand = exports2.serializeAws_restXmlDeleteBucketCorsCommand = exports2.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketCommand = exports2.serializeAws_restXmlCreateMultipartUploadCommand = exports2.serializeAws_restXmlCreateBucketCommand = exports2.serializeAws_restXmlCopyObjectCommand = exports2.serializeAws_restXmlCompleteMultipartUploadCommand = exports2.serializeAws_restXmlAbortMultipartUploadCommand = void 0;
  exports2.deserializeAws_restXmlDeleteBucketEncryptionCommand = exports2.deserializeAws_restXmlDeleteBucketCorsCommand = exports2.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketCommand = exports2.deserializeAws_restXmlCreateMultipartUploadCommand = exports2.deserializeAws_restXmlCreateBucketCommand = exports2.deserializeAws_restXmlCopyObjectCommand = exports2.deserializeAws_restXmlCompleteMultipartUploadCommand = exports2.deserializeAws_restXmlAbortMultipartUploadCommand = exports2.serializeAws_restXmlUploadPartCopyCommand = exports2.serializeAws_restXmlUploadPartCommand = exports2.serializeAws_restXmlSelectObjectContentCommand = exports2.serializeAws_restXmlRestoreObjectCommand = exports2.serializeAws_restXmlPutPublicAccessBlockCommand = exports2.serializeAws_restXmlPutObjectTaggingCommand = exports2.serializeAws_restXmlPutObjectRetentionCommand = exports2.serializeAws_restXmlPutObjectLockConfigurationCommand = exports2.serializeAws_restXmlPutObjectLegalHoldCommand = exports2.serializeAws_restXmlPutObjectAclCommand = exports2.serializeAws_restXmlPutObjectCommand = exports2.serializeAws_restXmlPutBucketWebsiteCommand = exports2.serializeAws_restXmlPutBucketVersioningCommand = exports2.serializeAws_restXmlPutBucketTaggingCommand = exports2.serializeAws_restXmlPutBucketRequestPaymentCommand = exports2.serializeAws_restXmlPutBucketReplicationCommand = exports2.serializeAws_restXmlPutBucketPolicyCommand = exports2.serializeAws_restXmlPutBucketOwnershipControlsCommand = exports2.serializeAws_restXmlPutBucketNotificationConfigurationCommand = exports2.serializeAws_restXmlPutBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlPutBucketLoggingCommand = exports2.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports2.serializeAws_restXmlPutBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlPutBucketEncryptionCommand = exports2.serializeAws_restXmlPutBucketCorsCommand = exports2.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlPutBucketAclCommand = exports2.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports2.serializeAws_restXmlListPartsCommand = exports2.serializeAws_restXmlListObjectVersionsCommand = exports2.serializeAws_restXmlListObjectsV2Command = exports2.serializeAws_restXmlListObjectsCommand = exports2.serializeAws_restXmlListMultipartUploadsCommand = exports2.serializeAws_restXmlListBucketsCommand = exports2.serializeAws_restXmlListBucketMetricsConfigurationsCommand = exports2.serializeAws_restXmlListBucketInventoryConfigurationsCommand = exports2.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports2.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports2.serializeAws_restXmlHeadObjectCommand = exports2.serializeAws_restXmlHeadBucketCommand = void 0;
  exports2.deserializeAws_restXmlListObjectsCommand = exports2.deserializeAws_restXmlListMultipartUploadsCommand = exports2.deserializeAws_restXmlListBucketsCommand = exports2.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = exports2.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = exports2.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports2.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports2.deserializeAws_restXmlHeadObjectCommand = exports2.deserializeAws_restXmlHeadBucketCommand = exports2.deserializeAws_restXmlGetPublicAccessBlockCommand = exports2.deserializeAws_restXmlGetObjectTorrentCommand = exports2.deserializeAws_restXmlGetObjectTaggingCommand = exports2.deserializeAws_restXmlGetObjectRetentionCommand = exports2.deserializeAws_restXmlGetObjectLockConfigurationCommand = exports2.deserializeAws_restXmlGetObjectLegalHoldCommand = exports2.deserializeAws_restXmlGetObjectAclCommand = exports2.deserializeAws_restXmlGetObjectCommand = exports2.deserializeAws_restXmlGetBucketWebsiteCommand = exports2.deserializeAws_restXmlGetBucketVersioningCommand = exports2.deserializeAws_restXmlGetBucketTaggingCommand = exports2.deserializeAws_restXmlGetBucketRequestPaymentCommand = exports2.deserializeAws_restXmlGetBucketReplicationCommand = exports2.deserializeAws_restXmlGetBucketPolicyStatusCommand = exports2.deserializeAws_restXmlGetBucketPolicyCommand = exports2.deserializeAws_restXmlGetBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = exports2.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlGetBucketLoggingCommand = exports2.deserializeAws_restXmlGetBucketLocationCommand = exports2.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports2.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports2.deserializeAws_restXmlGetBucketEncryptionCommand = exports2.deserializeAws_restXmlGetBucketCorsCommand = exports2.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlGetBucketAclCommand = exports2.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports2.deserializeAws_restXmlDeletePublicAccessBlockCommand = exports2.deserializeAws_restXmlDeleteObjectTaggingCommand = exports2.deserializeAws_restXmlDeleteObjectsCommand = exports2.deserializeAws_restXmlDeleteObjectCommand = exports2.deserializeAws_restXmlDeleteBucketWebsiteCommand = exports2.deserializeAws_restXmlDeleteBucketTaggingCommand = exports2.deserializeAws_restXmlDeleteBucketReplicationCommand = exports2.deserializeAws_restXmlDeleteBucketPolicyCommand = exports2.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketLifecycleCommand = exports2.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = void 0;
  exports2.deserializeAws_restXmlUploadPartCopyCommand = exports2.deserializeAws_restXmlUploadPartCommand = exports2.deserializeAws_restXmlSelectObjectContentCommand = exports2.deserializeAws_restXmlRestoreObjectCommand = exports2.deserializeAws_restXmlPutPublicAccessBlockCommand = exports2.deserializeAws_restXmlPutObjectTaggingCommand = exports2.deserializeAws_restXmlPutObjectRetentionCommand = exports2.deserializeAws_restXmlPutObjectLockConfigurationCommand = exports2.deserializeAws_restXmlPutObjectLegalHoldCommand = exports2.deserializeAws_restXmlPutObjectAclCommand = exports2.deserializeAws_restXmlPutObjectCommand = exports2.deserializeAws_restXmlPutBucketWebsiteCommand = exports2.deserializeAws_restXmlPutBucketVersioningCommand = exports2.deserializeAws_restXmlPutBucketTaggingCommand = exports2.deserializeAws_restXmlPutBucketRequestPaymentCommand = exports2.deserializeAws_restXmlPutBucketReplicationCommand = exports2.deserializeAws_restXmlPutBucketPolicyCommand = exports2.deserializeAws_restXmlPutBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = exports2.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlPutBucketLoggingCommand = exports2.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports2.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports2.deserializeAws_restXmlPutBucketEncryptionCommand = exports2.deserializeAws_restXmlPutBucketCorsCommand = exports2.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlPutBucketAclCommand = exports2.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports2.deserializeAws_restXmlListPartsCommand = exports2.deserializeAws_restXmlListObjectVersionsCommand = exports2.deserializeAws_restXmlListObjectsV2Command = void 0;
  var models_0_1 = require_models_0();
  var protocol_http_1 = require_cjs17();
  var smithy_client_1 = require_cjs42();
  var xml_builder_1 = require_cjs43();
  var fast_xml_parser_1 = require_parser();
  var serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "AbortMultipartUpload",
      ...input.UploadId !== void 0 && {uploadId: input.UploadId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlAbortMultipartUploadCommand = serializeAws_restXmlAbortMultipartUploadCommand;
  var serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      ...input.UploadId !== void 0 && {uploadId: input.UploadId}
    };
    let body;
    let contents;
    if (input.MultipartUpload !== void 0) {
      contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlCompleteMultipartUploadCommand = serializeAws_restXmlCompleteMultipartUploadCommand;
  var serializeAws_restXmlCopyObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.CacheControl) && {"Cache-Control": input.CacheControl},
      ...isSerializableHeaderValue(input.ContentDisposition) && {"Content-Disposition": input.ContentDisposition},
      ...isSerializableHeaderValue(input.ContentEncoding) && {"Content-Encoding": input.ContentEncoding},
      ...isSerializableHeaderValue(input.ContentLanguage) && {"Content-Language": input.ContentLanguage},
      ...isSerializableHeaderValue(input.ContentType) && {"Content-Type": input.ContentType},
      ...isSerializableHeaderValue(input.CopySource) && {"x-amz-copy-source": input.CopySource},
      ...isSerializableHeaderValue(input.CopySourceIfMatch) && {
        "x-amz-copy-source-if-match": input.CopySourceIfMatch
      },
      ...isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
        "x-amz-copy-source-if-modified-since": smithy_client_1.dateToUtcString(input.CopySourceIfModifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
      },
      ...isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
        "x-amz-copy-source-if-unmodified-since": smithy_client_1.dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.Expires) && {Expires: smithy_client_1.dateToUtcString(input.Expires).toString()},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.MetadataDirective) && {"x-amz-metadata-directive": input.MetadataDirective},
      ...isSerializableHeaderValue(input.TaggingDirective) && {"x-amz-tagging-directive": input.TaggingDirective},
      ...isSerializableHeaderValue(input.ServerSideEncryption) && {
        "x-amz-server-side-encryption": input.ServerSideEncryption
      },
      ...isSerializableHeaderValue(input.StorageClass) && {"x-amz-storage-class": input.StorageClass},
      ...isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
      },
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.SSEKMSKeyId) && {
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
      },
      ...isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
      },
      ...isSerializableHeaderValue(input.BucketKeyEnabled) && {
        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
        "x-amz-copy-source-server-side-encryption-customer-key-MD5": input.CopySourceSSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.Tagging) && {"x-amz-tagging": input.Tagging},
      ...isSerializableHeaderValue(input.ObjectLockMode) && {"x-amz-object-lock-mode": input.ObjectLockMode},
      ...isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
      },
      ...isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      },
      ...isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      },
      ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc["x-amz-meta-" + suffix] = input.Metadata[suffix];
        return acc;
      }, {})
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "CopyObject"
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlCopyObjectCommand = serializeAws_restXmlCopyObjectCommand;
  var serializeAws_restXmlCreateBucketCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWrite) && {"x-amz-grant-write": input.GrantWrite},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {
        "x-amz-bucket-object-lock-enabled": input.ObjectLockEnabledForBucket.toString()
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    let body;
    let contents;
    if (input.CreateBucketConfiguration !== void 0) {
      contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      body
    });
  };
  exports2.serializeAws_restXmlCreateBucketCommand = serializeAws_restXmlCreateBucketCommand;
  var serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.CacheControl) && {"Cache-Control": input.CacheControl},
      ...isSerializableHeaderValue(input.ContentDisposition) && {"Content-Disposition": input.ContentDisposition},
      ...isSerializableHeaderValue(input.ContentEncoding) && {"Content-Encoding": input.ContentEncoding},
      ...isSerializableHeaderValue(input.ContentLanguage) && {"Content-Language": input.ContentLanguage},
      ...isSerializableHeaderValue(input.ContentType) && {"Content-Type": input.ContentType},
      ...isSerializableHeaderValue(input.Expires) && {Expires: smithy_client_1.dateToUtcString(input.Expires).toString()},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.ServerSideEncryption) && {
        "x-amz-server-side-encryption": input.ServerSideEncryption
      },
      ...isSerializableHeaderValue(input.StorageClass) && {"x-amz-storage-class": input.StorageClass},
      ...isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
      },
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.SSEKMSKeyId) && {
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
      },
      ...isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
      },
      ...isSerializableHeaderValue(input.BucketKeyEnabled) && {
        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.Tagging) && {"x-amz-tagging": input.Tagging},
      ...isSerializableHeaderValue(input.ObjectLockMode) && {"x-amz-object-lock-mode": input.ObjectLockMode},
      ...isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
      },
      ...isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      },
      ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc["x-amz-meta-" + suffix] = input.Metadata[suffix];
        return acc;
      }, {})
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      uploads: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlCreateMultipartUploadCommand = serializeAws_restXmlCreateMultipartUploadCommand;
  var serializeAws_restXmlDeleteBucketCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketCommand = serializeAws_restXmlDeleteBucketCommand;
  var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      analytics: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;
  var serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      cors: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketCorsCommand = serializeAws_restXmlDeleteBucketCorsCommand;
  var serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      encryption: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketEncryptionCommand = serializeAws_restXmlDeleteBucketEncryptionCommand;
  var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": ""
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "intelligent-tiering": "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;
  var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      inventory: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = serializeAws_restXmlDeleteBucketInventoryConfigurationCommand;
  var serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      lifecycle: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketLifecycleCommand = serializeAws_restXmlDeleteBucketLifecycleCommand;
  var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      metrics: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = serializeAws_restXmlDeleteBucketMetricsConfigurationCommand;
  var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      ownershipControls: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = serializeAws_restXmlDeleteBucketOwnershipControlsCommand;
  var serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      policy: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketPolicyCommand = serializeAws_restXmlDeleteBucketPolicyCommand;
  var serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      replication: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketReplicationCommand = serializeAws_restXmlDeleteBucketReplicationCommand;
  var serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      tagging: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketTaggingCommand = serializeAws_restXmlDeleteBucketTaggingCommand;
  var serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      website: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteBucketWebsiteCommand = serializeAws_restXmlDeleteBucketWebsiteCommand;
  var serializeAws_restXmlDeleteObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.MFA) && {"x-amz-mfa": input.MFA},
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.BypassGovernanceRetention) && {
        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "DeleteObject",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteObjectCommand = serializeAws_restXmlDeleteObjectCommand;
  var serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.MFA) && {"x-amz-mfa": input.MFA},
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.BypassGovernanceRetention) && {
        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      delete: ""
    };
    let body;
    let contents;
    if (input.Delete !== void 0) {
      contents = serializeAws_restXmlDelete(input.Delete, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteObjectsCommand = serializeAws_restXmlDeleteObjectsCommand;
  var serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      tagging: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeleteObjectTaggingCommand = serializeAws_restXmlDeleteObjectTaggingCommand;
  var serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      publicAccessBlock: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlDeletePublicAccessBlockCommand = serializeAws_restXmlDeletePublicAccessBlockCommand;
  var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      accelerate: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = serializeAws_restXmlGetBucketAccelerateConfigurationCommand;
  var serializeAws_restXmlGetBucketAclCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      acl: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketAclCommand = serializeAws_restXmlGetBucketAclCommand;
  var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      analytics: "",
      "x-id": "GetBucketAnalyticsConfiguration",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = serializeAws_restXmlGetBucketAnalyticsConfigurationCommand;
  var serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      cors: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketCorsCommand = serializeAws_restXmlGetBucketCorsCommand;
  var serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      encryption: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketEncryptionCommand = serializeAws_restXmlGetBucketEncryptionCommand;
  var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": ""
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "intelligent-tiering": "",
      "x-id": "GetBucketIntelligentTieringConfiguration",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;
  var serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      inventory: "",
      "x-id": "GetBucketInventoryConfiguration",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketInventoryConfigurationCommand = serializeAws_restXmlGetBucketInventoryConfigurationCommand;
  var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      lifecycle: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = serializeAws_restXmlGetBucketLifecycleConfigurationCommand;
  var serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      location: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketLocationCommand = serializeAws_restXmlGetBucketLocationCommand;
  var serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      logging: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketLoggingCommand = serializeAws_restXmlGetBucketLoggingCommand;
  var serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      metrics: "",
      "x-id": "GetBucketMetricsConfiguration",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketMetricsConfigurationCommand = serializeAws_restXmlGetBucketMetricsConfigurationCommand;
  var serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      notification: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketNotificationConfigurationCommand = serializeAws_restXmlGetBucketNotificationConfigurationCommand;
  var serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      ownershipControls: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketOwnershipControlsCommand = serializeAws_restXmlGetBucketOwnershipControlsCommand;
  var serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      policy: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketPolicyCommand = serializeAws_restXmlGetBucketPolicyCommand;
  var serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      policyStatus: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketPolicyStatusCommand = serializeAws_restXmlGetBucketPolicyStatusCommand;
  var serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      replication: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketReplicationCommand = serializeAws_restXmlGetBucketReplicationCommand;
  var serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      requestPayment: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketRequestPaymentCommand = serializeAws_restXmlGetBucketRequestPaymentCommand;
  var serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      tagging: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketTaggingCommand = serializeAws_restXmlGetBucketTaggingCommand;
  var serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      versioning: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketVersioningCommand = serializeAws_restXmlGetBucketVersioningCommand;
  var serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      website: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetBucketWebsiteCommand = serializeAws_restXmlGetBucketWebsiteCommand;
  var serializeAws_restXmlGetObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.IfMatch) && {"If-Match": input.IfMatch},
      ...isSerializableHeaderValue(input.IfModifiedSince) && {
        "If-Modified-Since": smithy_client_1.dateToUtcString(input.IfModifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.IfNoneMatch) && {"If-None-Match": input.IfNoneMatch},
      ...isSerializableHeaderValue(input.IfUnmodifiedSince) && {
        "If-Unmodified-Since": smithy_client_1.dateToUtcString(input.IfUnmodifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.Range) && {Range: input.Range},
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "GetObject",
      ...input.ResponseCacheControl !== void 0 && {"response-cache-control": input.ResponseCacheControl},
      ...input.ResponseContentDisposition !== void 0 && {
        "response-content-disposition": input.ResponseContentDisposition
      },
      ...input.ResponseContentEncoding !== void 0 && {"response-content-encoding": input.ResponseContentEncoding},
      ...input.ResponseContentLanguage !== void 0 && {"response-content-language": input.ResponseContentLanguage},
      ...input.ResponseContentType !== void 0 && {"response-content-type": input.ResponseContentType},
      ...input.ResponseExpires !== void 0 && {
        "response-expires": (input.ResponseExpires.toISOString().split(".")[0] + "Z").toString()
      },
      ...input.VersionId !== void 0 && {versionId: input.VersionId},
      ...input.PartNumber !== void 0 && {partNumber: input.PartNumber.toString()}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectCommand = serializeAws_restXmlGetObjectCommand;
  var serializeAws_restXmlGetObjectAclCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      acl: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectAclCommand = serializeAws_restXmlGetObjectAclCommand;
  var serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "legal-hold": "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectLegalHoldCommand = serializeAws_restXmlGetObjectLegalHoldCommand;
  var serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "object-lock": ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectLockConfigurationCommand = serializeAws_restXmlGetObjectLockConfigurationCommand;
  var serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      retention: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectRetentionCommand = serializeAws_restXmlGetObjectRetentionCommand;
  var serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      tagging: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectTaggingCommand = serializeAws_restXmlGetObjectTaggingCommand;
  var serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      torrent: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetObjectTorrentCommand = serializeAws_restXmlGetObjectTorrentCommand;
  var serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      publicAccessBlock: ""
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlGetPublicAccessBlockCommand = serializeAws_restXmlGetPublicAccessBlockCommand;
  var serializeAws_restXmlHeadBucketCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "HEAD",
      headers,
      path: resolvedPath,
      body
    });
  };
  exports2.serializeAws_restXmlHeadBucketCommand = serializeAws_restXmlHeadBucketCommand;
  var serializeAws_restXmlHeadObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.IfMatch) && {"If-Match": input.IfMatch},
      ...isSerializableHeaderValue(input.IfModifiedSince) && {
        "If-Modified-Since": smithy_client_1.dateToUtcString(input.IfModifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.IfNoneMatch) && {"If-None-Match": input.IfNoneMatch},
      ...isSerializableHeaderValue(input.IfUnmodifiedSince) && {
        "If-Unmodified-Since": smithy_client_1.dateToUtcString(input.IfUnmodifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.Range) && {Range: input.Range},
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      ...input.VersionId !== void 0 && {versionId: input.VersionId},
      ...input.PartNumber !== void 0 && {partNumber: input.PartNumber.toString()}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "HEAD",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlHeadObjectCommand = serializeAws_restXmlHeadObjectCommand;
  var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      analytics: "",
      "x-id": "ListBucketAnalyticsConfigurations",
      ...input.ContinuationToken !== void 0 && {"continuation-token": input.ContinuationToken}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = serializeAws_restXmlListBucketAnalyticsConfigurationsCommand;
  var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
    const headers = {
      "Content-Type": ""
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "intelligent-tiering": "",
      "x-id": "ListBucketIntelligentTieringConfigurations",
      ...input.ContinuationToken !== void 0 && {"continuation-token": input.ContinuationToken}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;
  var serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      inventory: "",
      "x-id": "ListBucketInventoryConfigurations",
      ...input.ContinuationToken !== void 0 && {"continuation-token": input.ContinuationToken}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListBucketInventoryConfigurationsCommand = serializeAws_restXmlListBucketInventoryConfigurationsCommand;
  var serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      metrics: "",
      "x-id": "ListBucketMetricsConfigurations",
      ...input.ContinuationToken !== void 0 && {"continuation-token": input.ContinuationToken}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListBucketMetricsConfigurationsCommand = serializeAws_restXmlListBucketMetricsConfigurationsCommand;
  var serializeAws_restXmlListBucketsCommand = async (input, context) => {
    const headers = {
      "Content-Type": ""
    };
    let resolvedPath = "/";
    let body;
    body = "";
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      body
    });
  };
  exports2.serializeAws_restXmlListBucketsCommand = serializeAws_restXmlListBucketsCommand;
  var serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      uploads: "",
      ...input.Delimiter !== void 0 && {delimiter: input.Delimiter},
      ...input.EncodingType !== void 0 && {"encoding-type": input.EncodingType},
      ...input.KeyMarker !== void 0 && {"key-marker": input.KeyMarker},
      ...input.MaxUploads !== void 0 && {"max-uploads": input.MaxUploads.toString()},
      ...input.Prefix !== void 0 && {prefix: input.Prefix},
      ...input.UploadIdMarker !== void 0 && {"upload-id-marker": input.UploadIdMarker}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListMultipartUploadsCommand = serializeAws_restXmlListMultipartUploadsCommand;
  var serializeAws_restXmlListObjectsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      ...input.Delimiter !== void 0 && {delimiter: input.Delimiter},
      ...input.EncodingType !== void 0 && {"encoding-type": input.EncodingType},
      ...input.Marker !== void 0 && {marker: input.Marker},
      ...input.MaxKeys !== void 0 && {"max-keys": input.MaxKeys.toString()},
      ...input.Prefix !== void 0 && {prefix: input.Prefix}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListObjectsCommand = serializeAws_restXmlListObjectsCommand;
  var serializeAws_restXmlListObjectsV2Command = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "list-type": "2",
      ...input.Delimiter !== void 0 && {delimiter: input.Delimiter},
      ...input.EncodingType !== void 0 && {"encoding-type": input.EncodingType},
      ...input.MaxKeys !== void 0 && {"max-keys": input.MaxKeys.toString()},
      ...input.Prefix !== void 0 && {prefix: input.Prefix},
      ...input.ContinuationToken !== void 0 && {"continuation-token": input.ContinuationToken},
      ...input.FetchOwner !== void 0 && {"fetch-owner": input.FetchOwner.toString()},
      ...input.StartAfter !== void 0 && {"start-after": input.StartAfter}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListObjectsV2Command = serializeAws_restXmlListObjectsV2Command;
  var serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      versions: "",
      ...input.Delimiter !== void 0 && {delimiter: input.Delimiter},
      ...input.EncodingType !== void 0 && {"encoding-type": input.EncodingType},
      ...input.KeyMarker !== void 0 && {"key-marker": input.KeyMarker},
      ...input.MaxKeys !== void 0 && {"max-keys": input.MaxKeys.toString()},
      ...input.Prefix !== void 0 && {prefix: input.Prefix},
      ...input.VersionIdMarker !== void 0 && {"version-id-marker": input.VersionIdMarker}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListObjectVersionsCommand = serializeAws_restXmlListObjectVersionsCommand;
  var serializeAws_restXmlListPartsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "ListParts",
      ...input.MaxParts !== void 0 && {"max-parts": input.MaxParts.toString()},
      ...input.PartNumberMarker !== void 0 && {"part-number-marker": input.PartNumberMarker},
      ...input.UploadId !== void 0 && {uploadId: input.UploadId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlListPartsCommand = serializeAws_restXmlListPartsCommand;
  var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      accelerate: ""
    };
    let body;
    let contents;
    if (input.AccelerateConfiguration !== void 0) {
      contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = serializeAws_restXmlPutBucketAccelerateConfigurationCommand;
  var serializeAws_restXmlPutBucketAclCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWrite) && {"x-amz-grant-write": input.GrantWrite},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      acl: ""
    };
    let body;
    let contents;
    if (input.AccessControlPolicy !== void 0) {
      contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketAclCommand = serializeAws_restXmlPutBucketAclCommand;
  var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      analytics: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    let contents;
    if (input.AnalyticsConfiguration !== void 0) {
      contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = serializeAws_restXmlPutBucketAnalyticsConfigurationCommand;
  var serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      cors: ""
    };
    let body;
    let contents;
    if (input.CORSConfiguration !== void 0) {
      contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketCorsCommand = serializeAws_restXmlPutBucketCorsCommand;
  var serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      encryption: ""
    };
    let body;
    let contents;
    if (input.ServerSideEncryptionConfiguration !== void 0) {
      contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketEncryptionCommand = serializeAws_restXmlPutBucketEncryptionCommand;
  var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml"
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "intelligent-tiering": "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    let contents;
    if (input.IntelligentTieringConfiguration !== void 0) {
      contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;
  var serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      inventory: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    let contents;
    if (input.InventoryConfiguration !== void 0) {
      contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketInventoryConfigurationCommand = serializeAws_restXmlPutBucketInventoryConfigurationCommand;
  var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      lifecycle: ""
    };
    let body;
    let contents;
    if (input.LifecycleConfiguration !== void 0) {
      contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = serializeAws_restXmlPutBucketLifecycleConfigurationCommand;
  var serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      logging: ""
    };
    let body;
    let contents;
    if (input.BucketLoggingStatus !== void 0) {
      contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketLoggingCommand = serializeAws_restXmlPutBucketLoggingCommand;
  var serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      metrics: "",
      ...input.Id !== void 0 && {id: input.Id}
    };
    let body;
    let contents;
    if (input.MetricsConfiguration !== void 0) {
      contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketMetricsConfigurationCommand = serializeAws_restXmlPutBucketMetricsConfigurationCommand;
  var serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      notification: ""
    };
    let body;
    let contents;
    if (input.NotificationConfiguration !== void 0) {
      contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketNotificationConfigurationCommand = serializeAws_restXmlPutBucketNotificationConfigurationCommand;
  var serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      ownershipControls: ""
    };
    let body;
    let contents;
    if (input.OwnershipControls !== void 0) {
      contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketOwnershipControlsCommand = serializeAws_restXmlPutBucketOwnershipControlsCommand;
  var serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {
    const headers = {
      "Content-Type": "text/plain",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {
        "x-amz-confirm-remove-self-bucket-access": input.ConfirmRemoveSelfBucketAccess.toString()
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      policy: ""
    };
    let body;
    let contents;
    if (input.Policy !== void 0) {
      contents = input.Policy;
      body = contents;
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketPolicyCommand = serializeAws_restXmlPutBucketPolicyCommand;
  var serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.Token) && {"x-amz-bucket-object-lock-token": input.Token},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      replication: ""
    };
    let body;
    let contents;
    if (input.ReplicationConfiguration !== void 0) {
      contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketReplicationCommand = serializeAws_restXmlPutBucketReplicationCommand;
  var serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      requestPayment: ""
    };
    let body;
    let contents;
    if (input.RequestPaymentConfiguration !== void 0) {
      contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketRequestPaymentCommand = serializeAws_restXmlPutBucketRequestPaymentCommand;
  var serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      tagging: ""
    };
    let body;
    let contents;
    if (input.Tagging !== void 0) {
      contents = serializeAws_restXmlTagging(input.Tagging, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketTaggingCommand = serializeAws_restXmlPutBucketTaggingCommand;
  var serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.MFA) && {"x-amz-mfa": input.MFA},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      versioning: ""
    };
    let body;
    let contents;
    if (input.VersioningConfiguration !== void 0) {
      contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketVersioningCommand = serializeAws_restXmlPutBucketVersioningCommand;
  var serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      website: ""
    };
    let body;
    let contents;
    if (input.WebsiteConfiguration !== void 0) {
      contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutBucketWebsiteCommand = serializeAws_restXmlPutBucketWebsiteCommand;
  var serializeAws_restXmlPutObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/octet-stream",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.CacheControl) && {"Cache-Control": input.CacheControl},
      ...isSerializableHeaderValue(input.ContentDisposition) && {"Content-Disposition": input.ContentDisposition},
      ...isSerializableHeaderValue(input.ContentEncoding) && {"Content-Encoding": input.ContentEncoding},
      ...isSerializableHeaderValue(input.ContentLanguage) && {"Content-Language": input.ContentLanguage},
      ...isSerializableHeaderValue(input.ContentLength) && {"Content-Length": input.ContentLength.toString()},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ContentType) && {"Content-Type": input.ContentType},
      ...isSerializableHeaderValue(input.Expires) && {Expires: smithy_client_1.dateToUtcString(input.Expires).toString()},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.ServerSideEncryption) && {
        "x-amz-server-side-encryption": input.ServerSideEncryption
      },
      ...isSerializableHeaderValue(input.StorageClass) && {"x-amz-storage-class": input.StorageClass},
      ...isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
      },
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.SSEKMSKeyId) && {
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
      },
      ...isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
      },
      ...isSerializableHeaderValue(input.BucketKeyEnabled) && {
        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.Tagging) && {"x-amz-tagging": input.Tagging},
      ...isSerializableHeaderValue(input.ObjectLockMode) && {"x-amz-object-lock-mode": input.ObjectLockMode},
      ...isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
      },
      ...isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      },
      ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc["x-amz-meta-" + suffix] = input.Metadata[suffix];
        return acc;
      }, {})
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "PutObject"
    };
    let body;
    let contents;
    if (input.Body !== void 0) {
      contents = input.Body;
      body = contents;
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectCommand = serializeAws_restXmlPutObjectCommand;
  var serializeAws_restXmlPutObjectAclCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ACL) && {"x-amz-acl": input.ACL},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.GrantFullControl) && {"x-amz-grant-full-control": input.GrantFullControl},
      ...isSerializableHeaderValue(input.GrantRead) && {"x-amz-grant-read": input.GrantRead},
      ...isSerializableHeaderValue(input.GrantReadACP) && {"x-amz-grant-read-acp": input.GrantReadACP},
      ...isSerializableHeaderValue(input.GrantWrite) && {"x-amz-grant-write": input.GrantWrite},
      ...isSerializableHeaderValue(input.GrantWriteACP) && {"x-amz-grant-write-acp": input.GrantWriteACP},
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      acl: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    let contents;
    if (input.AccessControlPolicy !== void 0) {
      contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectAclCommand = serializeAws_restXmlPutObjectAclCommand;
  var serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "legal-hold": "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    let contents;
    if (input.LegalHold !== void 0) {
      contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectLegalHoldCommand = serializeAws_restXmlPutObjectLegalHoldCommand;
  var serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.Token) && {"x-amz-bucket-object-lock-token": input.Token},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      "object-lock": ""
    };
    let body;
    let contents;
    if (input.ObjectLockConfiguration !== void 0) {
      contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectLockConfigurationCommand = serializeAws_restXmlPutObjectLockConfigurationCommand;
  var serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.BypassGovernanceRetention) && {
        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
      },
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      retention: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    let contents;
    if (input.Retention !== void 0) {
      contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectRetentionCommand = serializeAws_restXmlPutObjectRetentionCommand;
  var serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      tagging: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    let contents;
    if (input.Tagging !== void 0) {
      contents = serializeAws_restXmlTagging(input.Tagging, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutObjectTaggingCommand = serializeAws_restXmlPutObjectTaggingCommand;
  var serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    const query = {
      publicAccessBlock: ""
    };
    let body;
    let contents;
    if (input.PublicAccessBlockConfiguration !== void 0) {
      contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlPutPublicAccessBlockCommand = serializeAws_restXmlPutPublicAccessBlockCommand;
  var serializeAws_restXmlRestoreObjectCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      restore: "",
      ...input.VersionId !== void 0 && {versionId: input.VersionId}
    };
    let body;
    let contents;
    if (input.RestoreRequest !== void 0) {
      contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlRestoreObjectCommand = serializeAws_restXmlRestoreObjectCommand;
  var serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/xml",
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      select: "",
      "select-type": "2"
    };
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("SelectObjectContentRequest");
    bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    if (input.Expression !== void 0) {
      const node = new xml_builder_1.XmlNode("Expression").addChildNode(new xml_builder_1.XmlText(input.Expression)).withName("Expression");
      bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== void 0) {
      const node = new xml_builder_1.XmlNode("ExpressionType").addChildNode(new xml_builder_1.XmlText(input.ExpressionType)).withName("ExpressionType");
      bodyNode.addChildNode(node);
    }
    if (input.InputSerialization !== void 0) {
      const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== void 0) {
      const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.RequestProgress !== void 0) {
      const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName("RequestProgress");
      bodyNode.addChildNode(node);
    }
    if (input.ScanRange !== void 0) {
      const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName("ScanRange");
      bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlSelectObjectContentCommand = serializeAws_restXmlSelectObjectContentCommand;
  var serializeAws_restXmlUploadPartCommand = async (input, context) => {
    const headers = {
      "Content-Type": "application/octet-stream",
      ...isSerializableHeaderValue(input.ContentLength) && {"Content-Length": input.ContentLength.toString()},
      ...isSerializableHeaderValue(input.ContentMD5) && {"Content-MD5": input.ContentMD5},
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "UploadPart",
      ...input.PartNumber !== void 0 && {partNumber: input.PartNumber.toString()},
      ...input.UploadId !== void 0 && {uploadId: input.UploadId}
    };
    let body;
    let contents;
    if (input.Body !== void 0) {
      contents = input.Body;
      body = contents;
    }
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlUploadPartCommand = serializeAws_restXmlUploadPartCommand;
  var serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {
    const headers = {
      "Content-Type": "",
      ...isSerializableHeaderValue(input.CopySource) && {"x-amz-copy-source": input.CopySource},
      ...isSerializableHeaderValue(input.CopySourceIfMatch) && {
        "x-amz-copy-source-if-match": input.CopySourceIfMatch
      },
      ...isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
        "x-amz-copy-source-if-modified-since": smithy_client_1.dateToUtcString(input.CopySourceIfModifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
      },
      ...isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
        "x-amz-copy-source-if-unmodified-since": smithy_client_1.dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
      },
      ...isSerializableHeaderValue(input.CopySourceRange) && {"x-amz-copy-source-range": input.CopySourceRange},
      ...isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.SSECustomerKey) && {
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
      },
      ...isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
        "x-amz-server-side-encryption-customer-key-MD5": input.SSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
      },
      ...isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
        "x-amz-copy-source-server-side-encryption-customer-key-MD5": input.CopySourceSSECustomerKeyMD5
      },
      ...isSerializableHeaderValue(input.RequestPayer) && {"x-amz-request-payer": input.RequestPayer},
      ...isSerializableHeaderValue(input.ExpectedBucketOwner) && {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      },
      ...isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      }
    };
    let resolvedPath = "/{Bucket}/{Key+}";
    if (input.Bucket !== void 0) {
      const labelValue = input.Bucket;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Bucket.");
      }
      resolvedPath = resolvedPath.replace("{Bucket}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: Bucket.");
    }
    if (input.Key !== void 0) {
      const labelValue = input.Key;
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: Key.");
      }
      resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map((segment) => smithy_client_1.extendedEncodeURIComponent(segment)).join("/"));
    } else {
      throw new Error("No value provided for input HTTP label: Key.");
    }
    const query = {
      "x-id": "UploadPartCopy",
      ...input.PartNumber !== void 0 && {partNumber: input.PartNumber.toString()},
      ...input.UploadId !== void 0 && {uploadId: input.UploadId}
    };
    let body;
    const {hostname, protocol = "https", port} = await context.endpoint();
    return new protocol_http_1.HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  exports2.serializeAws_restXmlUploadPartCopyCommand = serializeAws_restXmlUploadPartCopyCommand;
  var deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlAbortMultipartUploadCommand = deserializeAws_restXmlAbortMultipartUploadCommand;
  var deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchUpload":
      case "com.amazonaws.s3#NoSuchUpload":
        response = {
          ...await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Bucket: void 0,
      BucketKeyEnabled: void 0,
      ETag: void 0,
      Expiration: void 0,
      Key: void 0,
      Location: void 0,
      RequestCharged: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      VersionId: void 0
    };
    if (output.headers["x-amz-expiration"] !== void 0) {
      contents.Expiration = output.headers["x-amz-expiration"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    if (data["Bucket"] !== void 0) {
      contents.Bucket = data["Bucket"];
    }
    if (data["ETag"] !== void 0) {
      contents.ETag = data["ETag"];
    }
    if (data["Key"] !== void 0) {
      contents.Key = data["Key"];
    }
    if (data["Location"] !== void 0) {
      contents.Location = data["Location"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlCompleteMultipartUploadCommand = deserializeAws_restXmlCompleteMultipartUploadCommand;
  var deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlCopyObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlCopyObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      BucketKeyEnabled: void 0,
      CopyObjectResult: void 0,
      CopySourceVersionId: void 0,
      Expiration: void 0,
      RequestCharged: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSEncryptionContext: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      VersionId: void 0
    };
    if (output.headers["x-amz-expiration"] !== void 0) {
      contents.Expiration = output.headers["x-amz-expiration"];
    }
    if (output.headers["x-amz-copy-source-version-id"] !== void 0) {
      contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
      contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlCopyObjectCommand = deserializeAws_restXmlCopyObjectCommand;
  var deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectNotInActiveTierError":
      case "com.amazonaws.s3#ObjectNotInActiveTierError":
        response = {
          ...await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlCreateBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlCreateBucketCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Location: void 0
    };
    if (output.headers["location"] !== void 0) {
      contents.Location = output.headers["location"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlCreateBucketCommand = deserializeAws_restXmlCreateBucketCommand;
  var deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "BucketAlreadyExists":
      case "com.amazonaws.s3#BucketAlreadyExists":
        response = {
          ...await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      case "BucketAlreadyOwnedByYou":
      case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
        response = {
          ...await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AbortDate: void 0,
      AbortRuleId: void 0,
      Bucket: void 0,
      BucketKeyEnabled: void 0,
      Key: void 0,
      RequestCharged: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSEncryptionContext: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      UploadId: void 0
    };
    if (output.headers["x-amz-abort-date"] !== void 0) {
      contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
    }
    if (output.headers["x-amz-abort-rule-id"] !== void 0) {
      contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
      contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    if (data["Bucket"] !== void 0) {
      contents.Bucket = data["Bucket"];
    }
    if (data["Key"] !== void 0) {
      contents.Key = data["Key"];
    }
    if (data["UploadId"] !== void 0) {
      contents.UploadId = data["UploadId"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlCreateMultipartUploadCommand = deserializeAws_restXmlCreateMultipartUploadCommand;
  var deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketCommand = deserializeAws_restXmlDeleteBucketCommand;
  var deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;
  var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketCorsCommand = deserializeAws_restXmlDeleteBucketCorsCommand;
  var deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketEncryptionCommand = deserializeAws_restXmlDeleteBucketEncryptionCommand;
  var deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;
  var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand;
  var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketLifecycleCommand = deserializeAws_restXmlDeleteBucketLifecycleCommand;
  var deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand;
  var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = deserializeAws_restXmlDeleteBucketOwnershipControlsCommand;
  var deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketPolicyCommand = deserializeAws_restXmlDeleteBucketPolicyCommand;
  var deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketReplicationCommand = deserializeAws_restXmlDeleteBucketReplicationCommand;
  var deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketTaggingCommand = deserializeAws_restXmlDeleteBucketTaggingCommand;
  var deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteBucketWebsiteCommand = deserializeAws_restXmlDeleteBucketWebsiteCommand;
  var deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      DeleteMarker: void 0,
      RequestCharged: void 0,
      VersionId: void 0
    };
    if (output.headers["x-amz-delete-marker"] !== void 0) {
      contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteObjectCommand = deserializeAws_restXmlDeleteObjectCommand;
  var deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteObjectsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Deleted: void 0,
      Errors: void 0,
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    if (data.Deleted === "") {
      contents.Deleted = [];
    }
    if (data["Deleted"] !== void 0) {
      contents.Deleted = deserializeAws_restXmlDeletedObjects(smithy_client_1.getArrayIfSingleItem(data["Deleted"]), context);
    }
    if (data.Error === "") {
      contents.Errors = [];
    }
    if (data["Error"] !== void 0) {
      contents.Errors = deserializeAws_restXmlErrors(smithy_client_1.getArrayIfSingleItem(data["Error"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteObjectsCommand = deserializeAws_restXmlDeleteObjectsCommand;
  var deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      VersionId: void 0
    };
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeleteObjectTaggingCommand = deserializeAws_restXmlDeleteObjectTaggingCommand;
  var deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlDeletePublicAccessBlockCommand = deserializeAws_restXmlDeletePublicAccessBlockCommand;
  var deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Status: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["Status"] !== void 0) {
      contents.Status = data["Status"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = deserializeAws_restXmlGetBucketAccelerateConfigurationCommand;
  var deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketAclCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Grants: void 0,
      Owner: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.AccessControlList === "") {
      contents.Grants = [];
    }
    if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
      contents.Grants = deserializeAws_restXmlGrants(smithy_client_1.getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
    }
    if (data["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketAclCommand = deserializeAws_restXmlGetBucketAclCommand;
  var deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AnalyticsConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand;
  var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketCorsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      CORSRules: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.CORSRule === "") {
      contents.CORSRules = [];
    }
    if (data["CORSRule"] !== void 0) {
      contents.CORSRules = deserializeAws_restXmlCORSRules(smithy_client_1.getArrayIfSingleItem(data["CORSRule"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketCorsCommand = deserializeAws_restXmlGetBucketCorsCommand;
  var deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ServerSideEncryptionConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketEncryptionCommand = deserializeAws_restXmlGetBucketEncryptionCommand;
  var deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      IntelligentTieringConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;
  var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      InventoryConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = deserializeAws_restXmlGetBucketInventoryConfigurationCommand;
  var deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Rules: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.Rule === "") {
      contents.Rules = [];
    }
    if (data["Rule"] !== void 0) {
      contents.Rules = deserializeAws_restXmlLifecycleRules(smithy_client_1.getArrayIfSingleItem(data["Rule"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = deserializeAws_restXmlGetBucketLifecycleConfigurationCommand;
  var deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketLocationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      LocationConstraint: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["LocationConstraint"] !== void 0) {
      contents.LocationConstraint = data["LocationConstraint"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketLocationCommand = deserializeAws_restXmlGetBucketLocationCommand;
  var deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      LoggingEnabled: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["LoggingEnabled"] !== void 0) {
      contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"], context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketLoggingCommand = deserializeAws_restXmlGetBucketLoggingCommand;
  var deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      MetricsConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = deserializeAws_restXmlGetBucketMetricsConfigurationCommand;
  var deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      LambdaFunctionConfigurations: void 0,
      QueueConfigurations: void 0,
      TopicConfigurations: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.CloudFunctionConfiguration === "") {
      contents.LambdaFunctionConfigurations = [];
    }
    if (data["CloudFunctionConfiguration"] !== void 0) {
      contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(smithy_client_1.getArrayIfSingleItem(data["CloudFunctionConfiguration"]), context);
    }
    if (data.QueueConfiguration === "") {
      contents.QueueConfigurations = [];
    }
    if (data["QueueConfiguration"] !== void 0) {
      contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(smithy_client_1.getArrayIfSingleItem(data["QueueConfiguration"]), context);
    }
    if (data.TopicConfiguration === "") {
      contents.TopicConfigurations = [];
    }
    if (data["TopicConfiguration"] !== void 0) {
      contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(smithy_client_1.getArrayIfSingleItem(data["TopicConfiguration"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = deserializeAws_restXmlGetBucketNotificationConfigurationCommand;
  var deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      OwnershipControls: void 0
    };
    const data = await parseBody(output.body, context);
    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketOwnershipControlsCommand = deserializeAws_restXmlGetBucketOwnershipControlsCommand;
  var deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Policy: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["Policy"] !== void 0) {
      contents.Policy = data["Policy"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketPolicyCommand = deserializeAws_restXmlGetBucketPolicyCommand;
  var deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      PolicyStatus: void 0
    };
    const data = await parseBody(output.body, context);
    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketPolicyStatusCommand = deserializeAws_restXmlGetBucketPolicyStatusCommand;
  var deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ReplicationConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketReplicationCommand = deserializeAws_restXmlGetBucketReplicationCommand;
  var deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Payer: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["Payer"] !== void 0) {
      contents.Payer = data["Payer"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketRequestPaymentCommand = deserializeAws_restXmlGetBucketRequestPaymentCommand;
  var deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      TagSet: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.TagSet === "") {
      contents.TagSet = [];
    }
    if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
      contents.TagSet = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketTaggingCommand = deserializeAws_restXmlGetBucketTaggingCommand;
  var deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      MFADelete: void 0,
      Status: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["MfaDelete"] !== void 0) {
      contents.MFADelete = data["MfaDelete"];
    }
    if (data["Status"] !== void 0) {
      contents.Status = data["Status"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketVersioningCommand = deserializeAws_restXmlGetBucketVersioningCommand;
  var deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ErrorDocument: void 0,
      IndexDocument: void 0,
      RedirectAllRequestsTo: void 0,
      RoutingRules: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["ErrorDocument"] !== void 0) {
      contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"], context);
    }
    if (data["IndexDocument"] !== void 0) {
      contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"], context);
    }
    if (data["RedirectAllRequestsTo"] !== void 0) {
      contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
    }
    if (data.RoutingRules === "") {
      contents.RoutingRules = [];
    }
    if (data["RoutingRules"] !== void 0 && data["RoutingRules"]["RoutingRule"] !== void 0) {
      contents.RoutingRules = deserializeAws_restXmlRoutingRules(smithy_client_1.getArrayIfSingleItem(data["RoutingRules"]["RoutingRule"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetBucketWebsiteCommand = deserializeAws_restXmlGetBucketWebsiteCommand;
  var deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AcceptRanges: void 0,
      Body: void 0,
      BucketKeyEnabled: void 0,
      CacheControl: void 0,
      ContentDisposition: void 0,
      ContentEncoding: void 0,
      ContentLanguage: void 0,
      ContentLength: void 0,
      ContentRange: void 0,
      ContentType: void 0,
      DeleteMarker: void 0,
      ETag: void 0,
      Expiration: void 0,
      Expires: void 0,
      LastModified: void 0,
      Metadata: void 0,
      MissingMeta: void 0,
      ObjectLockLegalHoldStatus: void 0,
      ObjectLockMode: void 0,
      ObjectLockRetainUntilDate: void 0,
      PartsCount: void 0,
      ReplicationStatus: void 0,
      RequestCharged: void 0,
      Restore: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      StorageClass: void 0,
      TagCount: void 0,
      VersionId: void 0,
      WebsiteRedirectLocation: void 0
    };
    if (output.headers["x-amz-delete-marker"] !== void 0) {
      contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
    }
    if (output.headers["accept-ranges"] !== void 0) {
      contents.AcceptRanges = output.headers["accept-ranges"];
    }
    if (output.headers["x-amz-expiration"] !== void 0) {
      contents.Expiration = output.headers["x-amz-expiration"];
    }
    if (output.headers["x-amz-restore"] !== void 0) {
      contents.Restore = output.headers["x-amz-restore"];
    }
    if (output.headers["last-modified"] !== void 0) {
      contents.LastModified = new Date(output.headers["last-modified"]);
    }
    if (output.headers["content-length"] !== void 0) {
      contents.ContentLength = parseInt(output.headers["content-length"], 10);
    }
    if (output.headers["etag"] !== void 0) {
      contents.ETag = output.headers["etag"];
    }
    if (output.headers["x-amz-missing-meta"] !== void 0) {
      contents.MissingMeta = parseInt(output.headers["x-amz-missing-meta"], 10);
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["cache-control"] !== void 0) {
      contents.CacheControl = output.headers["cache-control"];
    }
    if (output.headers["content-disposition"] !== void 0) {
      contents.ContentDisposition = output.headers["content-disposition"];
    }
    if (output.headers["content-encoding"] !== void 0) {
      contents.ContentEncoding = output.headers["content-encoding"];
    }
    if (output.headers["content-language"] !== void 0) {
      contents.ContentLanguage = output.headers["content-language"];
    }
    if (output.headers["content-range"] !== void 0) {
      contents.ContentRange = output.headers["content-range"];
    }
    if (output.headers["content-type"] !== void 0) {
      contents.ContentType = output.headers["content-type"];
    }
    if (output.headers["expires"] !== void 0) {
      contents.Expires = new Date(output.headers["expires"]);
    }
    if (output.headers["x-amz-website-redirect-location"] !== void 0) {
      contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-storage-class"] !== void 0) {
      contents.StorageClass = output.headers["x-amz-storage-class"];
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    if (output.headers["x-amz-replication-status"] !== void 0) {
      contents.ReplicationStatus = output.headers["x-amz-replication-status"];
    }
    if (output.headers["x-amz-mp-parts-count"] !== void 0) {
      contents.PartsCount = parseInt(output.headers["x-amz-mp-parts-count"], 10);
    }
    if (output.headers["x-amz-tagging-count"] !== void 0) {
      contents.TagCount = parseInt(output.headers["x-amz-tagging-count"], 10);
    }
    if (output.headers["x-amz-object-lock-mode"] !== void 0) {
      contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
    }
    if (output.headers["x-amz-object-lock-retain-until-date"] !== void 0) {
      contents.ObjectLockRetainUntilDate = new Date(output.headers["x-amz-object-lock-retain-until-date"]);
    }
    if (output.headers["x-amz-object-lock-legal-hold"] !== void 0) {
      contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
    }
    Object.keys(output.headers).forEach((header) => {
      if (contents.Metadata === void 0) {
        contents.Metadata = {};
      }
      if (header.startsWith("x-amz-meta-")) {
        contents.Metadata[header.substring(11)] = output.headers[header];
      }
    });
    const data = output.body;
    contents.Body = data;
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectCommand = deserializeAws_restXmlGetObjectCommand;
  var deserializeAws_restXmlGetObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidObjectState":
      case "com.amazonaws.s3#InvalidObjectState":
        response = {
          ...await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        response = {
          ...await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectAclCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Grants: void 0,
      Owner: void 0,
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    if (data.AccessControlList === "") {
      contents.Grants = [];
    }
    if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
      contents.Grants = deserializeAws_restXmlGrants(smithy_client_1.getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
    }
    if (data["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectAclCommand = deserializeAws_restXmlGetObjectAclCommand;
  var deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        response = {
          ...await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      LegalHold: void 0
    };
    const data = await parseBody(output.body, context);
    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectLegalHoldCommand = deserializeAws_restXmlGetObjectLegalHoldCommand;
  var deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ObjectLockConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectLockConfigurationCommand = deserializeAws_restXmlGetObjectLockConfigurationCommand;
  var deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Retention: void 0
    };
    const data = await parseBody(output.body, context);
    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectRetentionCommand = deserializeAws_restXmlGetObjectRetentionCommand;
  var deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      TagSet: void 0,
      VersionId: void 0
    };
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    const data = await parseBody(output.body, context);
    if (data.TagSet === "") {
      contents.TagSet = [];
    }
    if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
      contents.TagSet = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectTaggingCommand = deserializeAws_restXmlGetObjectTaggingCommand;
  var deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Body: void 0,
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = output.body;
    contents.Body = data;
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetObjectTorrentCommand = deserializeAws_restXmlGetObjectTorrentCommand;
  var deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      PublicAccessBlockConfiguration: void 0
    };
    const data = await parseBody(output.body, context);
    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlGetPublicAccessBlockCommand = deserializeAws_restXmlGetPublicAccessBlockCommand;
  var deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlHeadBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlHeadBucketCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlHeadBucketCommand = deserializeAws_restXmlHeadBucketCommand;
  var deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        response = {
          ...await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlHeadObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlHeadObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AcceptRanges: void 0,
      ArchiveStatus: void 0,
      BucketKeyEnabled: void 0,
      CacheControl: void 0,
      ContentDisposition: void 0,
      ContentEncoding: void 0,
      ContentLanguage: void 0,
      ContentLength: void 0,
      ContentType: void 0,
      DeleteMarker: void 0,
      ETag: void 0,
      Expiration: void 0,
      Expires: void 0,
      LastModified: void 0,
      Metadata: void 0,
      MissingMeta: void 0,
      ObjectLockLegalHoldStatus: void 0,
      ObjectLockMode: void 0,
      ObjectLockRetainUntilDate: void 0,
      PartsCount: void 0,
      ReplicationStatus: void 0,
      RequestCharged: void 0,
      Restore: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      StorageClass: void 0,
      VersionId: void 0,
      WebsiteRedirectLocation: void 0
    };
    if (output.headers["x-amz-delete-marker"] !== void 0) {
      contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
    }
    if (output.headers["accept-ranges"] !== void 0) {
      contents.AcceptRanges = output.headers["accept-ranges"];
    }
    if (output.headers["x-amz-expiration"] !== void 0) {
      contents.Expiration = output.headers["x-amz-expiration"];
    }
    if (output.headers["x-amz-restore"] !== void 0) {
      contents.Restore = output.headers["x-amz-restore"];
    }
    if (output.headers["x-amz-archive-status"] !== void 0) {
      contents.ArchiveStatus = output.headers["x-amz-archive-status"];
    }
    if (output.headers["last-modified"] !== void 0) {
      contents.LastModified = new Date(output.headers["last-modified"]);
    }
    if (output.headers["content-length"] !== void 0) {
      contents.ContentLength = parseInt(output.headers["content-length"], 10);
    }
    if (output.headers["etag"] !== void 0) {
      contents.ETag = output.headers["etag"];
    }
    if (output.headers["x-amz-missing-meta"] !== void 0) {
      contents.MissingMeta = parseInt(output.headers["x-amz-missing-meta"], 10);
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["cache-control"] !== void 0) {
      contents.CacheControl = output.headers["cache-control"];
    }
    if (output.headers["content-disposition"] !== void 0) {
      contents.ContentDisposition = output.headers["content-disposition"];
    }
    if (output.headers["content-encoding"] !== void 0) {
      contents.ContentEncoding = output.headers["content-encoding"];
    }
    if (output.headers["content-language"] !== void 0) {
      contents.ContentLanguage = output.headers["content-language"];
    }
    if (output.headers["content-type"] !== void 0) {
      contents.ContentType = output.headers["content-type"];
    }
    if (output.headers["expires"] !== void 0) {
      contents.Expires = new Date(output.headers["expires"]);
    }
    if (output.headers["x-amz-website-redirect-location"] !== void 0) {
      contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-storage-class"] !== void 0) {
      contents.StorageClass = output.headers["x-amz-storage-class"];
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    if (output.headers["x-amz-replication-status"] !== void 0) {
      contents.ReplicationStatus = output.headers["x-amz-replication-status"];
    }
    if (output.headers["x-amz-mp-parts-count"] !== void 0) {
      contents.PartsCount = parseInt(output.headers["x-amz-mp-parts-count"], 10);
    }
    if (output.headers["x-amz-object-lock-mode"] !== void 0) {
      contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
    }
    if (output.headers["x-amz-object-lock-retain-until-date"] !== void 0) {
      contents.ObjectLockRetainUntilDate = new Date(output.headers["x-amz-object-lock-retain-until-date"]);
    }
    if (output.headers["x-amz-object-lock-legal-hold"] !== void 0) {
      contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
    }
    Object.keys(output.headers).forEach((header) => {
      if (contents.Metadata === void 0) {
        contents.Metadata = {};
      }
      if (header.startsWith("x-amz-meta-")) {
        contents.Metadata[header.substring(11)] = output.headers[header];
      }
    });
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlHeadObjectCommand = deserializeAws_restXmlHeadObjectCommand;
  var deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        response = {
          ...await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AnalyticsConfigurationList: void 0,
      ContinuationToken: void 0,
      IsTruncated: void 0,
      NextContinuationToken: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.AnalyticsConfiguration === "") {
      contents.AnalyticsConfigurationList = [];
    }
    if (data["AnalyticsConfiguration"] !== void 0) {
      contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(smithy_client_1.getArrayIfSingleItem(data["AnalyticsConfiguration"]), context);
    }
    if (data["ContinuationToken"] !== void 0) {
      contents.ContinuationToken = data["ContinuationToken"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["NextContinuationToken"] !== void 0) {
      contents.NextContinuationToken = data["NextContinuationToken"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand;
  var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ContinuationToken: void 0,
      IntelligentTieringConfigurationList: void 0,
      IsTruncated: void 0,
      NextContinuationToken: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["ContinuationToken"] !== void 0) {
      contents.ContinuationToken = data["ContinuationToken"];
    }
    if (data.IntelligentTieringConfiguration === "") {
      contents.IntelligentTieringConfigurationList = [];
    }
    if (data["IntelligentTieringConfiguration"] !== void 0) {
      contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(smithy_client_1.getArrayIfSingleItem(data["IntelligentTieringConfiguration"]), context);
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["NextContinuationToken"] !== void 0) {
      contents.NextContinuationToken = data["NextContinuationToken"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;
  var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ContinuationToken: void 0,
      InventoryConfigurationList: void 0,
      IsTruncated: void 0,
      NextContinuationToken: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["ContinuationToken"] !== void 0) {
      contents.ContinuationToken = data["ContinuationToken"];
    }
    if (data.InventoryConfiguration === "") {
      contents.InventoryConfigurationList = [];
    }
    if (data["InventoryConfiguration"] !== void 0) {
      contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(smithy_client_1.getArrayIfSingleItem(data["InventoryConfiguration"]), context);
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["NextContinuationToken"] !== void 0) {
      contents.NextContinuationToken = data["NextContinuationToken"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = deserializeAws_restXmlListBucketInventoryConfigurationsCommand;
  var deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      ContinuationToken: void 0,
      IsTruncated: void 0,
      MetricsConfigurationList: void 0,
      NextContinuationToken: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["ContinuationToken"] !== void 0) {
      contents.ContinuationToken = data["ContinuationToken"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data.MetricsConfiguration === "") {
      contents.MetricsConfigurationList = [];
    }
    if (data["MetricsConfiguration"] !== void 0) {
      contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(smithy_client_1.getArrayIfSingleItem(data["MetricsConfiguration"]), context);
    }
    if (data["NextContinuationToken"] !== void 0) {
      contents.NextContinuationToken = data["NextContinuationToken"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = deserializeAws_restXmlListBucketMetricsConfigurationsCommand;
  var deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListBucketsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListBucketsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Buckets: void 0,
      Owner: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.Buckets === "") {
      contents.Buckets = [];
    }
    if (data["Buckets"] !== void 0 && data["Buckets"]["Bucket"] !== void 0) {
      contents.Buckets = deserializeAws_restXmlBuckets(smithy_client_1.getArrayIfSingleItem(data["Buckets"]["Bucket"]), context);
    }
    if (data["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListBucketsCommand = deserializeAws_restXmlListBucketsCommand;
  var deserializeAws_restXmlListBucketsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Bucket: void 0,
      CommonPrefixes: void 0,
      Delimiter: void 0,
      EncodingType: void 0,
      IsTruncated: void 0,
      KeyMarker: void 0,
      MaxUploads: void 0,
      NextKeyMarker: void 0,
      NextUploadIdMarker: void 0,
      Prefix: void 0,
      UploadIdMarker: void 0,
      Uploads: void 0
    };
    const data = await parseBody(output.body, context);
    if (data["Bucket"] !== void 0) {
      contents.Bucket = data["Bucket"];
    }
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    }
    if (data["CommonPrefixes"] !== void 0) {
      contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data["CommonPrefixes"]), context);
    }
    if (data["Delimiter"] !== void 0) {
      contents.Delimiter = data["Delimiter"];
    }
    if (data["EncodingType"] !== void 0) {
      contents.EncodingType = data["EncodingType"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["KeyMarker"] !== void 0) {
      contents.KeyMarker = data["KeyMarker"];
    }
    if (data["MaxUploads"] !== void 0) {
      contents.MaxUploads = parseInt(data["MaxUploads"]);
    }
    if (data["NextKeyMarker"] !== void 0) {
      contents.NextKeyMarker = data["NextKeyMarker"];
    }
    if (data["NextUploadIdMarker"] !== void 0) {
      contents.NextUploadIdMarker = data["NextUploadIdMarker"];
    }
    if (data["Prefix"] !== void 0) {
      contents.Prefix = data["Prefix"];
    }
    if (data["UploadIdMarker"] !== void 0) {
      contents.UploadIdMarker = data["UploadIdMarker"];
    }
    if (data.Upload === "") {
      contents.Uploads = [];
    }
    if (data["Upload"] !== void 0) {
      contents.Uploads = deserializeAws_restXmlMultipartUploadList(smithy_client_1.getArrayIfSingleItem(data["Upload"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListMultipartUploadsCommand = deserializeAws_restXmlListMultipartUploadsCommand;
  var deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListObjectsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      CommonPrefixes: void 0,
      Contents: void 0,
      Delimiter: void 0,
      EncodingType: void 0,
      IsTruncated: void 0,
      Marker: void 0,
      MaxKeys: void 0,
      Name: void 0,
      NextMarker: void 0,
      Prefix: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    }
    if (data["CommonPrefixes"] !== void 0) {
      contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data["CommonPrefixes"]), context);
    }
    if (data.Contents === "") {
      contents.Contents = [];
    }
    if (data["Contents"] !== void 0) {
      contents.Contents = deserializeAws_restXmlObjectList(smithy_client_1.getArrayIfSingleItem(data["Contents"]), context);
    }
    if (data["Delimiter"] !== void 0) {
      contents.Delimiter = data["Delimiter"];
    }
    if (data["EncodingType"] !== void 0) {
      contents.EncodingType = data["EncodingType"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["Marker"] !== void 0) {
      contents.Marker = data["Marker"];
    }
    if (data["MaxKeys"] !== void 0) {
      contents.MaxKeys = parseInt(data["MaxKeys"]);
    }
    if (data["Name"] !== void 0) {
      contents.Name = data["Name"];
    }
    if (data["NextMarker"] !== void 0) {
      contents.NextMarker = data["NextMarker"];
    }
    if (data["Prefix"] !== void 0) {
      contents.Prefix = data["Prefix"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListObjectsCommand = deserializeAws_restXmlListObjectsCommand;
  var deserializeAws_restXmlListObjectsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        response = {
          ...await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListObjectsV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListObjectsV2CommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      CommonPrefixes: void 0,
      Contents: void 0,
      ContinuationToken: void 0,
      Delimiter: void 0,
      EncodingType: void 0,
      IsTruncated: void 0,
      KeyCount: void 0,
      MaxKeys: void 0,
      Name: void 0,
      NextContinuationToken: void 0,
      Prefix: void 0,
      StartAfter: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    }
    if (data["CommonPrefixes"] !== void 0) {
      contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data["CommonPrefixes"]), context);
    }
    if (data.Contents === "") {
      contents.Contents = [];
    }
    if (data["Contents"] !== void 0) {
      contents.Contents = deserializeAws_restXmlObjectList(smithy_client_1.getArrayIfSingleItem(data["Contents"]), context);
    }
    if (data["ContinuationToken"] !== void 0) {
      contents.ContinuationToken = data["ContinuationToken"];
    }
    if (data["Delimiter"] !== void 0) {
      contents.Delimiter = data["Delimiter"];
    }
    if (data["EncodingType"] !== void 0) {
      contents.EncodingType = data["EncodingType"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["KeyCount"] !== void 0) {
      contents.KeyCount = parseInt(data["KeyCount"]);
    }
    if (data["MaxKeys"] !== void 0) {
      contents.MaxKeys = parseInt(data["MaxKeys"]);
    }
    if (data["Name"] !== void 0) {
      contents.Name = data["Name"];
    }
    if (data["NextContinuationToken"] !== void 0) {
      contents.NextContinuationToken = data["NextContinuationToken"];
    }
    if (data["Prefix"] !== void 0) {
      contents.Prefix = data["Prefix"];
    }
    if (data["StartAfter"] !== void 0) {
      contents.StartAfter = data["StartAfter"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListObjectsV2Command = deserializeAws_restXmlListObjectsV2Command;
  var deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        response = {
          ...await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListObjectVersionsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      CommonPrefixes: void 0,
      DeleteMarkers: void 0,
      Delimiter: void 0,
      EncodingType: void 0,
      IsTruncated: void 0,
      KeyMarker: void 0,
      MaxKeys: void 0,
      Name: void 0,
      NextKeyMarker: void 0,
      NextVersionIdMarker: void 0,
      Prefix: void 0,
      VersionIdMarker: void 0,
      Versions: void 0
    };
    const data = await parseBody(output.body, context);
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    }
    if (data["CommonPrefixes"] !== void 0) {
      contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data["CommonPrefixes"]), context);
    }
    if (data.DeleteMarker === "") {
      contents.DeleteMarkers = [];
    }
    if (data["DeleteMarker"] !== void 0) {
      contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(smithy_client_1.getArrayIfSingleItem(data["DeleteMarker"]), context);
    }
    if (data["Delimiter"] !== void 0) {
      contents.Delimiter = data["Delimiter"];
    }
    if (data["EncodingType"] !== void 0) {
      contents.EncodingType = data["EncodingType"];
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["KeyMarker"] !== void 0) {
      contents.KeyMarker = data["KeyMarker"];
    }
    if (data["MaxKeys"] !== void 0) {
      contents.MaxKeys = parseInt(data["MaxKeys"]);
    }
    if (data["Name"] !== void 0) {
      contents.Name = data["Name"];
    }
    if (data["NextKeyMarker"] !== void 0) {
      contents.NextKeyMarker = data["NextKeyMarker"];
    }
    if (data["NextVersionIdMarker"] !== void 0) {
      contents.NextVersionIdMarker = data["NextVersionIdMarker"];
    }
    if (data["Prefix"] !== void 0) {
      contents.Prefix = data["Prefix"];
    }
    if (data["VersionIdMarker"] !== void 0) {
      contents.VersionIdMarker = data["VersionIdMarker"];
    }
    if (data.Version === "") {
      contents.Versions = [];
    }
    if (data["Version"] !== void 0) {
      contents.Versions = deserializeAws_restXmlObjectVersionList(smithy_client_1.getArrayIfSingleItem(data["Version"]), context);
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListObjectVersionsCommand = deserializeAws_restXmlListObjectVersionsCommand;
  var deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlListPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlListPartsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      AbortDate: void 0,
      AbortRuleId: void 0,
      Bucket: void 0,
      Initiator: void 0,
      IsTruncated: void 0,
      Key: void 0,
      MaxParts: void 0,
      NextPartNumberMarker: void 0,
      Owner: void 0,
      PartNumberMarker: void 0,
      Parts: void 0,
      RequestCharged: void 0,
      StorageClass: void 0,
      UploadId: void 0
    };
    if (output.headers["x-amz-abort-date"] !== void 0) {
      contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
    }
    if (output.headers["x-amz-abort-rule-id"] !== void 0) {
      contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    if (data["Bucket"] !== void 0) {
      contents.Bucket = data["Bucket"];
    }
    if (data["Initiator"] !== void 0) {
      contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"], context);
    }
    if (data["IsTruncated"] !== void 0) {
      contents.IsTruncated = data["IsTruncated"] == "true";
    }
    if (data["Key"] !== void 0) {
      contents.Key = data["Key"];
    }
    if (data["MaxParts"] !== void 0) {
      contents.MaxParts = parseInt(data["MaxParts"]);
    }
    if (data["NextPartNumberMarker"] !== void 0) {
      contents.NextPartNumberMarker = data["NextPartNumberMarker"];
    }
    if (data["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
    }
    if (data["PartNumberMarker"] !== void 0) {
      contents.PartNumberMarker = data["PartNumberMarker"];
    }
    if (data.Part === "") {
      contents.Parts = [];
    }
    if (data["Part"] !== void 0) {
      contents.Parts = deserializeAws_restXmlParts(smithy_client_1.getArrayIfSingleItem(data["Part"]), context);
    }
    if (data["StorageClass"] !== void 0) {
      contents.StorageClass = data["StorageClass"];
    }
    if (data["UploadId"] !== void 0) {
      contents.UploadId = data["UploadId"];
    }
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlListPartsCommand = deserializeAws_restXmlListPartsCommand;
  var deserializeAws_restXmlListPartsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = deserializeAws_restXmlPutBucketAccelerateConfigurationCommand;
  var deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketAclCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketAclCommand = deserializeAws_restXmlPutBucketAclCommand;
  var deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand;
  var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketCorsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketCorsCommand = deserializeAws_restXmlPutBucketCorsCommand;
  var deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketEncryptionCommand = deserializeAws_restXmlPutBucketEncryptionCommand;
  var deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;
  var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = deserializeAws_restXmlPutBucketInventoryConfigurationCommand;
  var deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = deserializeAws_restXmlPutBucketLifecycleConfigurationCommand;
  var deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketLoggingCommand = deserializeAws_restXmlPutBucketLoggingCommand;
  var deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = deserializeAws_restXmlPutBucketMetricsConfigurationCommand;
  var deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = deserializeAws_restXmlPutBucketNotificationConfigurationCommand;
  var deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketOwnershipControlsCommand = deserializeAws_restXmlPutBucketOwnershipControlsCommand;
  var deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketPolicyCommand = deserializeAws_restXmlPutBucketPolicyCommand;
  var deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketReplicationCommand = deserializeAws_restXmlPutBucketReplicationCommand;
  var deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketRequestPaymentCommand = deserializeAws_restXmlPutBucketRequestPaymentCommand;
  var deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketTaggingCommand = deserializeAws_restXmlPutBucketTaggingCommand;
  var deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketVersioningCommand = deserializeAws_restXmlPutBucketVersioningCommand;
  var deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutBucketWebsiteCommand = deserializeAws_restXmlPutBucketWebsiteCommand;
  var deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      BucketKeyEnabled: void 0,
      ETag: void 0,
      Expiration: void 0,
      RequestCharged: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSEncryptionContext: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0,
      VersionId: void 0
    };
    if (output.headers["x-amz-expiration"] !== void 0) {
      contents.Expiration = output.headers["x-amz-expiration"];
    }
    if (output.headers["etag"] !== void 0) {
      contents.ETag = output.headers["etag"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-context"] !== void 0) {
      contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectCommand = deserializeAws_restXmlPutObjectCommand;
  var deserializeAws_restXmlPutObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectAclCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectAclCommand = deserializeAws_restXmlPutObjectAclCommand;
  var deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        response = {
          ...await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectLegalHoldCommand = deserializeAws_restXmlPutObjectLegalHoldCommand;
  var deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectLockConfigurationCommand = deserializeAws_restXmlPutObjectLockConfigurationCommand;
  var deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectRetentionCommand = deserializeAws_restXmlPutObjectRetentionCommand;
  var deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      VersionId: void 0
    };
    if (output.headers["x-amz-version-id"] !== void 0) {
      contents.VersionId = output.headers["x-amz-version-id"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutObjectTaggingCommand = deserializeAws_restXmlPutObjectTaggingCommand;
  var deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output)
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlPutPublicAccessBlockCommand = deserializeAws_restXmlPutPublicAccessBlockCommand;
  var deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlRestoreObjectCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      RequestCharged: void 0,
      RestoreOutputPath: void 0
    };
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    if (output.headers["x-amz-restore-output-path"] !== void 0) {
      contents.RestoreOutputPath = output.headers["x-amz-restore-output-path"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlRestoreObjectCommand = deserializeAws_restXmlRestoreObjectCommand;
  var deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectAlreadyInActiveTierError":
      case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
        response = {
          ...await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context),
          name: errorCode,
          $metadata: deserializeMetadata(output)
        };
        break;
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlSelectObjectContentCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      Payload: void 0
    };
    const data = context.eventStreamMarshaller.deserialize(output.body, async (event) => {
      const eventName = Object.keys(event)[0];
      const eventHeaders = Object.entries(event[eventName].headers).reduce((accummulator, curr) => {
        accummulator[curr[0]] = curr[1].value;
        return accummulator;
      }, {});
      const eventMessage = {
        headers: eventHeaders,
        body: event[eventName].body
      };
      const parsedEvent = {
        [eventName]: eventMessage
      };
      return await deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context);
    });
    contents.Payload = data;
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlSelectObjectContentCommand = deserializeAws_restXmlSelectObjectContentCommand;
  var deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlUploadPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlUploadPartCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      BucketKeyEnabled: void 0,
      ETag: void 0,
      RequestCharged: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0
    };
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["etag"] !== void 0) {
      contents.ETag = output.headers["etag"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    await collectBody(output.body, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlUploadPartCommand = deserializeAws_restXmlUploadPartCommand;
  var deserializeAws_restXmlUploadPartCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return deserializeAws_restXmlUploadPartCopyCommandError(output, context);
    }
    const contents = {
      $metadata: deserializeMetadata(output),
      BucketKeyEnabled: void 0,
      CopyPartResult: void 0,
      CopySourceVersionId: void 0,
      RequestCharged: void 0,
      SSECustomerAlgorithm: void 0,
      SSECustomerKeyMD5: void 0,
      SSEKMSKeyId: void 0,
      ServerSideEncryption: void 0
    };
    if (output.headers["x-amz-copy-source-version-id"] !== void 0) {
      contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
    }
    if (output.headers["x-amz-server-side-encryption"] !== void 0) {
      contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== void 0) {
      contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
    }
    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== void 0) {
      contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
    }
    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== void 0) {
      contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
    }
    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== void 0) {
      contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
    }
    if (output.headers["x-amz-request-charged"] !== void 0) {
      contents.RequestCharged = output.headers["x-amz-request-charged"];
    }
    const data = await parseBody(output.body, context);
    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);
    return Promise.resolve(contents);
  };
  exports2.deserializeAws_restXmlUploadPartCopyCommand = deserializeAws_restXmlUploadPartCopyCommand;
  var deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseBody(output.body, context)
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      default:
        const parsedBody = parsedOutput.body;
        errorCode = parsedBody.code || parsedBody.Code || errorCode;
        response = {
          ...parsedBody,
          name: `${errorCode}`,
          message: parsedBody.message || parsedBody.Message || errorCode,
          $fault: "client",
          $metadata: deserializeMetadata(output)
        };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
  };
  var deserializeAws_restXmlSelectObjectContentEventStream_event = async (output, context) => {
    if (output["Records"] !== void 0) {
      return {
        Records: await deserializeAws_restXmlRecordsEvent_event(output["Records"], context)
      };
    }
    if (output["Stats"] !== void 0) {
      return {
        Stats: await deserializeAws_restXmlStatsEvent_event(output["Stats"], context)
      };
    }
    if (output["Progress"] !== void 0) {
      return {
        Progress: await deserializeAws_restXmlProgressEvent_event(output["Progress"], context)
      };
    }
    if (output["Cont"] !== void 0) {
      return {
        Cont: await deserializeAws_restXmlContinuationEvent_event(output["Cont"], context)
      };
    }
    if (output["End"] !== void 0) {
      return {
        End: await deserializeAws_restXmlEndEvent_event(output["End"], context)
      };
    }
    return {$unknown: output};
  };
  var deserializeAws_restXmlContinuationEvent_event = async (output, context) => {
    let contents = {};
    return contents;
  };
  var deserializeAws_restXmlEndEvent_event = async (output, context) => {
    let contents = {};
    return contents;
  };
  var deserializeAws_restXmlProgressEvent_event = async (output, context) => {
    let contents = {};
    contents.Details = await parseBody(output.body, context);
    return contents;
  };
  var deserializeAws_restXmlRecordsEvent_event = async (output, context) => {
    let contents = {};
    contents.Payload = output.body;
    return contents;
  };
  var deserializeAws_restXmlStatsEvent_event = async (output, context) => {
    let contents = {};
    contents.Details = await parseBody(output.body, context);
    return contents;
  };
  var deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = {
      name: "BucketAlreadyExists",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {
    const contents = {
      name: "BucketAlreadyOwnedByYou",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {
    const contents = {
      name: "InvalidObjectState",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput),
      AccessTier: void 0,
      StorageClass: void 0
    };
    const data = parsedOutput.body;
    if (data["AccessTier"] !== void 0) {
      contents.AccessTier = data["AccessTier"];
    }
    if (data["StorageClass"] !== void 0) {
      contents.StorageClass = data["StorageClass"];
    }
    return contents;
  };
  var deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {
    const contents = {
      name: "NoSuchBucket",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {
    const contents = {
      name: "NoSuchKey",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {
    const contents = {
      name: "NoSuchUpload",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {
    const contents = {
      name: "ObjectAlreadyInActiveTierError",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {
    const contents = {
      name: "ObjectNotInActiveTierError",
      $fault: "client",
      $metadata: deserializeMetadata(parsedOutput)
    };
    const data = parsedOutput.body;
    return contents;
  };
  var serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation !== void 0) {
      const node = new xml_builder_1.XmlNode("DaysAfterInitiation").addChildNode(new xml_builder_1.XmlText(String(input.DaysAfterInitiation))).withName("DaysAfterInitiation");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAccelerateConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AccelerateConfiguration");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketAccelerateStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAccessControlPolicy = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AccessControlPolicy");
    if (input.Grants !== void 0) {
      const nodes = serializeAws_restXmlGrants(input.Grants, context);
      const containerNode = new xml_builder_1.XmlNode("AccessControlList");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Owner !== void 0) {
      const node = serializeAws_restXmlOwner(input.Owner, context).withName("Owner");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAccessControlTranslation = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AccessControlTranslation");
    if (input.Owner !== void 0) {
      const node = new xml_builder_1.XmlNode("OwnerOverride").addChildNode(new xml_builder_1.XmlText(input.Owner)).withName("Owner");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAllowedHeaders = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("AllowedHeader").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("member");
    });
  };
  var serializeAws_restXmlAllowedMethods = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("AllowedMethod").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("member");
    });
  };
  var serializeAws_restXmlAllowedOrigins = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("AllowedOrigin").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("member");
    });
  };
  var serializeAws_restXmlAnalyticsAndOperator = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AnalyticsAndOperator");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.Tags, context);
      nodes.map((node) => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlAnalyticsConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AnalyticsConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("AnalyticsId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis !== void 0) {
      const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAnalyticsExportDestination = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AnalyticsExportDestination");
    if (input.S3BucketDestination !== void 0) {
      const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlAnalyticsFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AnalyticsFilter");
    models_0_1.AnalyticsFilter.visit(input, {
      Prefix: (value) => {
        const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(value)).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: (value) => {
        const node = serializeAws_restXmlTag(value, context).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: (value) => {
        const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  var serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AnalyticsS3BucketDestination");
    if (input.Format !== void 0) {
      const node = new xml_builder_1.XmlNode("AnalyticsS3ExportFileFormat").addChildNode(new xml_builder_1.XmlText(input.Format)).withName("Format");
      bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId !== void 0) {
      const node = new xml_builder_1.XmlNode("AccountId").addChildNode(new xml_builder_1.XmlText(input.BucketAccountId)).withName("BucketAccountId");
      bodyNode.addChildNode(node);
    }
    if (input.Bucket !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketName").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("BucketLifecycleConfiguration");
    if (input.Rules !== void 0) {
      const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);
      nodes.map((node) => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlBucketLoggingStatus = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("BucketLoggingStatus");
    if (input.LoggingEnabled !== void 0) {
      const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCompletedMultipartUpload = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CompletedMultipartUpload");
    if (input.Parts !== void 0) {
      const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);
      nodes.map((node) => {
        node = node.withName("Part");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlCompletedPart = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CompletedPart");
    if (input.ETag !== void 0) {
      const node = new xml_builder_1.XmlNode("ETag").addChildNode(new xml_builder_1.XmlText(input.ETag)).withName("ETag");
      bodyNode.addChildNode(node);
    }
    if (input.PartNumber !== void 0) {
      const node = new xml_builder_1.XmlNode("PartNumber").addChildNode(new xml_builder_1.XmlText(String(input.PartNumber))).withName("PartNumber");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCompletedPartList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlCompletedPart(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlCondition = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Condition");
    if (input.HttpErrorCodeReturnedEquals !== void 0) {
      const node = new xml_builder_1.XmlNode("HttpErrorCodeReturnedEquals").addChildNode(new xml_builder_1.XmlText(input.HttpErrorCodeReturnedEquals)).withName("HttpErrorCodeReturnedEquals");
      bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals !== void 0) {
      const node = new xml_builder_1.XmlNode("KeyPrefixEquals").addChildNode(new xml_builder_1.XmlText(input.KeyPrefixEquals)).withName("KeyPrefixEquals");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCORSConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CORSConfiguration");
    if (input.CORSRules !== void 0) {
      const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);
      nodes.map((node) => {
        node = node.withName("CORSRule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlCORSRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CORSRule");
    if (input.AllowedHeaders !== void 0) {
      const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);
      nodes.map((node) => {
        node = node.withName("AllowedHeader");
        bodyNode.addChildNode(node);
      });
    }
    if (input.AllowedMethods !== void 0) {
      const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);
      nodes.map((node) => {
        node = node.withName("AllowedMethod");
        bodyNode.addChildNode(node);
      });
    }
    if (input.AllowedOrigins !== void 0) {
      const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);
      nodes.map((node) => {
        node = node.withName("AllowedOrigin");
        bodyNode.addChildNode(node);
      });
    }
    if (input.ExposeHeaders !== void 0) {
      const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);
      nodes.map((node) => {
        node = node.withName("ExposeHeader");
        bodyNode.addChildNode(node);
      });
    }
    if (input.MaxAgeSeconds !== void 0) {
      const node = new xml_builder_1.XmlNode("MaxAgeSeconds").addChildNode(new xml_builder_1.XmlText(String(input.MaxAgeSeconds))).withName("MaxAgeSeconds");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCORSRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlCORSRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlCreateBucketConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CreateBucketConfiguration");
    if (input.LocationConstraint !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketLocationConstraint").addChildNode(new xml_builder_1.XmlText(input.LocationConstraint)).withName("LocationConstraint");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCSVInput = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CSVInput");
    if (input.FileHeaderInfo !== void 0) {
      const node = new xml_builder_1.XmlNode("FileHeaderInfo").addChildNode(new xml_builder_1.XmlText(input.FileHeaderInfo)).withName("FileHeaderInfo");
      bodyNode.addChildNode(node);
    }
    if (input.Comments !== void 0) {
      const node = new xml_builder_1.XmlNode("Comments").addChildNode(new xml_builder_1.XmlText(input.Comments)).withName("Comments");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter !== void 0) {
      const node = new xml_builder_1.XmlNode("QuoteEscapeCharacter").addChildNode(new xml_builder_1.XmlText(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("RecordDelimiter").addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("FieldDelimiter").addChildNode(new xml_builder_1.XmlText(input.FieldDelimiter)).withName("FieldDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter !== void 0) {
      const node = new xml_builder_1.XmlNode("QuoteCharacter").addChildNode(new xml_builder_1.XmlText(input.QuoteCharacter)).withName("QuoteCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("AllowQuotedRecordDelimiter").addChildNode(new xml_builder_1.XmlText(String(input.AllowQuotedRecordDelimiter))).withName("AllowQuotedRecordDelimiter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlCSVOutput = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CSVOutput");
    if (input.QuoteFields !== void 0) {
      const node = new xml_builder_1.XmlNode("QuoteFields").addChildNode(new xml_builder_1.XmlText(input.QuoteFields)).withName("QuoteFields");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter !== void 0) {
      const node = new xml_builder_1.XmlNode("QuoteEscapeCharacter").addChildNode(new xml_builder_1.XmlText(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("RecordDelimiter").addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("FieldDelimiter").addChildNode(new xml_builder_1.XmlText(input.FieldDelimiter)).withName("FieldDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter !== void 0) {
      const node = new xml_builder_1.XmlNode("QuoteCharacter").addChildNode(new xml_builder_1.XmlText(input.QuoteCharacter)).withName("QuoteCharacter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlDefaultRetention = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("DefaultRetention");
    if (input.Mode !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectLockRetentionMode").addChildNode(new xml_builder_1.XmlText(input.Mode)).withName("Mode");
      bodyNode.addChildNode(node);
    }
    if (input.Days !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.Years !== void 0) {
      const node = new xml_builder_1.XmlNode("Years").addChildNode(new xml_builder_1.XmlText(String(input.Years))).withName("Years");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlDelete = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Delete");
    if (input.Objects !== void 0) {
      const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);
      nodes.map((node) => {
        node = node.withName("Object");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Quiet !== void 0) {
      const node = new xml_builder_1.XmlNode("Quiet").addChildNode(new xml_builder_1.XmlText(String(input.Quiet))).withName("Quiet");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlDeleteMarkerReplication = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("DeleteMarkerReplication");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("DeleteMarkerReplicationStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlDestination = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Destination");
    if (input.Bucket !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketName").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Account !== void 0) {
      const node = new xml_builder_1.XmlNode("AccountId").addChildNode(new xml_builder_1.XmlText(input.Account)).withName("Account");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== void 0) {
      const node = new xml_builder_1.XmlNode("StorageClass").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation !== void 0) {
      const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
      bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration !== void 0) {
      const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
      bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime !== void 0) {
      const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
      bodyNode.addChildNode(node);
    }
    if (input.Metrics !== void 0) {
      const node = serializeAws_restXmlMetrics(input.Metrics, context).withName("Metrics");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlEncryption = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Encryption");
    if (input.EncryptionType !== void 0) {
      const node = new xml_builder_1.XmlNode("ServerSideEncryption").addChildNode(new xml_builder_1.XmlText(input.EncryptionType)).withName("EncryptionType");
      bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId !== void 0) {
      const node = new xml_builder_1.XmlNode("SSEKMSKeyId").addChildNode(new xml_builder_1.XmlText(input.KMSKeyId)).withName("KMSKeyId");
      bodyNode.addChildNode(node);
    }
    if (input.KMSContext !== void 0) {
      const node = new xml_builder_1.XmlNode("KMSContext").addChildNode(new xml_builder_1.XmlText(input.KMSContext)).withName("KMSContext");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlEncryptionConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplicaKmsKeyID").addChildNode(new xml_builder_1.XmlText(input.ReplicaKmsKeyID)).withName("ReplicaKmsKeyID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlErrorDocument = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ErrorDocument");
    if (input.Key !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectKey").addChildNode(new xml_builder_1.XmlText(input.Key)).withName("Key");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlEventList = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("Event").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("member");
    });
  };
  var serializeAws_restXmlExistingObjectReplication = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ExistingObjectReplication");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ExistingObjectReplicationStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlExposeHeaders = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("ExposeHeader").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("member");
    });
  };
  var serializeAws_restXmlFilterRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("FilterRule");
    if (input.Name !== void 0) {
      const node = new xml_builder_1.XmlNode("FilterRuleName").addChildNode(new xml_builder_1.XmlText(input.Name)).withName("Name");
      bodyNode.addChildNode(node);
    }
    if (input.Value !== void 0) {
      const node = new xml_builder_1.XmlNode("FilterRuleValue").addChildNode(new xml_builder_1.XmlText(input.Value)).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlFilterRuleList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlFilterRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlGlacierJobParameters = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("GlacierJobParameters");
    if (input.Tier !== void 0) {
      const node = new xml_builder_1.XmlNode("Tier").addChildNode(new xml_builder_1.XmlText(input.Tier)).withName("Tier");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlGrant = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Grant");
    if (input.Grantee !== void 0) {
      const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
      bodyNode.addChildNode(node);
    }
    if (input.Permission !== void 0) {
      const node = new xml_builder_1.XmlNode("Permission").addChildNode(new xml_builder_1.XmlText(input.Permission)).withName("Permission");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlGrantee = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Grantee");
    if (input.DisplayName !== void 0) {
      const node = new xml_builder_1.XmlNode("DisplayName").addChildNode(new xml_builder_1.XmlText(input.DisplayName)).withName("DisplayName");
      bodyNode.addChildNode(node);
    }
    if (input.EmailAddress !== void 0) {
      const node = new xml_builder_1.XmlNode("EmailAddress").addChildNode(new xml_builder_1.XmlText(input.EmailAddress)).withName("EmailAddress");
      bodyNode.addChildNode(node);
    }
    if (input.ID !== void 0) {
      const node = new xml_builder_1.XmlNode("ID").addChildNode(new xml_builder_1.XmlText(input.ID)).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.URI !== void 0) {
      const node = new xml_builder_1.XmlNode("URI").addChildNode(new xml_builder_1.XmlText(input.URI)).withName("URI");
      bodyNode.addChildNode(node);
    }
    if (input.Type !== void 0) {
      bodyNode.addAttribute("xsi:type", input.Type);
    }
    return bodyNode;
  };
  var serializeAws_restXmlGrants = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlGrant(entry, context);
      return node.withName("Grant");
    });
  };
  var serializeAws_restXmlIndexDocument = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("IndexDocument");
    if (input.Suffix !== void 0) {
      const node = new xml_builder_1.XmlNode("Suffix").addChildNode(new xml_builder_1.XmlText(input.Suffix)).withName("Suffix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInputSerialization = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InputSerialization");
    if (input.CSV !== void 0) {
      const node = serializeAws_restXmlCSVInput(input.CSV, context).withName("CSV");
      bodyNode.addChildNode(node);
    }
    if (input.CompressionType !== void 0) {
      const node = new xml_builder_1.XmlNode("CompressionType").addChildNode(new xml_builder_1.XmlText(input.CompressionType)).withName("CompressionType");
      bodyNode.addChildNode(node);
    }
    if (input.JSON !== void 0) {
      const node = serializeAws_restXmlJSONInput(input.JSON, context).withName("JSON");
      bodyNode.addChildNode(node);
    }
    if (input.Parquet !== void 0) {
      const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName("Parquet");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringAndOperator");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.Tags, context);
      nodes.map((node) => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("IntelligentTieringId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("IntelligentTieringStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Tierings !== void 0) {
      const nodes = serializeAws_restXmlTieringList(input.Tierings, context);
      nodes.map((node) => {
        node = node.withName("Tiering");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlIntelligentTieringFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringFilter");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tag !== void 0) {
      const node = serializeAws_restXmlTag(input.Tag, context).withName("Tag");
      bodyNode.addChildNode(node);
    }
    if (input.And !== void 0) {
      const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName("And");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventoryConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventoryConfiguration");
    if (input.Destination !== void 0) {
      const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName("Destination");
      bodyNode.addChildNode(node);
    }
    if (input.IsEnabled !== void 0) {
      const node = new xml_builder_1.XmlNode("IsEnabled").addChildNode(new xml_builder_1.XmlText(String(input.IsEnabled))).withName("IsEnabled");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("InventoryId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions !== void 0) {
      const node = new xml_builder_1.XmlNode("InventoryIncludedObjectVersions").addChildNode(new xml_builder_1.XmlText(input.IncludedObjectVersions)).withName("IncludedObjectVersions");
      bodyNode.addChildNode(node);
    }
    if (input.OptionalFields !== void 0) {
      const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);
      const containerNode = new xml_builder_1.XmlNode("OptionalFields");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Schedule !== void 0) {
      const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName("Schedule");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventoryDestination = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventoryDestination");
    if (input.S3BucketDestination !== void 0) {
      const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventoryEncryption = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventoryEncryption");
    if (input.SSES3 !== void 0) {
      const node = serializeAws_restXmlSSES3(input.SSES3, context).withName("SSE-S3");
      bodyNode.addChildNode(node);
    }
    if (input.SSEKMS !== void 0) {
      const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName("SSE-KMS");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventoryFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventoryFilter");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventoryOptionalFields = (input, context) => {
    return input.map((entry) => {
      const node = new xml_builder_1.XmlNode("InventoryOptionalField").addChildNode(new xml_builder_1.XmlText(entry));
      return node.withName("Field");
    });
  };
  var serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventoryS3BucketDestination");
    if (input.AccountId !== void 0) {
      const node = new xml_builder_1.XmlNode("AccountId").addChildNode(new xml_builder_1.XmlText(input.AccountId)).withName("AccountId");
      bodyNode.addChildNode(node);
    }
    if (input.Bucket !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketName").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Format !== void 0) {
      const node = new xml_builder_1.XmlNode("InventoryFormat").addChildNode(new xml_builder_1.XmlText(input.Format)).withName("Format");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Encryption !== void 0) {
      const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName("Encryption");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlInventorySchedule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("InventorySchedule");
    if (input.Frequency !== void 0) {
      const node = new xml_builder_1.XmlNode("InventoryFrequency").addChildNode(new xml_builder_1.XmlText(input.Frequency)).withName("Frequency");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlJSONInput = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("JSONInput");
    if (input.Type !== void 0) {
      const node = new xml_builder_1.XmlNode("JSONType").addChildNode(new xml_builder_1.XmlText(input.Type)).withName("Type");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlJSONOutput = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("JSONOutput");
    if (input.RecordDelimiter !== void 0) {
      const node = new xml_builder_1.XmlNode("RecordDelimiter").addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter)).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LambdaFunctionConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("NotificationId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn !== void 0) {
      const node = new xml_builder_1.XmlNode("LambdaFunctionArn").addChildNode(new xml_builder_1.XmlText(input.LambdaFunctionArn)).withName("CloudFunction");
      bodyNode.addChildNode(node);
    }
    if (input.Events !== void 0) {
      const nodes = serializeAws_restXmlEventList(input.Events, context);
      nodes.map((node) => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlLifecycleExpiration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LifecycleExpiration");
    if (input.Date !== void 0) {
      const node = new xml_builder_1.XmlNode("Date").addChildNode(new xml_builder_1.XmlText(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
      bodyNode.addChildNode(node);
    }
    if (input.Days !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker !== void 0) {
      const node = new xml_builder_1.XmlNode("ExpiredObjectDeleteMarker").addChildNode(new xml_builder_1.XmlText(String(input.ExpiredObjectDeleteMarker))).withName("ExpiredObjectDeleteMarker");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlLifecycleRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LifecycleRule");
    if (input.Expiration !== void 0) {
      const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName("Expiration");
      bodyNode.addChildNode(node);
    }
    if (input.ID !== void 0) {
      const node = new xml_builder_1.XmlNode("ID").addChildNode(new xml_builder_1.XmlText(input.ID)).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ExpirationStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Transitions !== void 0) {
      const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);
      nodes.map((node) => {
        node = node.withName("Transition");
        bodyNode.addChildNode(node);
      });
    }
    if (input.NoncurrentVersionTransitions !== void 0) {
      const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
      nodes.map((node) => {
        node = node.withName("NoncurrentVersionTransition");
        bodyNode.addChildNode(node);
      });
    }
    if (input.NoncurrentVersionExpiration !== void 0) {
      const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
      bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload !== void 0) {
      const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleAndOperator");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.Tags, context);
      nodes.map((node) => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlLifecycleRuleFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleFilter");
    models_0_1.LifecycleRuleFilter.visit(input, {
      Prefix: (value) => {
        const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(value)).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: (value) => {
        const node = serializeAws_restXmlTag(value, context).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: (value) => {
        const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  var serializeAws_restXmlLifecycleRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlLifecycleRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlLoggingEnabled = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("LoggingEnabled");
    if (input.TargetBucket !== void 0) {
      const node = new xml_builder_1.XmlNode("TargetBucket").addChildNode(new xml_builder_1.XmlText(input.TargetBucket)).withName("TargetBucket");
      bodyNode.addChildNode(node);
    }
    if (input.TargetGrants !== void 0) {
      const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);
      const containerNode = new xml_builder_1.XmlNode("TargetGrants");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.TargetPrefix !== void 0) {
      const node = new xml_builder_1.XmlNode("TargetPrefix").addChildNode(new xml_builder_1.XmlText(input.TargetPrefix)).withName("TargetPrefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlMetadataEntry = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("MetadataEntry");
    if (input.Name !== void 0) {
      const node = new xml_builder_1.XmlNode("MetadataKey").addChildNode(new xml_builder_1.XmlText(input.Name)).withName("Name");
      bodyNode.addChildNode(node);
    }
    if (input.Value !== void 0) {
      const node = new xml_builder_1.XmlNode("MetadataValue").addChildNode(new xml_builder_1.XmlText(input.Value)).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlMetrics = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Metrics");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("MetricsStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.EventThreshold !== void 0) {
      const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlMetricsAndOperator = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("MetricsAndOperator");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.Tags, context);
      nodes.map((node) => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlMetricsConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("MetricsConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("MetricsId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlMetricsFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("MetricsFilter");
    models_0_1.MetricsFilter.visit(input, {
      Prefix: (value) => {
        const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(value)).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: (value) => {
        const node = serializeAws_restXmlTag(value, context).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: (value) => {
        const node = serializeAws_restXmlMetricsAndOperator(value, context).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  var serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionExpiration");
    if (input.NoncurrentDays !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.NoncurrentDays))).withName("NoncurrentDays");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionTransition");
    if (input.NoncurrentDays !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.NoncurrentDays))).withName("NoncurrentDays");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== void 0) {
      const node = new xml_builder_1.XmlNode("TransitionStorageClass").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlNotificationConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("NotificationConfiguration");
    if (input.TopicConfigurations !== void 0) {
      const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);
      nodes.map((node) => {
        node = node.withName("TopicConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    if (input.QueueConfigurations !== void 0) {
      const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);
      nodes.map((node) => {
        node = node.withName("QueueConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    if (input.LambdaFunctionConfigurations !== void 0) {
      const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
      nodes.map((node) => {
        node = node.withName("CloudFunctionConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("NotificationConfigurationFilter");
    if (input.Key !== void 0) {
      const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName("S3Key");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlObjectIdentifier = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ObjectIdentifier");
    if (input.Key !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectKey").addChildNode(new xml_builder_1.XmlText(input.Key)).withName("Key");
      bodyNode.addChildNode(node);
    }
    if (input.VersionId !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectVersionId").addChildNode(new xml_builder_1.XmlText(input.VersionId)).withName("VersionId");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlObjectIdentifierList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlObjectIdentifier(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlObjectLockConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ObjectLockConfiguration");
    if (input.ObjectLockEnabled !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectLockEnabled").addChildNode(new xml_builder_1.XmlText(input.ObjectLockEnabled)).withName("ObjectLockEnabled");
      bodyNode.addChildNode(node);
    }
    if (input.Rule !== void 0) {
      const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName("Rule");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlObjectLockLegalHold = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ObjectLockLegalHold");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectLockLegalHoldStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlObjectLockRetention = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ObjectLockRetention");
    if (input.Mode !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectLockRetentionMode").addChildNode(new xml_builder_1.XmlText(input.Mode)).withName("Mode");
      bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate !== void 0) {
      const node = new xml_builder_1.XmlNode("Date").addChildNode(new xml_builder_1.XmlText(input.RetainUntilDate.toISOString().split(".")[0] + "Z")).withName("RetainUntilDate");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlObjectLockRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ObjectLockRule");
    if (input.DefaultRetention !== void 0) {
      const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlOutputLocation = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("OutputLocation");
    if (input.S3 !== void 0) {
      const node = serializeAws_restXmlS3Location(input.S3, context).withName("S3");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlOutputSerialization = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("OutputSerialization");
    if (input.CSV !== void 0) {
      const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName("CSV");
      bodyNode.addChildNode(node);
    }
    if (input.JSON !== void 0) {
      const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName("JSON");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlOwner = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Owner");
    if (input.DisplayName !== void 0) {
      const node = new xml_builder_1.XmlNode("DisplayName").addChildNode(new xml_builder_1.XmlText(input.DisplayName)).withName("DisplayName");
      bodyNode.addChildNode(node);
    }
    if (input.ID !== void 0) {
      const node = new xml_builder_1.XmlNode("ID").addChildNode(new xml_builder_1.XmlText(input.ID)).withName("ID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlOwnershipControls = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("OwnershipControls");
    if (input.Rules !== void 0) {
      const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);
      nodes.map((node) => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlOwnershipControlsRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("OwnershipControlsRule");
    if (input.ObjectOwnership !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectOwnership").addChildNode(new xml_builder_1.XmlText(input.ObjectOwnership)).withName("ObjectOwnership");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlOwnershipControlsRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlOwnershipControlsRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlParquetInput = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ParquetInput");
    return bodyNode;
  };
  var serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls !== void 0) {
      const node = new xml_builder_1.XmlNode("Setting").addChildNode(new xml_builder_1.XmlText(String(input.BlockPublicAcls))).withName("BlockPublicAcls");
      bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls !== void 0) {
      const node = new xml_builder_1.XmlNode("Setting").addChildNode(new xml_builder_1.XmlText(String(input.IgnorePublicAcls))).withName("IgnorePublicAcls");
      bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy !== void 0) {
      const node = new xml_builder_1.XmlNode("Setting").addChildNode(new xml_builder_1.XmlText(String(input.BlockPublicPolicy))).withName("BlockPublicPolicy");
      bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets !== void 0) {
      const node = new xml_builder_1.XmlNode("Setting").addChildNode(new xml_builder_1.XmlText(String(input.RestrictPublicBuckets))).withName("RestrictPublicBuckets");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlQueueConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("QueueConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("NotificationId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.QueueArn !== void 0) {
      const node = new xml_builder_1.XmlNode("QueueArn").addChildNode(new xml_builder_1.XmlText(input.QueueArn)).withName("Queue");
      bodyNode.addChildNode(node);
    }
    if (input.Events !== void 0) {
      const nodes = serializeAws_restXmlEventList(input.Events, context);
      nodes.map((node) => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlQueueConfigurationList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlQueueConfiguration(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlRedirect = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Redirect");
    if (input.HostName !== void 0) {
      const node = new xml_builder_1.XmlNode("HostName").addChildNode(new xml_builder_1.XmlText(input.HostName)).withName("HostName");
      bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode !== void 0) {
      const node = new xml_builder_1.XmlNode("HttpRedirectCode").addChildNode(new xml_builder_1.XmlText(input.HttpRedirectCode)).withName("HttpRedirectCode");
      bodyNode.addChildNode(node);
    }
    if (input.Protocol !== void 0) {
      const node = new xml_builder_1.XmlNode("Protocol").addChildNode(new xml_builder_1.XmlText(input.Protocol)).withName("Protocol");
      bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplaceKeyPrefixWith").addChildNode(new xml_builder_1.XmlText(input.ReplaceKeyPrefixWith)).withName("ReplaceKeyPrefixWith");
      bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplaceKeyWith").addChildNode(new xml_builder_1.XmlText(input.ReplaceKeyWith)).withName("ReplaceKeyWith");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("RedirectAllRequestsTo");
    if (input.HostName !== void 0) {
      const node = new xml_builder_1.XmlNode("HostName").addChildNode(new xml_builder_1.XmlText(input.HostName)).withName("HostName");
      bodyNode.addChildNode(node);
    }
    if (input.Protocol !== void 0) {
      const node = new xml_builder_1.XmlNode("Protocol").addChildNode(new xml_builder_1.XmlText(input.Protocol)).withName("Protocol");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicaModifications = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicaModifications");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplicaModificationsStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicationConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationConfiguration");
    if (input.Role !== void 0) {
      const node = new xml_builder_1.XmlNode("Role").addChildNode(new xml_builder_1.XmlText(input.Role)).withName("Role");
      bodyNode.addChildNode(node);
    }
    if (input.Rules !== void 0) {
      const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);
      nodes.map((node) => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicationRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationRule");
    if (input.ID !== void 0) {
      const node = new xml_builder_1.XmlNode("ID").addChildNode(new xml_builder_1.XmlText(input.ID)).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.Priority !== void 0) {
      const node = new xml_builder_1.XmlNode("Priority").addChildNode(new xml_builder_1.XmlText(String(input.Priority))).withName("Priority");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplicationRuleStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria !== void 0) {
      const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
      bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication !== void 0) {
      const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
      bodyNode.addChildNode(node);
    }
    if (input.Destination !== void 0) {
      const node = serializeAws_restXmlDestination(input.Destination, context).withName("Destination");
      bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication !== void 0) {
      const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleAndOperator");
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.Tags, context);
      nodes.map((node) => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicationRuleFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleFilter");
    models_0_1.ReplicationRuleFilter.visit(input, {
      Prefix: (value) => {
        const node = new xml_builder_1.XmlNode("Prefix").addChildNode(new xml_builder_1.XmlText(value)).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: (value) => {
        const node = serializeAws_restXmlTag(value, context).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: (value) => {
        const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  var serializeAws_restXmlReplicationRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlReplicationRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlReplicationTime = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationTime");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("ReplicationTimeStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Time !== void 0) {
      const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName("Time");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlReplicationTimeValue = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ReplicationTimeValue");
    if (input.Minutes !== void 0) {
      const node = new xml_builder_1.XmlNode("Minutes").addChildNode(new xml_builder_1.XmlText(String(input.Minutes))).withName("Minutes");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("RequestPaymentConfiguration");
    if (input.Payer !== void 0) {
      const node = new xml_builder_1.XmlNode("Payer").addChildNode(new xml_builder_1.XmlText(input.Payer)).withName("Payer");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRequestProgress = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("RequestProgress");
    if (input.Enabled !== void 0) {
      const node = new xml_builder_1.XmlNode("EnableRequestProgress").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName("Enabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRestoreRequest = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("RestoreRequest");
    if (input.Days !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters !== void 0) {
      const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
      bodyNode.addChildNode(node);
    }
    if (input.Type !== void 0) {
      const node = new xml_builder_1.XmlNode("RestoreRequestType").addChildNode(new xml_builder_1.XmlText(input.Type)).withName("Type");
      bodyNode.addChildNode(node);
    }
    if (input.Tier !== void 0) {
      const node = new xml_builder_1.XmlNode("Tier").addChildNode(new xml_builder_1.XmlText(input.Tier)).withName("Tier");
      bodyNode.addChildNode(node);
    }
    if (input.Description !== void 0) {
      const node = new xml_builder_1.XmlNode("Description").addChildNode(new xml_builder_1.XmlText(input.Description)).withName("Description");
      bodyNode.addChildNode(node);
    }
    if (input.SelectParameters !== void 0) {
      const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName("SelectParameters");
      bodyNode.addChildNode(node);
    }
    if (input.OutputLocation !== void 0) {
      const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName("OutputLocation");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRoutingRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("RoutingRule");
    if (input.Condition !== void 0) {
      const node = serializeAws_restXmlCondition(input.Condition, context).withName("Condition");
      bodyNode.addChildNode(node);
    }
    if (input.Redirect !== void 0) {
      const node = serializeAws_restXmlRedirect(input.Redirect, context).withName("Redirect");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlRoutingRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlRoutingRule(entry, context);
      return node.withName("RoutingRule");
    });
  };
  var serializeAws_restXmlS3KeyFilter = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("S3KeyFilter");
    if (input.FilterRules !== void 0) {
      const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);
      nodes.map((node) => {
        node = node.withName("FilterRule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlS3Location = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("S3Location");
    if (input.BucketName !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketName").addChildNode(new xml_builder_1.XmlText(input.BucketName)).withName("BucketName");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix !== void 0) {
      const node = new xml_builder_1.XmlNode("LocationPrefix").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Encryption !== void 0) {
      const node = serializeAws_restXmlEncryption(input.Encryption, context).withName("Encryption");
      bodyNode.addChildNode(node);
    }
    if (input.CannedACL !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectCannedACL").addChildNode(new xml_builder_1.XmlText(input.CannedACL)).withName("CannedACL");
      bodyNode.addChildNode(node);
    }
    if (input.AccessControlList !== void 0) {
      const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);
      const containerNode = new xml_builder_1.XmlNode("AccessControlList");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Tagging !== void 0) {
      const node = serializeAws_restXmlTagging(input.Tagging, context).withName("Tagging");
      bodyNode.addChildNode(node);
    }
    if (input.UserMetadata !== void 0) {
      const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);
      const containerNode = new xml_builder_1.XmlNode("UserMetadata");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.StorageClass !== void 0) {
      const node = new xml_builder_1.XmlNode("StorageClass").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlScanRange = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ScanRange");
    if (input.Start !== void 0) {
      const node = new xml_builder_1.XmlNode("Start").addChildNode(new xml_builder_1.XmlText(String(input.Start))).withName("Start");
      bodyNode.addChildNode(node);
    }
    if (input.End !== void 0) {
      const node = new xml_builder_1.XmlNode("End").addChildNode(new xml_builder_1.XmlText(String(input.End))).withName("End");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlSelectParameters = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("SelectParameters");
    if (input.InputSerialization !== void 0) {
      const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== void 0) {
      const node = new xml_builder_1.XmlNode("ExpressionType").addChildNode(new xml_builder_1.XmlText(input.ExpressionType)).withName("ExpressionType");
      bodyNode.addChildNode(node);
    }
    if (input.Expression !== void 0) {
      const node = new xml_builder_1.XmlNode("Expression").addChildNode(new xml_builder_1.XmlText(input.Expression)).withName("Expression");
      bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== void 0) {
      const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm !== void 0) {
      const node = new xml_builder_1.XmlNode("ServerSideEncryption").addChildNode(new xml_builder_1.XmlText(input.SSEAlgorithm)).withName("SSEAlgorithm");
      bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID !== void 0) {
      const node = new xml_builder_1.XmlNode("SSEKMSKeyId").addChildNode(new xml_builder_1.XmlText(input.KMSMasterKeyID)).withName("KMSMasterKeyID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionConfiguration");
    if (input.Rules !== void 0) {
      const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);
      nodes.map((node) => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  var serializeAws_restXmlServerSideEncryptionRule = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault !== void 0) {
      const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
      bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketKeyEnabled").addChildNode(new xml_builder_1.XmlText(String(input.BucketKeyEnabled))).withName("BucketKeyEnabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlServerSideEncryptionRules = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlSourceSelectionCriteria = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects !== void 0) {
      const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
      bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications !== void 0) {
      const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlSSEKMS = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("SSE-KMS");
    if (input.KeyId !== void 0) {
      const node = new xml_builder_1.XmlNode("SSEKMSKeyId").addChildNode(new xml_builder_1.XmlText(input.KeyId)).withName("KeyId");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("SseKmsEncryptedObjects");
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("SseKmsEncryptedObjectsStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlSSES3 = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("SSE-S3");
    return bodyNode;
  };
  var serializeAws_restXmlStorageClassAnalysis = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysis");
    if (input.DataExport !== void 0) {
      const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion !== void 0) {
      const node = new xml_builder_1.XmlNode("StorageClassAnalysisSchemaVersion").addChildNode(new xml_builder_1.XmlText(input.OutputSchemaVersion)).withName("OutputSchemaVersion");
      bodyNode.addChildNode(node);
    }
    if (input.Destination !== void 0) {
      const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName("Destination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTag = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Tag");
    if (input.Key !== void 0) {
      const node = new xml_builder_1.XmlNode("ObjectKey").addChildNode(new xml_builder_1.XmlText(input.Key)).withName("Key");
      bodyNode.addChildNode(node);
    }
    if (input.Value !== void 0) {
      const node = new xml_builder_1.XmlNode("Value").addChildNode(new xml_builder_1.XmlText(input.Value)).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTagging = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Tagging");
    if (input.TagSet !== void 0) {
      const nodes = serializeAws_restXmlTagSet(input.TagSet, context);
      const containerNode = new xml_builder_1.XmlNode("TagSet");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTagSet = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlTag(entry, context);
      return node.withName("Tag");
    });
  };
  var serializeAws_restXmlTargetGrant = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("TargetGrant");
    if (input.Grantee !== void 0) {
      const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
      bodyNode.addChildNode(node);
    }
    if (input.Permission !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketLogsPermission").addChildNode(new xml_builder_1.XmlText(input.Permission)).withName("Permission");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTargetGrants = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlTargetGrant(entry, context);
      return node.withName("Grant");
    });
  };
  var serializeAws_restXmlTiering = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Tiering");
    if (input.Days !== void 0) {
      const node = new xml_builder_1.XmlNode("IntelligentTieringDays").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.AccessTier !== void 0) {
      const node = new xml_builder_1.XmlNode("IntelligentTieringAccessTier").addChildNode(new xml_builder_1.XmlText(input.AccessTier)).withName("AccessTier");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTieringList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlTiering(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlTopicConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("TopicConfiguration");
    if (input.Id !== void 0) {
      const node = new xml_builder_1.XmlNode("NotificationId").addChildNode(new xml_builder_1.XmlText(input.Id)).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.TopicArn !== void 0) {
      const node = new xml_builder_1.XmlNode("TopicArn").addChildNode(new xml_builder_1.XmlText(input.TopicArn)).withName("Topic");
      bodyNode.addChildNode(node);
    }
    if (input.Events !== void 0) {
      const nodes = serializeAws_restXmlEventList(input.Events, context);
      nodes.map((node) => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter !== void 0) {
      const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTopicConfigurationList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlTopicConfiguration(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlTransition = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Transition");
    if (input.Date !== void 0) {
      const node = new xml_builder_1.XmlNode("Date").addChildNode(new xml_builder_1.XmlText(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
      bodyNode.addChildNode(node);
    }
    if (input.Days !== void 0) {
      const node = new xml_builder_1.XmlNode("Days").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== void 0) {
      const node = new xml_builder_1.XmlNode("TransitionStorageClass").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlTransitionList = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlTransition(entry, context);
      return node.withName("member");
    });
  };
  var serializeAws_restXmlUserMetadata = (input, context) => {
    return input.map((entry) => {
      const node = serializeAws_restXmlMetadataEntry(entry, context);
      return node.withName("MetadataEntry");
    });
  };
  var serializeAws_restXmlVersioningConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("VersioningConfiguration");
    if (input.MFADelete !== void 0) {
      const node = new xml_builder_1.XmlNode("MFADelete").addChildNode(new xml_builder_1.XmlText(input.MFADelete)).withName("MfaDelete");
      bodyNode.addChildNode(node);
    }
    if (input.Status !== void 0) {
      const node = new xml_builder_1.XmlNode("BucketVersioningStatus").addChildNode(new xml_builder_1.XmlText(input.Status)).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  var serializeAws_restXmlWebsiteConfiguration = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("WebsiteConfiguration");
    if (input.ErrorDocument !== void 0) {
      const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
      bodyNode.addChildNode(node);
    }
    if (input.IndexDocument !== void 0) {
      const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName("IndexDocument");
      bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo !== void 0) {
      const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
      bodyNode.addChildNode(node);
    }
    if (input.RoutingRules !== void 0) {
      const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);
      const containerNode = new xml_builder_1.XmlNode("RoutingRules");
      nodes.map((node) => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
  };
  var deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {
    let contents = {
      DaysAfterInitiation: void 0
    };
    if (output["DaysAfterInitiation"] !== void 0) {
      contents.DaysAfterInitiation = parseInt(output["DaysAfterInitiation"]);
    }
    return contents;
  };
  var deserializeAws_restXmlAccessControlTranslation = (output, context) => {
    let contents = {
      Owner: void 0
    };
    if (output["Owner"] !== void 0) {
      contents.Owner = output["Owner"];
    }
    return contents;
  };
  var deserializeAws_restXmlAllowedHeaders = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlAllowedMethods = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlAllowedOrigins = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tags: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output.Tag === "") {
      contents.Tags = [];
    }
    if (output["Tag"] !== void 0) {
      contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output["Tag"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      Filter: void 0,
      StorageClassAnalysis: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlAnalyticsFilter(output["Filter"], context);
    }
    if (output["StorageClassAnalysis"] !== void 0) {
      contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlAnalyticsConfiguration(entry, context));
  };
  var deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {
    let contents = {
      S3BucketDestination: void 0
    };
    if (output["S3BucketDestination"] !== void 0) {
      contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlAnalyticsFilter = (output, context) => {
    if (output["Prefix"] !== void 0) {
      return {
        Prefix: output["Prefix"]
      };
    }
    if (output["Tag"] !== void 0) {
      return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
      };
    }
    if (output["And"] !== void 0) {
      return {
        And: deserializeAws_restXmlAnalyticsAndOperator(output["And"], context)
      };
    }
    return {$unknown: Object.entries(output)[0]};
  };
  var deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {
    let contents = {
      Format: void 0,
      BucketAccountId: void 0,
      Bucket: void 0,
      Prefix: void 0
    };
    if (output["Format"] !== void 0) {
      contents.Format = output["Format"];
    }
    if (output["BucketAccountId"] !== void 0) {
      contents.BucketAccountId = output["BucketAccountId"];
    }
    if (output["Bucket"] !== void 0) {
      contents.Bucket = output["Bucket"];
    }
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    return contents;
  };
  var deserializeAws_restXmlBucket = (output, context) => {
    let contents = {
      Name: void 0,
      CreationDate: void 0
    };
    if (output["Name"] !== void 0) {
      contents.Name = output["Name"];
    }
    if (output["CreationDate"] !== void 0) {
      contents.CreationDate = new Date(output["CreationDate"]);
    }
    return contents;
  };
  var deserializeAws_restXmlBuckets = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlBucket(entry, context));
  };
  var deserializeAws_restXmlCommonPrefix = (output, context) => {
    let contents = {
      Prefix: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    return contents;
  };
  var deserializeAws_restXmlCommonPrefixList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlCommonPrefix(entry, context));
  };
  var deserializeAws_restXmlCondition = (output, context) => {
    let contents = {
      HttpErrorCodeReturnedEquals: void 0,
      KeyPrefixEquals: void 0
    };
    if (output["HttpErrorCodeReturnedEquals"] !== void 0) {
      contents.HttpErrorCodeReturnedEquals = output["HttpErrorCodeReturnedEquals"];
    }
    if (output["KeyPrefixEquals"] !== void 0) {
      contents.KeyPrefixEquals = output["KeyPrefixEquals"];
    }
    return contents;
  };
  var deserializeAws_restXmlCopyObjectResult = (output, context) => {
    let contents = {
      ETag: void 0,
      LastModified: void 0
    };
    if (output["ETag"] !== void 0) {
      contents.ETag = output["ETag"];
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    return contents;
  };
  var deserializeAws_restXmlCopyPartResult = (output, context) => {
    let contents = {
      ETag: void 0,
      LastModified: void 0
    };
    if (output["ETag"] !== void 0) {
      contents.ETag = output["ETag"];
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    return contents;
  };
  var deserializeAws_restXmlCORSRule = (output, context) => {
    let contents = {
      AllowedHeaders: void 0,
      AllowedMethods: void 0,
      AllowedOrigins: void 0,
      ExposeHeaders: void 0,
      MaxAgeSeconds: void 0
    };
    if (output.AllowedHeader === "") {
      contents.AllowedHeaders = [];
    }
    if (output["AllowedHeader"] !== void 0) {
      contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(smithy_client_1.getArrayIfSingleItem(output["AllowedHeader"]), context);
    }
    if (output.AllowedMethod === "") {
      contents.AllowedMethods = [];
    }
    if (output["AllowedMethod"] !== void 0) {
      contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(smithy_client_1.getArrayIfSingleItem(output["AllowedMethod"]), context);
    }
    if (output.AllowedOrigin === "") {
      contents.AllowedOrigins = [];
    }
    if (output["AllowedOrigin"] !== void 0) {
      contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(smithy_client_1.getArrayIfSingleItem(output["AllowedOrigin"]), context);
    }
    if (output.ExposeHeader === "") {
      contents.ExposeHeaders = [];
    }
    if (output["ExposeHeader"] !== void 0) {
      contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(smithy_client_1.getArrayIfSingleItem(output["ExposeHeader"]), context);
    }
    if (output["MaxAgeSeconds"] !== void 0) {
      contents.MaxAgeSeconds = parseInt(output["MaxAgeSeconds"]);
    }
    return contents;
  };
  var deserializeAws_restXmlCORSRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlCORSRule(entry, context));
  };
  var deserializeAws_restXmlDefaultRetention = (output, context) => {
    let contents = {
      Mode: void 0,
      Days: void 0,
      Years: void 0
    };
    if (output["Mode"] !== void 0) {
      contents.Mode = output["Mode"];
    }
    if (output["Days"] !== void 0) {
      contents.Days = parseInt(output["Days"]);
    }
    if (output["Years"] !== void 0) {
      contents.Years = parseInt(output["Years"]);
    }
    return contents;
  };
  var deserializeAws_restXmlDeletedObject = (output, context) => {
    let contents = {
      Key: void 0,
      VersionId: void 0,
      DeleteMarker: void 0,
      DeleteMarkerVersionId: void 0
    };
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["VersionId"] !== void 0) {
      contents.VersionId = output["VersionId"];
    }
    if (output["DeleteMarker"] !== void 0) {
      contents.DeleteMarker = output["DeleteMarker"] == "true";
    }
    if (output["DeleteMarkerVersionId"] !== void 0) {
      contents.DeleteMarkerVersionId = output["DeleteMarkerVersionId"];
    }
    return contents;
  };
  var deserializeAws_restXmlDeletedObjects = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlDeletedObject(entry, context));
  };
  var deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {
    let contents = {
      Owner: void 0,
      Key: void 0,
      VersionId: void 0,
      IsLatest: void 0,
      LastModified: void 0
    };
    if (output["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["VersionId"] !== void 0) {
      contents.VersionId = output["VersionId"];
    }
    if (output["IsLatest"] !== void 0) {
      contents.IsLatest = output["IsLatest"] == "true";
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    return contents;
  };
  var deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {
    let contents = {
      Status: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    return contents;
  };
  var deserializeAws_restXmlDeleteMarkers = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlDeleteMarkerEntry(entry, context));
  };
  var deserializeAws_restXmlDestination = (output, context) => {
    let contents = {
      Bucket: void 0,
      Account: void 0,
      StorageClass: void 0,
      AccessControlTranslation: void 0,
      EncryptionConfiguration: void 0,
      ReplicationTime: void 0,
      Metrics: void 0
    };
    if (output["Bucket"] !== void 0) {
      contents.Bucket = output["Bucket"];
    }
    if (output["Account"] !== void 0) {
      contents.Account = output["Account"];
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    if (output["AccessControlTranslation"] !== void 0) {
      contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"], context);
    }
    if (output["EncryptionConfiguration"] !== void 0) {
      contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"], context);
    }
    if (output["ReplicationTime"] !== void 0) {
      contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"], context);
    }
    if (output["Metrics"] !== void 0) {
      contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlEncryptionConfiguration = (output, context) => {
    let contents = {
      ReplicaKmsKeyID: void 0
    };
    if (output["ReplicaKmsKeyID"] !== void 0) {
      contents.ReplicaKmsKeyID = output["ReplicaKmsKeyID"];
    }
    return contents;
  };
  var deserializeAws_restXml_Error = (output, context) => {
    let contents = {
      Key: void 0,
      VersionId: void 0,
      Code: void 0,
      Message: void 0
    };
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["VersionId"] !== void 0) {
      contents.VersionId = output["VersionId"];
    }
    if (output["Code"] !== void 0) {
      contents.Code = output["Code"];
    }
    if (output["Message"] !== void 0) {
      contents.Message = output["Message"];
    }
    return contents;
  };
  var deserializeAws_restXmlErrorDocument = (output, context) => {
    let contents = {
      Key: void 0
    };
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    return contents;
  };
  var deserializeAws_restXmlErrors = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXml_Error(entry, context));
  };
  var deserializeAws_restXmlEventList = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlExistingObjectReplication = (output, context) => {
    let contents = {
      Status: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    return contents;
  };
  var deserializeAws_restXmlExposeHeaders = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlFilterRule = (output, context) => {
    let contents = {
      Name: void 0,
      Value: void 0
    };
    if (output["Name"] !== void 0) {
      contents.Name = output["Name"];
    }
    if (output["Value"] !== void 0) {
      contents.Value = output["Value"];
    }
    return contents;
  };
  var deserializeAws_restXmlFilterRuleList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlFilterRule(entry, context));
  };
  var deserializeAws_restXmlGrant = (output, context) => {
    let contents = {
      Grantee: void 0,
      Permission: void 0
    };
    if (output["Grantee"] !== void 0) {
      contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    }
    if (output["Permission"] !== void 0) {
      contents.Permission = output["Permission"];
    }
    return contents;
  };
  var deserializeAws_restXmlGrantee = (output, context) => {
    let contents = {
      DisplayName: void 0,
      EmailAddress: void 0,
      ID: void 0,
      URI: void 0,
      Type: void 0
    };
    if (output["DisplayName"] !== void 0) {
      contents.DisplayName = output["DisplayName"];
    }
    if (output["EmailAddress"] !== void 0) {
      contents.EmailAddress = output["EmailAddress"];
    }
    if (output["ID"] !== void 0) {
      contents.ID = output["ID"];
    }
    if (output["URI"] !== void 0) {
      contents.URI = output["URI"];
    }
    if (output["xsi:type"] !== void 0) {
      contents.Type = output["xsi:type"];
    }
    return contents;
  };
  var deserializeAws_restXmlGrants = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlGrant(entry, context));
  };
  var deserializeAws_restXmlIndexDocument = (output, context) => {
    let contents = {
      Suffix: void 0
    };
    if (output["Suffix"] !== void 0) {
      contents.Suffix = output["Suffix"];
    }
    return contents;
  };
  var deserializeAws_restXmlInitiator = (output, context) => {
    let contents = {
      ID: void 0,
      DisplayName: void 0
    };
    if (output["ID"] !== void 0) {
      contents.ID = output["ID"];
    }
    if (output["DisplayName"] !== void 0) {
      contents.DisplayName = output["DisplayName"];
    }
    return contents;
  };
  var deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tags: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output.Tag === "") {
      contents.Tags = [];
    }
    if (output["Tag"] !== void 0) {
      contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output["Tag"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      Filter: void 0,
      Status: void 0,
      Tierings: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"], context);
    }
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    if (output.Tiering === "") {
      contents.Tierings = [];
    }
    if (output["Tiering"] !== void 0) {
      contents.Tierings = deserializeAws_restXmlTieringList(smithy_client_1.getArrayIfSingleItem(output["Tiering"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlIntelligentTieringConfiguration(entry, context));
  };
  var deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tag: void 0,
      And: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output["Tag"] !== void 0) {
      contents.Tag = deserializeAws_restXmlTag(output["Tag"], context);
    }
    if (output["And"] !== void 0) {
      contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlInventoryConfiguration = (output, context) => {
    let contents = {
      Destination: void 0,
      IsEnabled: void 0,
      Filter: void 0,
      Id: void 0,
      IncludedObjectVersions: void 0,
      OptionalFields: void 0,
      Schedule: void 0
    };
    if (output["Destination"] !== void 0) {
      contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"], context);
    }
    if (output["IsEnabled"] !== void 0) {
      contents.IsEnabled = output["IsEnabled"] == "true";
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"], context);
    }
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["IncludedObjectVersions"] !== void 0) {
      contents.IncludedObjectVersions = output["IncludedObjectVersions"];
    }
    if (output.OptionalFields === "") {
      contents.OptionalFields = [];
    }
    if (output["OptionalFields"] !== void 0 && output["OptionalFields"]["Field"] !== void 0) {
      contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(smithy_client_1.getArrayIfSingleItem(output["OptionalFields"]["Field"]), context);
    }
    if (output["Schedule"] !== void 0) {
      contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlInventoryConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlInventoryConfiguration(entry, context));
  };
  var deserializeAws_restXmlInventoryDestination = (output, context) => {
    let contents = {
      S3BucketDestination: void 0
    };
    if (output["S3BucketDestination"] !== void 0) {
      contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlInventoryEncryption = (output, context) => {
    let contents = {
      SSES3: void 0,
      SSEKMS: void 0
    };
    if (output["SSE-S3"] !== void 0) {
      contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"], context);
    }
    if (output["SSE-KMS"] !== void 0) {
      contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlInventoryFilter = (output, context) => {
    let contents = {
      Prefix: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    return contents;
  };
  var deserializeAws_restXmlInventoryOptionalFields = (output, context) => {
    return (output || []).map((entry) => entry);
  };
  var deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {
    let contents = {
      AccountId: void 0,
      Bucket: void 0,
      Format: void 0,
      Prefix: void 0,
      Encryption: void 0
    };
    if (output["AccountId"] !== void 0) {
      contents.AccountId = output["AccountId"];
    }
    if (output["Bucket"] !== void 0) {
      contents.Bucket = output["Bucket"];
    }
    if (output["Format"] !== void 0) {
      contents.Format = output["Format"];
    }
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output["Encryption"] !== void 0) {
      contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlInventorySchedule = (output, context) => {
    let contents = {
      Frequency: void 0
    };
    if (output["Frequency"] !== void 0) {
      contents.Frequency = output["Frequency"];
    }
    return contents;
  };
  var deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      LambdaFunctionArn: void 0,
      Events: void 0,
      Filter: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["CloudFunction"] !== void 0) {
      contents.LambdaFunctionArn = output["CloudFunction"];
    }
    if (output.Event === "") {
      contents.Events = [];
    }
    if (output["Event"] !== void 0) {
      contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output["Event"]), context);
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlLambdaFunctionConfiguration(entry, context));
  };
  var deserializeAws_restXmlLifecycleExpiration = (output, context) => {
    let contents = {
      Date: void 0,
      Days: void 0,
      ExpiredObjectDeleteMarker: void 0
    };
    if (output["Date"] !== void 0) {
      contents.Date = new Date(output["Date"]);
    }
    if (output["Days"] !== void 0) {
      contents.Days = parseInt(output["Days"]);
    }
    if (output["ExpiredObjectDeleteMarker"] !== void 0) {
      contents.ExpiredObjectDeleteMarker = output["ExpiredObjectDeleteMarker"] == "true";
    }
    return contents;
  };
  var deserializeAws_restXmlLifecycleRule = (output, context) => {
    let contents = {
      Expiration: void 0,
      ID: void 0,
      Prefix: void 0,
      Filter: void 0,
      Status: void 0,
      Transitions: void 0,
      NoncurrentVersionTransitions: void 0,
      NoncurrentVersionExpiration: void 0,
      AbortIncompleteMultipartUpload: void 0
    };
    if (output["Expiration"] !== void 0) {
      contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"], context);
    }
    if (output["ID"] !== void 0) {
      contents.ID = output["ID"];
    }
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output["Filter"], context);
    }
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    if (output.Transition === "") {
      contents.Transitions = [];
    }
    if (output["Transition"] !== void 0) {
      contents.Transitions = deserializeAws_restXmlTransitionList(smithy_client_1.getArrayIfSingleItem(output["Transition"]), context);
    }
    if (output.NoncurrentVersionTransition === "") {
      contents.NoncurrentVersionTransitions = [];
    }
    if (output["NoncurrentVersionTransition"] !== void 0) {
      contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(smithy_client_1.getArrayIfSingleItem(output["NoncurrentVersionTransition"]), context);
    }
    if (output["NoncurrentVersionExpiration"] !== void 0) {
      contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
    }
    if (output["AbortIncompleteMultipartUpload"] !== void 0) {
      contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tags: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output.Tag === "") {
      contents.Tags = [];
    }
    if (output["Tag"] !== void 0) {
      contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output["Tag"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {
    if (output["Prefix"] !== void 0) {
      return {
        Prefix: output["Prefix"]
      };
    }
    if (output["Tag"] !== void 0) {
      return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
      };
    }
    if (output["And"] !== void 0) {
      return {
        And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"], context)
      };
    }
    return {$unknown: Object.entries(output)[0]};
  };
  var deserializeAws_restXmlLifecycleRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlLifecycleRule(entry, context));
  };
  var deserializeAws_restXmlLoggingEnabled = (output, context) => {
    let contents = {
      TargetBucket: void 0,
      TargetGrants: void 0,
      TargetPrefix: void 0
    };
    if (output["TargetBucket"] !== void 0) {
      contents.TargetBucket = output["TargetBucket"];
    }
    if (output.TargetGrants === "") {
      contents.TargetGrants = [];
    }
    if (output["TargetGrants"] !== void 0 && output["TargetGrants"]["Grant"] !== void 0) {
      contents.TargetGrants = deserializeAws_restXmlTargetGrants(smithy_client_1.getArrayIfSingleItem(output["TargetGrants"]["Grant"]), context);
    }
    if (output["TargetPrefix"] !== void 0) {
      contents.TargetPrefix = output["TargetPrefix"];
    }
    return contents;
  };
  var deserializeAws_restXmlMetrics = (output, context) => {
    let contents = {
      Status: void 0,
      EventThreshold: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    if (output["EventThreshold"] !== void 0) {
      contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlMetricsAndOperator = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tags: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output.Tag === "") {
      contents.Tags = [];
    }
    if (output["Tag"] !== void 0) {
      contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output["Tag"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlMetricsConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      Filter: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlMetricsFilter(output["Filter"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlMetricsConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlMetricsConfiguration(entry, context));
  };
  var deserializeAws_restXmlMetricsFilter = (output, context) => {
    if (output["Prefix"] !== void 0) {
      return {
        Prefix: output["Prefix"]
      };
    }
    if (output["Tag"] !== void 0) {
      return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
      };
    }
    if (output["And"] !== void 0) {
      return {
        And: deserializeAws_restXmlMetricsAndOperator(output["And"], context)
      };
    }
    return {$unknown: Object.entries(output)[0]};
  };
  var deserializeAws_restXmlMultipartUpload = (output, context) => {
    let contents = {
      UploadId: void 0,
      Key: void 0,
      Initiated: void 0,
      StorageClass: void 0,
      Owner: void 0,
      Initiator: void 0
    };
    if (output["UploadId"] !== void 0) {
      contents.UploadId = output["UploadId"];
    }
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["Initiated"] !== void 0) {
      contents.Initiated = new Date(output["Initiated"]);
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    if (output["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    if (output["Initiator"] !== void 0) {
      contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlMultipartUploadList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlMultipartUpload(entry, context));
  };
  var deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {
    let contents = {
      NoncurrentDays: void 0
    };
    if (output["NoncurrentDays"] !== void 0) {
      contents.NoncurrentDays = parseInt(output["NoncurrentDays"]);
    }
    return contents;
  };
  var deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {
    let contents = {
      NoncurrentDays: void 0,
      StorageClass: void 0
    };
    if (output["NoncurrentDays"] !== void 0) {
      contents.NoncurrentDays = parseInt(output["NoncurrentDays"]);
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    return contents;
  };
  var deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlNoncurrentVersionTransition(entry, context));
  };
  var deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {
    let contents = {
      Key: void 0
    };
    if (output["S3Key"] !== void 0) {
      contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"], context);
    }
    return contents;
  };
  var deserializeAws_restXml_Object = (output, context) => {
    let contents = {
      Key: void 0,
      LastModified: void 0,
      ETag: void 0,
      Size: void 0,
      StorageClass: void 0,
      Owner: void 0
    };
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    if (output["ETag"] !== void 0) {
      contents.ETag = output["ETag"];
    }
    if (output["Size"] !== void 0) {
      contents.Size = parseInt(output["Size"]);
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    if (output["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlObjectList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXml_Object(entry, context));
  };
  var deserializeAws_restXmlObjectLockConfiguration = (output, context) => {
    let contents = {
      ObjectLockEnabled: void 0,
      Rule: void 0
    };
    if (output["ObjectLockEnabled"] !== void 0) {
      contents.ObjectLockEnabled = output["ObjectLockEnabled"];
    }
    if (output["Rule"] !== void 0) {
      contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlObjectLockLegalHold = (output, context) => {
    let contents = {
      Status: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    return contents;
  };
  var deserializeAws_restXmlObjectLockRetention = (output, context) => {
    let contents = {
      Mode: void 0,
      RetainUntilDate: void 0
    };
    if (output["Mode"] !== void 0) {
      contents.Mode = output["Mode"];
    }
    if (output["RetainUntilDate"] !== void 0) {
      contents.RetainUntilDate = new Date(output["RetainUntilDate"]);
    }
    return contents;
  };
  var deserializeAws_restXmlObjectLockRule = (output, context) => {
    let contents = {
      DefaultRetention: void 0
    };
    if (output["DefaultRetention"] !== void 0) {
      contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlObjectVersion = (output, context) => {
    let contents = {
      ETag: void 0,
      Size: void 0,
      StorageClass: void 0,
      Key: void 0,
      VersionId: void 0,
      IsLatest: void 0,
      LastModified: void 0,
      Owner: void 0
    };
    if (output["ETag"] !== void 0) {
      contents.ETag = output["ETag"];
    }
    if (output["Size"] !== void 0) {
      contents.Size = parseInt(output["Size"]);
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["VersionId"] !== void 0) {
      contents.VersionId = output["VersionId"];
    }
    if (output["IsLatest"] !== void 0) {
      contents.IsLatest = output["IsLatest"] == "true";
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    if (output["Owner"] !== void 0) {
      contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlObjectVersionList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlObjectVersion(entry, context));
  };
  var deserializeAws_restXmlOwner = (output, context) => {
    let contents = {
      DisplayName: void 0,
      ID: void 0
    };
    if (output["DisplayName"] !== void 0) {
      contents.DisplayName = output["DisplayName"];
    }
    if (output["ID"] !== void 0) {
      contents.ID = output["ID"];
    }
    return contents;
  };
  var deserializeAws_restXmlOwnershipControls = (output, context) => {
    let contents = {
      Rules: void 0
    };
    if (output.Rule === "") {
      contents.Rules = [];
    }
    if (output["Rule"] !== void 0) {
      contents.Rules = deserializeAws_restXmlOwnershipControlsRules(smithy_client_1.getArrayIfSingleItem(output["Rule"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlOwnershipControlsRule = (output, context) => {
    let contents = {
      ObjectOwnership: void 0
    };
    if (output["ObjectOwnership"] !== void 0) {
      contents.ObjectOwnership = output["ObjectOwnership"];
    }
    return contents;
  };
  var deserializeAws_restXmlOwnershipControlsRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlOwnershipControlsRule(entry, context));
  };
  var deserializeAws_restXmlPart = (output, context) => {
    let contents = {
      PartNumber: void 0,
      LastModified: void 0,
      ETag: void 0,
      Size: void 0
    };
    if (output["PartNumber"] !== void 0) {
      contents.PartNumber = parseInt(output["PartNumber"]);
    }
    if (output["LastModified"] !== void 0) {
      contents.LastModified = new Date(output["LastModified"]);
    }
    if (output["ETag"] !== void 0) {
      contents.ETag = output["ETag"];
    }
    if (output["Size"] !== void 0) {
      contents.Size = parseInt(output["Size"]);
    }
    return contents;
  };
  var deserializeAws_restXmlParts = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlPart(entry, context));
  };
  var deserializeAws_restXmlPolicyStatus = (output, context) => {
    let contents = {
      IsPublic: void 0
    };
    if (output["IsPublic"] !== void 0) {
      contents.IsPublic = output["IsPublic"] == "true";
    }
    return contents;
  };
  var deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {
    let contents = {
      BlockPublicAcls: void 0,
      IgnorePublicAcls: void 0,
      BlockPublicPolicy: void 0,
      RestrictPublicBuckets: void 0
    };
    if (output["BlockPublicAcls"] !== void 0) {
      contents.BlockPublicAcls = output["BlockPublicAcls"] == "true";
    }
    if (output["IgnorePublicAcls"] !== void 0) {
      contents.IgnorePublicAcls = output["IgnorePublicAcls"] == "true";
    }
    if (output["BlockPublicPolicy"] !== void 0) {
      contents.BlockPublicPolicy = output["BlockPublicPolicy"] == "true";
    }
    if (output["RestrictPublicBuckets"] !== void 0) {
      contents.RestrictPublicBuckets = output["RestrictPublicBuckets"] == "true";
    }
    return contents;
  };
  var deserializeAws_restXmlQueueConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      QueueArn: void 0,
      Events: void 0,
      Filter: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["Queue"] !== void 0) {
      contents.QueueArn = output["Queue"];
    }
    if (output.Event === "") {
      contents.Events = [];
    }
    if (output["Event"] !== void 0) {
      contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output["Event"]), context);
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlQueueConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlQueueConfiguration(entry, context));
  };
  var deserializeAws_restXmlRedirect = (output, context) => {
    let contents = {
      HostName: void 0,
      HttpRedirectCode: void 0,
      Protocol: void 0,
      ReplaceKeyPrefixWith: void 0,
      ReplaceKeyWith: void 0
    };
    if (output["HostName"] !== void 0) {
      contents.HostName = output["HostName"];
    }
    if (output["HttpRedirectCode"] !== void 0) {
      contents.HttpRedirectCode = output["HttpRedirectCode"];
    }
    if (output["Protocol"] !== void 0) {
      contents.Protocol = output["Protocol"];
    }
    if (output["ReplaceKeyPrefixWith"] !== void 0) {
      contents.ReplaceKeyPrefixWith = output["ReplaceKeyPrefixWith"];
    }
    if (output["ReplaceKeyWith"] !== void 0) {
      contents.ReplaceKeyWith = output["ReplaceKeyWith"];
    }
    return contents;
  };
  var deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {
    let contents = {
      HostName: void 0,
      Protocol: void 0
    };
    if (output["HostName"] !== void 0) {
      contents.HostName = output["HostName"];
    }
    if (output["Protocol"] !== void 0) {
      contents.Protocol = output["Protocol"];
    }
    return contents;
  };
  var deserializeAws_restXmlReplicaModifications = (output, context) => {
    let contents = {
      Status: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    return contents;
  };
  var deserializeAws_restXmlReplicationConfiguration = (output, context) => {
    let contents = {
      Role: void 0,
      Rules: void 0
    };
    if (output["Role"] !== void 0) {
      contents.Role = output["Role"];
    }
    if (output.Rule === "") {
      contents.Rules = [];
    }
    if (output["Rule"] !== void 0) {
      contents.Rules = deserializeAws_restXmlReplicationRules(smithy_client_1.getArrayIfSingleItem(output["Rule"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlReplicationRule = (output, context) => {
    let contents = {
      ID: void 0,
      Priority: void 0,
      Prefix: void 0,
      Filter: void 0,
      Status: void 0,
      SourceSelectionCriteria: void 0,
      ExistingObjectReplication: void 0,
      Destination: void 0,
      DeleteMarkerReplication: void 0
    };
    if (output["ID"] !== void 0) {
      contents.ID = output["ID"];
    }
    if (output["Priority"] !== void 0) {
      contents.Priority = parseInt(output["Priority"]);
    }
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output["Filter"], context);
    }
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    if (output["SourceSelectionCriteria"] !== void 0) {
      contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"], context);
    }
    if (output["ExistingObjectReplication"] !== void 0) {
      contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"], context);
    }
    if (output["Destination"] !== void 0) {
      contents.Destination = deserializeAws_restXmlDestination(output["Destination"], context);
    }
    if (output["DeleteMarkerReplication"] !== void 0) {
      contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {
    let contents = {
      Prefix: void 0,
      Tags: void 0
    };
    if (output["Prefix"] !== void 0) {
      contents.Prefix = output["Prefix"];
    }
    if (output.Tag === "") {
      contents.Tags = [];
    }
    if (output["Tag"] !== void 0) {
      contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output["Tag"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlReplicationRuleFilter = (output, context) => {
    if (output["Prefix"] !== void 0) {
      return {
        Prefix: output["Prefix"]
      };
    }
    if (output["Tag"] !== void 0) {
      return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
      };
    }
    if (output["And"] !== void 0) {
      return {
        And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"], context)
      };
    }
    return {$unknown: Object.entries(output)[0]};
  };
  var deserializeAws_restXmlReplicationRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlReplicationRule(entry, context));
  };
  var deserializeAws_restXmlReplicationTime = (output, context) => {
    let contents = {
      Status: void 0,
      Time: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    if (output["Time"] !== void 0) {
      contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlReplicationTimeValue = (output, context) => {
    let contents = {
      Minutes: void 0
    };
    if (output["Minutes"] !== void 0) {
      contents.Minutes = parseInt(output["Minutes"]);
    }
    return contents;
  };
  var deserializeAws_restXmlRoutingRule = (output, context) => {
    let contents = {
      Condition: void 0,
      Redirect: void 0
    };
    if (output["Condition"] !== void 0) {
      contents.Condition = deserializeAws_restXmlCondition(output["Condition"], context);
    }
    if (output["Redirect"] !== void 0) {
      contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlRoutingRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlRoutingRule(entry, context));
  };
  var deserializeAws_restXmlS3KeyFilter = (output, context) => {
    let contents = {
      FilterRules: void 0
    };
    if (output.FilterRule === "") {
      contents.FilterRules = [];
    }
    if (output["FilterRule"] !== void 0) {
      contents.FilterRules = deserializeAws_restXmlFilterRuleList(smithy_client_1.getArrayIfSingleItem(output["FilterRule"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {
    let contents = {
      SSEAlgorithm: void 0,
      KMSMasterKeyID: void 0
    };
    if (output["SSEAlgorithm"] !== void 0) {
      contents.SSEAlgorithm = output["SSEAlgorithm"];
    }
    if (output["KMSMasterKeyID"] !== void 0) {
      contents.KMSMasterKeyID = output["KMSMasterKeyID"];
    }
    return contents;
  };
  var deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {
    let contents = {
      Rules: void 0
    };
    if (output.Rule === "") {
      contents.Rules = [];
    }
    if (output["Rule"] !== void 0) {
      contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(smithy_client_1.getArrayIfSingleItem(output["Rule"]), context);
    }
    return contents;
  };
  var deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {
    let contents = {
      ApplyServerSideEncryptionByDefault: void 0,
      BucketKeyEnabled: void 0
    };
    if (output["ApplyServerSideEncryptionByDefault"] !== void 0) {
      contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
    }
    if (output["BucketKeyEnabled"] !== void 0) {
      contents.BucketKeyEnabled = output["BucketKeyEnabled"] == "true";
    }
    return contents;
  };
  var deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlServerSideEncryptionRule(entry, context));
  };
  var deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {
    let contents = {
      SseKmsEncryptedObjects: void 0,
      ReplicaModifications: void 0
    };
    if (output["SseKmsEncryptedObjects"] !== void 0) {
      contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
    }
    if (output["ReplicaModifications"] !== void 0) {
      contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlSSEKMS = (output, context) => {
    let contents = {
      KeyId: void 0
    };
    if (output["KeyId"] !== void 0) {
      contents.KeyId = output["KeyId"];
    }
    return contents;
  };
  var deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {
    let contents = {
      Status: void 0
    };
    if (output["Status"] !== void 0) {
      contents.Status = output["Status"];
    }
    return contents;
  };
  var deserializeAws_restXmlSSES3 = (output, context) => {
    let contents = {};
    return contents;
  };
  var deserializeAws_restXmlStorageClassAnalysis = (output, context) => {
    let contents = {
      DataExport: void 0
    };
    if (output["DataExport"] !== void 0) {
      contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {
    let contents = {
      OutputSchemaVersion: void 0,
      Destination: void 0
    };
    if (output["OutputSchemaVersion"] !== void 0) {
      contents.OutputSchemaVersion = output["OutputSchemaVersion"];
    }
    if (output["Destination"] !== void 0) {
      contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlTag = (output, context) => {
    let contents = {
      Key: void 0,
      Value: void 0
    };
    if (output["Key"] !== void 0) {
      contents.Key = output["Key"];
    }
    if (output["Value"] !== void 0) {
      contents.Value = output["Value"];
    }
    return contents;
  };
  var deserializeAws_restXmlTagSet = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlTag(entry, context));
  };
  var deserializeAws_restXmlTargetGrant = (output, context) => {
    let contents = {
      Grantee: void 0,
      Permission: void 0
    };
    if (output["Grantee"] !== void 0) {
      contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    }
    if (output["Permission"] !== void 0) {
      contents.Permission = output["Permission"];
    }
    return contents;
  };
  var deserializeAws_restXmlTargetGrants = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlTargetGrant(entry, context));
  };
  var deserializeAws_restXmlTiering = (output, context) => {
    let contents = {
      Days: void 0,
      AccessTier: void 0
    };
    if (output["Days"] !== void 0) {
      contents.Days = parseInt(output["Days"]);
    }
    if (output["AccessTier"] !== void 0) {
      contents.AccessTier = output["AccessTier"];
    }
    return contents;
  };
  var deserializeAws_restXmlTieringList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlTiering(entry, context));
  };
  var deserializeAws_restXmlTopicConfiguration = (output, context) => {
    let contents = {
      Id: void 0,
      TopicArn: void 0,
      Events: void 0,
      Filter: void 0
    };
    if (output["Id"] !== void 0) {
      contents.Id = output["Id"];
    }
    if (output["Topic"] !== void 0) {
      contents.TopicArn = output["Topic"];
    }
    if (output.Event === "") {
      contents.Events = [];
    }
    if (output["Event"] !== void 0) {
      contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output["Event"]), context);
    }
    if (output["Filter"] !== void 0) {
      contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    }
    return contents;
  };
  var deserializeAws_restXmlTopicConfigurationList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlTopicConfiguration(entry, context));
  };
  var deserializeAws_restXmlTransition = (output, context) => {
    let contents = {
      Date: void 0,
      Days: void 0,
      StorageClass: void 0
    };
    if (output["Date"] !== void 0) {
      contents.Date = new Date(output["Date"]);
    }
    if (output["Days"] !== void 0) {
      contents.Days = parseInt(output["Days"]);
    }
    if (output["StorageClass"] !== void 0) {
      contents.StorageClass = output["StorageClass"];
    }
    return contents;
  };
  var deserializeAws_restXmlTransitionList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restXmlTransition(entry, context));
  };
  var deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
  });
  var collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
      return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
  };
  var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
  var isSerializableHeaderValue = (value) => value !== void 0 && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
  var decodeEscapedXML = (str) => str.replace(/&amp;/g, "&").replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&gt;/g, ">").replace(/&lt;/g, "<");
  var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parsedObj = fast_xml_parser_1.parse(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        tagValueProcessor: (val, tagName) => decodeEscapedXML(val)
      });
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return smithy_client_1.getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
  var loadRestXmlErrorCode = (output, data) => {
    if (data.Code !== void 0) {
      return data.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
    return "";
  };
});

// node_modules/@aws-sdk/middleware-serde/node_modules/tslib/tslib.js
var require_tslib25 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-serde/dist/cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.deserializerMiddleware = void 0;
  var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
    const {logger, outputFilterSensitiveLog} = context;
    const {response} = await next(args);
    const parsed = await deserializer(response, options);
    const {$metadata, ...outputWithoutMetadata} = parsed;
    if (typeof (logger === null || logger === void 0 ? void 0 : logger.info) === "function") {
      logger.info({
        output: outputFilterSensitiveLog(outputWithoutMetadata)
      });
    }
    return {
      response,
      output: parsed
    };
  };
  exports2.deserializerMiddleware = deserializerMiddleware;
});

// node_modules/@aws-sdk/middleware-serde/dist/cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.serializerMiddleware = void 0;
  var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
    const {logger, inputFilterSensitiveLog} = context;
    if (typeof (logger === null || logger === void 0 ? void 0 : logger.info) === "function") {
      logger.info({
        input: inputFilterSensitiveLog(args.input)
      });
    }
    const request = await serializer(args.input, options);
    return next({
      ...args,
      request
    });
  };
  exports2.serializerMiddleware = serializerMiddleware;
});

// node_modules/@aws-sdk/middleware-serde/dist/cjs/serdePlugin.js
var require_serdePlugin = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
  var deserializerMiddleware_1 = require_deserializerMiddleware();
  var serializerMiddleware_1 = require_serializerMiddleware();
  exports2.deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"]
  };
  exports2.serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"]
  };
  function getSerdePlugin(config, serializer, deserializer) {
    return {
      applyToStack: (commandStack) => {
        commandStack.add(deserializerMiddleware_1.deserializerMiddleware(config, deserializer), exports2.deserializerMiddlewareOption);
        commandStack.add(serializerMiddleware_1.serializerMiddleware(config, serializer), exports2.serializerMiddlewareOption);
      }
    };
  }
  exports2.getSerdePlugin = getSerdePlugin;
});

// node_modules/@aws-sdk/middleware-serde/dist/cjs/index.js
var require_cjs44 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib25();
  tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
  tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  tslib_1.__exportStar(require_serdePlugin(), exports2);
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/AbortMultipartUploadCommand.js
var require_AbortMultipartUploadCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.AbortMultipartUploadCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var AbortMultipartUploadCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "AbortMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.AbortMultipartUploadRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.AbortMultipartUploadOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlAbortMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlAbortMultipartUploadCommand(output, context);
    }
  };
  exports2.AbortMultipartUploadCommand = AbortMultipartUploadCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/CompleteMultipartUploadCommand.js
var require_CompleteMultipartUploadCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.CompleteMultipartUploadCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_sdk_s3_1 = require_cjs37();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var CompleteMultipartUploadCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "CompleteMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.CompleteMultipartUploadRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.CompleteMultipartUploadOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlCompleteMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);
    }
  };
  exports2.CompleteMultipartUploadCommand = CompleteMultipartUploadCommand;
});

// node_modules/@aws-sdk/middleware-ssec/dist/cjs/index.js
var require_cjs45 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSsecPlugin = exports2.ssecMiddlewareOptions = exports2.ssecMiddleware = void 0;
  function ssecMiddleware(options) {
    return (next) => async (args) => {
      let input = {...args.input};
      const properties = [
        {
          target: "SSECustomerKey",
          hash: "SSECustomerKeyMD5"
        },
        {
          target: "CopySourceSSECustomerKey",
          hash: "CopySourceSSECustomerKeyMD5"
        }
      ];
      for (const prop of properties) {
        const value = input[prop.target];
        if (value) {
          const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
          const encoded = options.base64Encoder(valueView);
          const hash = new options.md5();
          hash.update(valueView);
          input = {
            ...input,
            [prop.target]: encoded,
            [prop.hash]: options.base64Encoder(await hash.digest())
          };
        }
      }
      return next({
        ...args,
        input
      });
    };
  }
  exports2.ssecMiddleware = ssecMiddleware;
  exports2.ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"]
  };
  var getSsecPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(ssecMiddleware(config), exports2.ssecMiddlewareOptions);
    }
  });
  exports2.getSsecPlugin = getSsecPlugin;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/CopyObjectCommand.js
var require_CopyObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.CopyObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_sdk_s3_1 = require_cjs37();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var CopyObjectCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "CopyObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.CopyObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.CopyObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlCopyObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlCopyObjectCommand(output, context);
    }
  };
  exports2.CopyObjectCommand = CopyObjectCommand;
});

// node_modules/@aws-sdk/middleware-location-constraint/dist/cjs/index.js
var require_cjs46 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getLocationConstraintPlugin = exports2.locationConstraintMiddlewareOptions = exports2.locationConstraintMiddleware = void 0;
  function locationConstraintMiddleware(options) {
    return (next) => async (args) => {
      const {CreateBucketConfiguration} = args.input;
      const region = await options.region();
      if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
        args = {
          ...args,
          input: {
            ...args.input,
            CreateBucketConfiguration: region === "us-east-1" ? void 0 : {LocationConstraint: region}
          }
        };
      }
      return next(args);
    };
  }
  exports2.locationConstraintMiddleware = locationConstraintMiddleware;
  exports2.locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware"
  };
  var getLocationConstraintPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(locationConstraintMiddleware(config), exports2.locationConstraintMiddlewareOptions);
    }
  });
  exports2.getLocationConstraintPlugin = getLocationConstraintPlugin;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/CreateBucketCommand.js
var require_CreateBucketCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.CreateBucketCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_location_constraint_1 = require_cjs46();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var CreateBucketCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_location_constraint_1.getLocationConstraintPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "CreateBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.CreateBucketRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.CreateBucketOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlCreateBucketCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlCreateBucketCommand(output, context);
    }
  };
  exports2.CreateBucketCommand = CreateBucketCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/CreateMultipartUploadCommand.js
var require_CreateMultipartUploadCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.CreateMultipartUploadCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var CreateMultipartUploadCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "CreateMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.CreateMultipartUploadRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.CreateMultipartUploadOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlCreateMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlCreateMultipartUploadCommand(output, context);
    }
  };
  exports2.CreateMultipartUploadCommand = CreateMultipartUploadCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketAnalyticsConfigurationCommand.js
var require_DeleteBucketAnalyticsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketAnalyticsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(output, context);
    }
  };
  exports2.DeleteBucketAnalyticsConfigurationCommand = DeleteBucketAnalyticsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketCommand.js
var require_DeleteBucketCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketCommand(output, context);
    }
  };
  exports2.DeleteBucketCommand = DeleteBucketCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketCorsCommand.js
var require_DeleteBucketCorsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketCorsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketCorsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketCorsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketCorsCommand(output, context);
    }
  };
  exports2.DeleteBucketCorsCommand = DeleteBucketCorsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketEncryptionCommand.js
var require_DeleteBucketEncryptionCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketEncryptionCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketEncryptionCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketEncryptionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketEncryptionCommand(output, context);
    }
  };
  exports2.DeleteBucketEncryptionCommand = DeleteBucketEncryptionCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketIntelligentTieringConfigurationCommand.js
var require_DeleteBucketIntelligentTieringConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketIntelligentTieringConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(output, context);
    }
  };
  exports2.DeleteBucketIntelligentTieringConfigurationCommand = DeleteBucketIntelligentTieringConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketInventoryConfigurationCommand.js
var require_DeleteBucketInventoryConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketInventoryConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketInventoryConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand(output, context);
    }
  };
  exports2.DeleteBucketInventoryConfigurationCommand = DeleteBucketInventoryConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketLifecycleCommand.js
var require_DeleteBucketLifecycleCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketLifecycleCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketLifecycleCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketLifecycleCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketLifecycleRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketLifecycleCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketLifecycleCommand(output, context);
    }
  };
  exports2.DeleteBucketLifecycleCommand = DeleteBucketLifecycleCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketMetricsConfigurationCommand.js
var require_DeleteBucketMetricsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketMetricsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketMetricsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand(output, context);
    }
  };
  exports2.DeleteBucketMetricsConfigurationCommand = DeleteBucketMetricsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketOwnershipControlsCommand.js
var require_DeleteBucketOwnershipControlsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketOwnershipControlsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketOwnershipControlsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand(output, context);
    }
  };
  exports2.DeleteBucketOwnershipControlsCommand = DeleteBucketOwnershipControlsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketPolicyCommand.js
var require_DeleteBucketPolicyCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketPolicyCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketPolicyCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketPolicyCommand(output, context);
    }
  };
  exports2.DeleteBucketPolicyCommand = DeleteBucketPolicyCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketReplicationCommand.js
var require_DeleteBucketReplicationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketReplicationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketReplicationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketReplicationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketReplicationCommand(output, context);
    }
  };
  exports2.DeleteBucketReplicationCommand = DeleteBucketReplicationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketTaggingCommand.js
var require_DeleteBucketTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketTaggingCommand(output, context);
    }
  };
  exports2.DeleteBucketTaggingCommand = DeleteBucketTaggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteBucketWebsiteCommand.js
var require_DeleteBucketWebsiteCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteBucketWebsiteCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteBucketWebsiteCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteBucketWebsiteRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteBucketWebsiteCommand(output, context);
    }
  };
  exports2.DeleteBucketWebsiteCommand = DeleteBucketWebsiteCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteObjectCommand.js
var require_DeleteObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteObjectCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.DeleteObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteObjectCommand(output, context);
    }
  };
  exports2.DeleteObjectCommand = DeleteObjectCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteObjectTaggingCommand.js
var require_DeleteObjectTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteObjectTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteObjectTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteObjectTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.DeleteObjectTaggingOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteObjectTaggingCommand(output, context);
    }
  };
  exports2.DeleteObjectTaggingCommand = DeleteObjectTaggingCommand;
});

// node_modules/@aws-sdk/middleware-apply-body-checksum/node_modules/tslib/tslib.js
var require_tslib26 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/middleware-apply-body-checksum/dist/cjs/md5Configuration.js
var require_md5Configuration = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveMd5BodyChecksumConfig = void 0;
  function resolveMd5BodyChecksumConfig(input) {
    return {
      ...input
    };
  }
  exports2.resolveMd5BodyChecksumConfig = resolveMd5BodyChecksumConfig;
});

// node_modules/@aws-sdk/middleware-apply-body-checksum/dist/cjs/applyMd5BodyChecksumMiddleware.js
var require_applyMd5BodyChecksumMiddleware = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getApplyMd5BodyChecksumPlugin = exports2.applyMd5BodyChecksumMiddlewareOptions = exports2.applyMd5BodyChecksumMiddleware = void 0;
  var is_array_buffer_1 = require_cjs13();
  var protocol_http_1 = require_cjs17();
  function applyMd5BodyChecksumMiddleware(options) {
    return (next) => async (args) => {
      let {request} = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        const {body, headers} = request;
        if (!hasHeader("Content-MD5", headers)) {
          let digest;
          if (body === void 0 || typeof body === "string" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {
            const hash = new options.md5();
            hash.update(body || "");
            digest = hash.digest();
          } else {
            digest = options.streamHasher(options.md5, body);
          }
          request = {
            ...request,
            headers: {
              ...headers,
              "Content-MD5": options.base64Encoder(await digest)
            }
          };
        }
      }
      return next({
        ...args,
        request
      });
    };
  }
  exports2.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;
  exports2.applyMd5BodyChecksumMiddlewareOptions = {
    name: "applyMd5BodyChecksumMiddleware",
    step: "build",
    tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"]
  };
  var getApplyMd5BodyChecksumPlugin = (config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(applyMd5BodyChecksumMiddleware(config), exports2.applyMd5BodyChecksumMiddlewareOptions);
    }
  });
  exports2.getApplyMd5BodyChecksumPlugin = getApplyMd5BodyChecksumPlugin;
  function hasHeader(soughtHeader, headers) {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }
});

// node_modules/@aws-sdk/middleware-apply-body-checksum/dist/cjs/index.js
var require_cjs47 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib26();
  tslib_1.__exportStar(require_md5Configuration(), exports2);
  tslib_1.__exportStar(require_applyMd5BodyChecksumMiddleware(), exports2);
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeleteObjectsCommand.js
var require_DeleteObjectsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeleteObjectsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeleteObjectsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeleteObjectsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.DeleteObjectsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeleteObjectsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeleteObjectsCommand(output, context);
    }
  };
  exports2.DeleteObjectsCommand = DeleteObjectsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/DeletePublicAccessBlockCommand.js
var require_DeletePublicAccessBlockCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DeletePublicAccessBlockCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var DeletePublicAccessBlockCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "DeletePublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.DeletePublicAccessBlockRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlDeletePublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlDeletePublicAccessBlockCommand(output, context);
    }
  };
  exports2.DeletePublicAccessBlockCommand = DeletePublicAccessBlockCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketAccelerateConfigurationCommand.js
var require_GetBucketAccelerateConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketAccelerateConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketAccelerateConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAccelerateConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketAccelerateConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketAccelerateConfigurationCommand = GetBucketAccelerateConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketAclCommand.js
var require_GetBucketAclCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketAclCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketAclCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketAclRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketAclOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketAclCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketAclCommand(output, context);
    }
  };
  exports2.GetBucketAclCommand = GetBucketAclCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketAnalyticsConfigurationCommand.js
var require_GetBucketAnalyticsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketAnalyticsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketAnalyticsConfigurationCommand = GetBucketAnalyticsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketCorsCommand.js
var require_GetBucketCorsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketCorsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketCorsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketCorsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketCorsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketCorsCommand(output, context);
    }
  };
  exports2.GetBucketCorsCommand = GetBucketCorsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketEncryptionCommand.js
var require_GetBucketEncryptionCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketEncryptionCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketEncryptionCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketEncryptionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketEncryptionOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketEncryptionCommand(output, context);
    }
  };
  exports2.GetBucketEncryptionCommand = GetBucketEncryptionCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketIntelligentTieringConfigurationCommand.js
var require_GetBucketIntelligentTieringConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketIntelligentTieringConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketIntelligentTieringConfigurationCommand = GetBucketIntelligentTieringConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketInventoryConfigurationCommand.js
var require_GetBucketInventoryConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketInventoryConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketInventoryConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketInventoryConfigurationCommand = GetBucketInventoryConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketLifecycleConfigurationCommand.js
var require_GetBucketLifecycleConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketLifecycleConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketLifecycleConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLifecycleConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketLifecycleConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketLifecycleConfigurationCommand = GetBucketLifecycleConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketLocationCommand.js
var require_GetBucketLocationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketLocationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketLocationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLocationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketLocationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketLocationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketLocationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketLocationCommand(output, context);
    }
  };
  exports2.GetBucketLocationCommand = GetBucketLocationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketLoggingCommand.js
var require_GetBucketLoggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketLoggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketLoggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLoggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketLoggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketLoggingOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketLoggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketLoggingCommand(output, context);
    }
  };
  exports2.GetBucketLoggingCommand = GetBucketLoggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketMetricsConfigurationCommand.js
var require_GetBucketMetricsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketMetricsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketMetricsConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketMetricsConfigurationCommand = GetBucketMetricsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketNotificationConfigurationCommand.js
var require_GetBucketNotificationConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketNotificationConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketNotificationConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketNotificationConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketNotificationConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.NotificationConfiguration.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);
    }
  };
  exports2.GetBucketNotificationConfigurationCommand = GetBucketNotificationConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketOwnershipControlsCommand.js
var require_GetBucketOwnershipControlsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketOwnershipControlsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketOwnershipControlsCommand(output, context);
    }
  };
  exports2.GetBucketOwnershipControlsCommand = GetBucketOwnershipControlsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketPolicyCommand.js
var require_GetBucketPolicyCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketPolicyCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketPolicyCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketPolicyOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyCommand(output, context);
    }
  };
  exports2.GetBucketPolicyCommand = GetBucketPolicyCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketPolicyStatusCommand.js
var require_GetBucketPolicyStatusCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketPolicyStatusCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketPolicyStatusCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketPolicyStatusCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketPolicyStatusCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyStatusCommand(output, context);
    }
  };
  exports2.GetBucketPolicyStatusCommand = GetBucketPolicyStatusCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketReplicationCommand.js
var require_GetBucketReplicationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketReplicationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketReplicationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketReplicationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketReplicationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketReplicationCommand(output, context);
    }
  };
  exports2.GetBucketReplicationCommand = GetBucketReplicationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketRequestPaymentCommand.js
var require_GetBucketRequestPaymentCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketRequestPaymentCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketRequestPaymentCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketRequestPaymentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketRequestPaymentCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketRequestPaymentCommand(output, context);
    }
  };
  exports2.GetBucketRequestPaymentCommand = GetBucketRequestPaymentCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketTaggingCommand.js
var require_GetBucketTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketTaggingOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketTaggingCommand(output, context);
    }
  };
  exports2.GetBucketTaggingCommand = GetBucketTaggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketVersioningCommand.js
var require_GetBucketVersioningCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketVersioningCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketVersioningCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketVersioningCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketVersioningRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketVersioningOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketVersioningCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketVersioningCommand(output, context);
    }
  };
  exports2.GetBucketVersioningCommand = GetBucketVersioningCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetBucketWebsiteCommand.js
var require_GetBucketWebsiteCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetBucketWebsiteCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetBucketWebsiteCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetBucketWebsiteRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetBucketWebsiteOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetBucketWebsiteCommand(output, context);
    }
  };
  exports2.GetBucketWebsiteCommand = GetBucketWebsiteCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectAclCommand.js
var require_GetObjectAclCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectAclCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectAclCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectAclRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectAclOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectAclCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectAclCommand(output, context);
    }
  };
  exports2.GetObjectAclCommand = GetObjectAclCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectCommand.js
var require_GetObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var GetObjectCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectCommand(output, context);
    }
  };
  exports2.GetObjectCommand = GetObjectCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectLegalHoldCommand.js
var require_GetObjectLegalHoldCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectLegalHoldCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectLegalHoldCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectLegalHoldCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectLegalHoldRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectLegalHoldOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectLegalHoldCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectLegalHoldCommand(output, context);
    }
  };
  exports2.GetObjectLegalHoldCommand = GetObjectLegalHoldCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectLockConfigurationCommand.js
var require_GetObjectLockConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectLockConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectLockConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectLockConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectLockConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectLockConfigurationCommand(output, context);
    }
  };
  exports2.GetObjectLockConfigurationCommand = GetObjectLockConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectRetentionCommand.js
var require_GetObjectRetentionCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectRetentionCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectRetentionCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectRetentionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectRetentionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectRetentionOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectRetentionCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectRetentionCommand(output, context);
    }
  };
  exports2.GetObjectRetentionCommand = GetObjectRetentionCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectTaggingCommand.js
var require_GetObjectTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectTaggingOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectTaggingCommand(output, context);
    }
  };
  exports2.GetObjectTaggingCommand = GetObjectTaggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetObjectTorrentCommand.js
var require_GetObjectTorrentCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetObjectTorrentCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetObjectTorrentCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectTorrentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetObjectTorrentRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetObjectTorrentOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetObjectTorrentCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetObjectTorrentCommand(output, context);
    }
  };
  exports2.GetObjectTorrentCommand = GetObjectTorrentCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/GetPublicAccessBlockCommand.js
var require_GetPublicAccessBlockCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GetPublicAccessBlockCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var GetPublicAccessBlockCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "GetPublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.GetPublicAccessBlockRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.GetPublicAccessBlockOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlGetPublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlGetPublicAccessBlockCommand(output, context);
    }
  };
  exports2.GetPublicAccessBlockCommand = GetPublicAccessBlockCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/HeadBucketCommand.js
var require_HeadBucketCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HeadBucketCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var HeadBucketCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "HeadBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.HeadBucketRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlHeadBucketCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlHeadBucketCommand(output, context);
    }
  };
  exports2.HeadBucketCommand = HeadBucketCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/HeadObjectCommand.js
var require_HeadObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HeadObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var HeadObjectCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "HeadObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.HeadObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.HeadObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlHeadObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlHeadObjectCommand(output, context);
    }
  };
  exports2.HeadObjectCommand = HeadObjectCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListBucketAnalyticsConfigurationsCommand.js
var require_ListBucketAnalyticsConfigurationsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListBucketAnalyticsConfigurationsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListBucketAnalyticsConfigurationsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketAnalyticsConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand(output, context);
    }
  };
  exports2.ListBucketAnalyticsConfigurationsCommand = ListBucketAnalyticsConfigurationsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListBucketIntelligentTieringConfigurationsCommand.js
var require_ListBucketIntelligentTieringConfigurationsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListBucketIntelligentTieringConfigurationsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListBucketIntelligentTieringConfigurationsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(output, context);
    }
  };
  exports2.ListBucketIntelligentTieringConfigurationsCommand = ListBucketIntelligentTieringConfigurationsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListBucketInventoryConfigurationsCommand.js
var require_ListBucketInventoryConfigurationsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListBucketInventoryConfigurationsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListBucketInventoryConfigurationsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketInventoryConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListBucketInventoryConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListBucketInventoryConfigurationsCommand(output, context);
    }
  };
  exports2.ListBucketInventoryConfigurationsCommand = ListBucketInventoryConfigurationsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListBucketMetricsConfigurationsCommand.js
var require_ListBucketMetricsConfigurationsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListBucketMetricsConfigurationsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListBucketMetricsConfigurationsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketMetricsConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListBucketMetricsConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListBucketMetricsConfigurationsCommand(output, context);
    }
  };
  exports2.ListBucketMetricsConfigurationsCommand = ListBucketMetricsConfigurationsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListBucketsCommand.js
var require_ListBucketsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListBucketsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListBucketsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: (input) => input,
        outputFilterSensitiveLog: models_0_1.ListBucketsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListBucketsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListBucketsCommand(output, context);
    }
  };
  exports2.ListBucketsCommand = ListBucketsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListMultipartUploadsCommand.js
var require_ListMultipartUploadsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListMultipartUploadsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListMultipartUploadsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListMultipartUploadsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListMultipartUploadsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListMultipartUploadsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListMultipartUploadsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListMultipartUploadsCommand(output, context);
    }
  };
  exports2.ListMultipartUploadsCommand = ListMultipartUploadsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListObjectVersionsCommand.js
var require_ListObjectVersionsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListObjectVersionsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListObjectVersionsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectVersionsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListObjectVersionsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListObjectVersionsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListObjectVersionsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListObjectVersionsCommand(output, context);
    }
  };
  exports2.ListObjectVersionsCommand = ListObjectVersionsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListObjectsCommand.js
var require_ListObjectsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListObjectsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListObjectsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListObjectsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListObjectsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListObjectsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListObjectsCommand(output, context);
    }
  };
  exports2.ListObjectsCommand = ListObjectsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListObjectsV2Command.js
var require_ListObjectsV2Command = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListObjectsV2Command = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListObjectsV2Command = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectsV2Command";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListObjectsV2Request.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListObjectsV2Output.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListObjectsV2Command(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListObjectsV2Command(output, context);
    }
  };
  exports2.ListObjectsV2Command = ListObjectsV2Command;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/ListPartsCommand.js
var require_ListPartsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ListPartsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var ListPartsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "ListPartsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.ListPartsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.ListPartsOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlListPartsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlListPartsCommand(output, context);
    }
  };
  exports2.ListPartsCommand = ListPartsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketAccelerateConfigurationCommand.js
var require_PutBucketAccelerateConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketAccelerateConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketAccelerateConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAccelerateConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketAccelerateConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketAccelerateConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketAccelerateConfigurationCommand = PutBucketAccelerateConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketAclCommand.js
var require_PutBucketAclCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketAclCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketAclCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketAclRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketAclCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketAclCommand(output, context);
    }
  };
  exports2.PutBucketAclCommand = PutBucketAclCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketAnalyticsConfigurationCommand.js
var require_PutBucketAnalyticsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketAnalyticsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketAnalyticsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketAnalyticsConfigurationCommand = PutBucketAnalyticsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketCorsCommand.js
var require_PutBucketCorsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketCorsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketCorsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketCorsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketCorsCommand(output, context);
    }
  };
  exports2.PutBucketCorsCommand = PutBucketCorsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketEncryptionCommand.js
var require_PutBucketEncryptionCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketEncryptionCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketEncryptionCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketEncryptionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketEncryptionCommand(output, context);
    }
  };
  exports2.PutBucketEncryptionCommand = PutBucketEncryptionCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketIntelligentTieringConfigurationCommand.js
var require_PutBucketIntelligentTieringConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketIntelligentTieringConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketIntelligentTieringConfigurationCommand = PutBucketIntelligentTieringConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketInventoryConfigurationCommand.js
var require_PutBucketInventoryConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketInventoryConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketInventoryConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketInventoryConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketInventoryConfigurationCommand = PutBucketInventoryConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketLifecycleConfigurationCommand.js
var require_PutBucketLifecycleConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketLifecycleConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketLifecycleConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketLifecycleConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketLifecycleConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketLifecycleConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketLifecycleConfigurationCommand = PutBucketLifecycleConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketLoggingCommand.js
var require_PutBucketLoggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketLoggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketLoggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketLoggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketLoggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketLoggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketLoggingCommand(output, context);
    }
  };
  exports2.PutBucketLoggingCommand = PutBucketLoggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketMetricsConfigurationCommand.js
var require_PutBucketMetricsConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketMetricsConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketMetricsConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketMetricsConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketMetricsConfigurationCommand = PutBucketMetricsConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketNotificationConfigurationCommand.js
var require_PutBucketNotificationConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketNotificationConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketNotificationConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketNotificationConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketNotificationConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);
    }
  };
  exports2.PutBucketNotificationConfigurationCommand = PutBucketNotificationConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketOwnershipControlsCommand.js
var require_PutBucketOwnershipControlsCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketOwnershipControlsCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketOwnershipControlsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketOwnershipControlsCommand(output, context);
    }
  };
  exports2.PutBucketOwnershipControlsCommand = PutBucketOwnershipControlsCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketPolicyCommand.js
var require_PutBucketPolicyCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketPolicyCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketPolicyCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketPolicyCommand(output, context);
    }
  };
  exports2.PutBucketPolicyCommand = PutBucketPolicyCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketReplicationCommand.js
var require_PutBucketReplicationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketReplicationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketReplicationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketReplicationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketReplicationCommand(output, context);
    }
  };
  exports2.PutBucketReplicationCommand = PutBucketReplicationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketRequestPaymentCommand.js
var require_PutBucketRequestPaymentCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketRequestPaymentCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketRequestPaymentCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketRequestPaymentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketRequestPaymentRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketRequestPaymentCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketRequestPaymentCommand(output, context);
    }
  };
  exports2.PutBucketRequestPaymentCommand = PutBucketRequestPaymentCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketTaggingCommand.js
var require_PutBucketTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_apply_body_checksum_1 = require_cjs47();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketTaggingCommand(output, context);
    }
  };
  exports2.PutBucketTaggingCommand = PutBucketTaggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketVersioningCommand.js
var require_PutBucketVersioningCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketVersioningCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketVersioningCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketVersioningCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketVersioningRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketVersioningCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketVersioningCommand(output, context);
    }
  };
  exports2.PutBucketVersioningCommand = PutBucketVersioningCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutBucketWebsiteCommand.js
var require_PutBucketWebsiteCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutBucketWebsiteCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutBucketWebsiteCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutBucketWebsiteRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutBucketWebsiteCommand(output, context);
    }
  };
  exports2.PutBucketWebsiteCommand = PutBucketWebsiteCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectAclCommand.js
var require_PutObjectAclCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectAclCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutObjectAclCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectAclRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectAclOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectAclCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectAclCommand(output, context);
    }
  };
  exports2.PutObjectAclCommand = PutObjectAclCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectCommand.js
var require_PutObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var PutObjectCommand2 = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectCommand(output, context);
    }
  };
  exports2.PutObjectCommand = PutObjectCommand2;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectLegalHoldCommand.js
var require_PutObjectLegalHoldCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectLegalHoldCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutObjectLegalHoldCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectLegalHoldCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectLegalHoldRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectLegalHoldOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectLegalHoldCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectLegalHoldCommand(output, context);
    }
  };
  exports2.PutObjectLegalHoldCommand = PutObjectLegalHoldCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectLockConfigurationCommand.js
var require_PutObjectLockConfigurationCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectLockConfigurationCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutObjectLockConfigurationCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectLockConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectLockConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectLockConfigurationCommand(output, context);
    }
  };
  exports2.PutObjectLockConfigurationCommand = PutObjectLockConfigurationCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectRetentionCommand.js
var require_PutObjectRetentionCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectRetentionCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutObjectRetentionCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectRetentionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectRetentionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectRetentionOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectRetentionCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectRetentionCommand(output, context);
    }
  };
  exports2.PutObjectRetentionCommand = PutObjectRetentionCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutObjectTaggingCommand.js
var require_PutObjectTaggingCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutObjectTaggingCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutObjectTaggingCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutObjectTaggingRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.PutObjectTaggingOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutObjectTaggingCommand(output, context);
    }
  };
  exports2.PutObjectTaggingCommand = PutObjectTaggingCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/PutPublicAccessBlockCommand.js
var require_PutPublicAccessBlockCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PutPublicAccessBlockCommand = void 0;
  var models_0_1 = require_models_0();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var PutPublicAccessBlockCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "PutPublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_0_1.PutPublicAccessBlockRequest.filterSensitiveLog,
        outputFilterSensitiveLog: (output) => output
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlPutPublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlPutPublicAccessBlockCommand(output, context);
    }
  };
  exports2.PutPublicAccessBlockCommand = PutPublicAccessBlockCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/models/models_1.js
var require_models_1 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.UploadPartCopyRequest = exports2.UploadPartCopyOutput = exports2.CopyPartResult = exports2.UploadPartRequest = exports2.UploadPartOutput = exports2.SelectObjectContentRequest = exports2.ScanRange = exports2.RequestProgress = exports2.SelectObjectContentOutput = exports2.SelectObjectContentEventStream = exports2.StatsEvent = exports2.Stats = exports2.RecordsEvent = exports2.ProgressEvent = exports2.Progress = exports2.EndEvent = exports2.ContinuationEvent = exports2.RestoreObjectRequest = exports2.RestoreRequest = exports2.RestoreRequestType = exports2.SelectParameters = exports2.OutputSerialization = exports2.JSONOutput = exports2.CSVOutput = exports2.QuoteFields = exports2.InputSerialization = exports2.ParquetInput = exports2.JSONInput = exports2.JSONType = exports2.CSVInput = exports2.FileHeaderInfo = exports2.OutputLocation = exports2.S3Location = exports2.MetadataEntry = void 0;
  var models_0_1 = require_models_0();
  var smithy_client_1 = require_cjs42();
  var MetadataEntry;
  (function(MetadataEntry2) {
    MetadataEntry2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(MetadataEntry = exports2.MetadataEntry || (exports2.MetadataEntry = {}));
  var S3Location;
  (function(S3Location2) {
    S3Location2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && {Encryption: models_0_1.Encryption.filterSensitiveLog(obj.Encryption)}
    });
  })(S3Location = exports2.S3Location || (exports2.S3Location = {}));
  var OutputLocation;
  (function(OutputLocation2) {
    OutputLocation2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3 && {S3: S3Location.filterSensitiveLog(obj.S3)}
    });
  })(OutputLocation = exports2.OutputLocation || (exports2.OutputLocation = {}));
  var FileHeaderInfo;
  (function(FileHeaderInfo2) {
    FileHeaderInfo2["IGNORE"] = "IGNORE";
    FileHeaderInfo2["NONE"] = "NONE";
    FileHeaderInfo2["USE"] = "USE";
  })(FileHeaderInfo = exports2.FileHeaderInfo || (exports2.FileHeaderInfo = {}));
  var CSVInput;
  (function(CSVInput2) {
    CSVInput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CSVInput = exports2.CSVInput || (exports2.CSVInput = {}));
  var JSONType;
  (function(JSONType2) {
    JSONType2["DOCUMENT"] = "DOCUMENT";
    JSONType2["LINES"] = "LINES";
  })(JSONType = exports2.JSONType || (exports2.JSONType = {}));
  var JSONInput;
  (function(JSONInput2) {
    JSONInput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(JSONInput = exports2.JSONInput || (exports2.JSONInput = {}));
  var ParquetInput;
  (function(ParquetInput2) {
    ParquetInput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ParquetInput = exports2.ParquetInput || (exports2.ParquetInput = {}));
  var InputSerialization;
  (function(InputSerialization2) {
    InputSerialization2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(InputSerialization = exports2.InputSerialization || (exports2.InputSerialization = {}));
  var QuoteFields;
  (function(QuoteFields2) {
    QuoteFields2["ALWAYS"] = "ALWAYS";
    QuoteFields2["ASNEEDED"] = "ASNEEDED";
  })(QuoteFields = exports2.QuoteFields || (exports2.QuoteFields = {}));
  var CSVOutput;
  (function(CSVOutput2) {
    CSVOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CSVOutput = exports2.CSVOutput || (exports2.CSVOutput = {}));
  var JSONOutput;
  (function(JSONOutput2) {
    JSONOutput2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(JSONOutput = exports2.JSONOutput || (exports2.JSONOutput = {}));
  var OutputSerialization;
  (function(OutputSerialization2) {
    OutputSerialization2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(OutputSerialization = exports2.OutputSerialization || (exports2.OutputSerialization = {}));
  var SelectParameters;
  (function(SelectParameters2) {
    SelectParameters2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(SelectParameters = exports2.SelectParameters || (exports2.SelectParameters = {}));
  var RestoreRequestType;
  (function(RestoreRequestType2) {
    RestoreRequestType2["SELECT"] = "SELECT";
  })(RestoreRequestType = exports2.RestoreRequestType || (exports2.RestoreRequestType = {}));
  var RestoreRequest;
  (function(RestoreRequest2) {
    RestoreRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutputLocation && {OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation)}
    });
  })(RestoreRequest = exports2.RestoreRequest || (exports2.RestoreRequest = {}));
  var RestoreObjectRequest;
  (function(RestoreObjectRequest2) {
    RestoreObjectRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RestoreRequest && {RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest)}
    });
  })(RestoreObjectRequest = exports2.RestoreObjectRequest || (exports2.RestoreObjectRequest = {}));
  var ContinuationEvent;
  (function(ContinuationEvent2) {
    ContinuationEvent2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ContinuationEvent = exports2.ContinuationEvent || (exports2.ContinuationEvent = {}));
  var EndEvent;
  (function(EndEvent2) {
    EndEvent2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(EndEvent = exports2.EndEvent || (exports2.EndEvent = {}));
  var Progress;
  (function(Progress2) {
    Progress2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Progress = exports2.Progress || (exports2.Progress = {}));
  var ProgressEvent;
  (function(ProgressEvent2) {
    ProgressEvent2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ProgressEvent = exports2.ProgressEvent || (exports2.ProgressEvent = {}));
  var RecordsEvent;
  (function(RecordsEvent2) {
    RecordsEvent2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RecordsEvent = exports2.RecordsEvent || (exports2.RecordsEvent = {}));
  var Stats;
  (function(Stats2) {
    Stats2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(Stats = exports2.Stats || (exports2.Stats = {}));
  var StatsEvent;
  (function(StatsEvent2) {
    StatsEvent2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(StatsEvent = exports2.StatsEvent || (exports2.StatsEvent = {}));
  var SelectObjectContentEventStream;
  (function(SelectObjectContentEventStream2) {
    SelectObjectContentEventStream2.visit = (value, visitor) => {
      if (value.Records !== void 0)
        return visitor.Records(value.Records);
      if (value.Stats !== void 0)
        return visitor.Stats(value.Stats);
      if (value.Progress !== void 0)
        return visitor.Progress(value.Progress);
      if (value.Cont !== void 0)
        return visitor.Cont(value.Cont);
      if (value.End !== void 0)
        return visitor.End(value.End);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    SelectObjectContentEventStream2.filterSensitiveLog = (obj) => {
      if (obj.Records !== void 0)
        return {Records: RecordsEvent.filterSensitiveLog(obj.Records)};
      if (obj.Stats !== void 0)
        return {Stats: StatsEvent.filterSensitiveLog(obj.Stats)};
      if (obj.Progress !== void 0)
        return {Progress: ProgressEvent.filterSensitiveLog(obj.Progress)};
      if (obj.Cont !== void 0)
        return {Cont: ContinuationEvent.filterSensitiveLog(obj.Cont)};
      if (obj.End !== void 0)
        return {End: EndEvent.filterSensitiveLog(obj.End)};
      if (obj.$unknown !== void 0)
        return {[obj.$unknown[0]]: "UNKNOWN"};
    };
  })(SelectObjectContentEventStream = exports2.SelectObjectContentEventStream || (exports2.SelectObjectContentEventStream = {}));
  var SelectObjectContentOutput;
  (function(SelectObjectContentOutput2) {
    SelectObjectContentOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && {Payload: "STREAMING_CONTENT"}
    });
  })(SelectObjectContentOutput = exports2.SelectObjectContentOutput || (exports2.SelectObjectContentOutput = {}));
  var RequestProgress;
  (function(RequestProgress2) {
    RequestProgress2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(RequestProgress = exports2.RequestProgress || (exports2.RequestProgress = {}));
  var ScanRange;
  (function(ScanRange2) {
    ScanRange2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(ScanRange = exports2.ScanRange || (exports2.ScanRange = {}));
  var SelectObjectContentRequest;
  (function(SelectObjectContentRequest2) {
    SelectObjectContentRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(SelectObjectContentRequest = exports2.SelectObjectContentRequest || (exports2.SelectObjectContentRequest = {}));
  var UploadPartOutput;
  (function(UploadPartOutput2) {
    UploadPartOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(UploadPartOutput = exports2.UploadPartOutput || (exports2.UploadPartOutput = {}));
  var UploadPartRequest;
  (function(UploadPartRequest2) {
    UploadPartRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(UploadPartRequest = exports2.UploadPartRequest || (exports2.UploadPartRequest = {}));
  var CopyPartResult;
  (function(CopyPartResult2) {
    CopyPartResult2.filterSensitiveLog = (obj) => ({
      ...obj
    });
  })(CopyPartResult = exports2.CopyPartResult || (exports2.CopyPartResult = {}));
  var UploadPartCopyOutput;
  (function(UploadPartCopyOutput2) {
    UploadPartCopyOutput2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && {SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING}
    });
  })(UploadPartCopyOutput = exports2.UploadPartCopyOutput || (exports2.UploadPartCopyOutput = {}));
  var UploadPartCopyRequest;
  (function(UploadPartCopyRequest2) {
    UploadPartCopyRequest2.filterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && {SSECustomerKey: smithy_client_1.SENSITIVE_STRING},
      ...obj.CopySourceSSECustomerKey && {CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING}
    });
  })(UploadPartCopyRequest = exports2.UploadPartCopyRequest || (exports2.UploadPartCopyRequest = {}));
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/RestoreObjectCommand.js
var require_RestoreObjectCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.RestoreObjectCommand = void 0;
  var models_0_1 = require_models_0();
  var models_1_1 = require_models_1();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var smithy_client_1 = require_cjs42();
  var RestoreObjectCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "RestoreObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_1_1.RestoreObjectRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_0_1.RestoreObjectOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlRestoreObjectCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlRestoreObjectCommand(output, context);
    }
  };
  exports2.RestoreObjectCommand = RestoreObjectCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/SelectObjectContentCommand.js
var require_SelectObjectContentCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SelectObjectContentCommand = void 0;
  var models_1_1 = require_models_1();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var SelectObjectContentCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "SelectObjectContentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_1_1.SelectObjectContentRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_1_1.SelectObjectContentOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlSelectObjectContentCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlSelectObjectContentCommand(output, context);
    }
  };
  exports2.SelectObjectContentCommand = SelectObjectContentCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/UploadPartCommand.js
var require_UploadPartCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.UploadPartCommand = void 0;
  var models_1_1 = require_models_1();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var UploadPartCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "UploadPartCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_1_1.UploadPartRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_1_1.UploadPartOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlUploadPartCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlUploadPartCommand(output, context);
    }
  };
  exports2.UploadPartCommand = UploadPartCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/commands/UploadPartCopyCommand.js
var require_UploadPartCopyCommand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.UploadPartCopyCommand = void 0;
  var models_1_1 = require_models_1();
  var Aws_restXml_1 = require_Aws_restXml();
  var middleware_bucket_endpoint_1 = require_cjs19();
  var middleware_sdk_s3_1 = require_cjs37();
  var middleware_serde_1 = require_cjs44();
  var middleware_ssec_1 = require_cjs45();
  var smithy_client_1 = require_cjs42();
  var UploadPartCopyCommand = class extends smithy_client_1.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));
      this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {logger} = configuration;
      const clientName = "S3Client";
      const commandName = "UploadPartCopyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: models_1_1.UploadPartCopyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: models_1_1.UploadPartCopyOutput.filterSensitiveLog
      };
      if (typeof logger.info === "function") {
        logger.info({
          clientName,
          commandName
        });
      }
      const {requestHandler} = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return Aws_restXml_1.serializeAws_restXmlUploadPartCopyCommand(input, context);
    }
    deserialize(output, context) {
      return Aws_restXml_1.deserializeAws_restXmlUploadPartCopyCommand(output, context);
    }
  };
  exports2.UploadPartCopyCommand = UploadPartCopyCommand;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/S3.js
var require_S3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.S3 = void 0;
  var S3Client_1 = require_S3Client();
  var AbortMultipartUploadCommand_1 = require_AbortMultipartUploadCommand();
  var CompleteMultipartUploadCommand_1 = require_CompleteMultipartUploadCommand();
  var CopyObjectCommand_1 = require_CopyObjectCommand();
  var CreateBucketCommand_1 = require_CreateBucketCommand();
  var CreateMultipartUploadCommand_1 = require_CreateMultipartUploadCommand();
  var DeleteBucketAnalyticsConfigurationCommand_1 = require_DeleteBucketAnalyticsConfigurationCommand();
  var DeleteBucketCommand_1 = require_DeleteBucketCommand();
  var DeleteBucketCorsCommand_1 = require_DeleteBucketCorsCommand();
  var DeleteBucketEncryptionCommand_1 = require_DeleteBucketEncryptionCommand();
  var DeleteBucketIntelligentTieringConfigurationCommand_1 = require_DeleteBucketIntelligentTieringConfigurationCommand();
  var DeleteBucketInventoryConfigurationCommand_1 = require_DeleteBucketInventoryConfigurationCommand();
  var DeleteBucketLifecycleCommand_1 = require_DeleteBucketLifecycleCommand();
  var DeleteBucketMetricsConfigurationCommand_1 = require_DeleteBucketMetricsConfigurationCommand();
  var DeleteBucketOwnershipControlsCommand_1 = require_DeleteBucketOwnershipControlsCommand();
  var DeleteBucketPolicyCommand_1 = require_DeleteBucketPolicyCommand();
  var DeleteBucketReplicationCommand_1 = require_DeleteBucketReplicationCommand();
  var DeleteBucketTaggingCommand_1 = require_DeleteBucketTaggingCommand();
  var DeleteBucketWebsiteCommand_1 = require_DeleteBucketWebsiteCommand();
  var DeleteObjectCommand_1 = require_DeleteObjectCommand();
  var DeleteObjectTaggingCommand_1 = require_DeleteObjectTaggingCommand();
  var DeleteObjectsCommand_1 = require_DeleteObjectsCommand();
  var DeletePublicAccessBlockCommand_1 = require_DeletePublicAccessBlockCommand();
  var GetBucketAccelerateConfigurationCommand_1 = require_GetBucketAccelerateConfigurationCommand();
  var GetBucketAclCommand_1 = require_GetBucketAclCommand();
  var GetBucketAnalyticsConfigurationCommand_1 = require_GetBucketAnalyticsConfigurationCommand();
  var GetBucketCorsCommand_1 = require_GetBucketCorsCommand();
  var GetBucketEncryptionCommand_1 = require_GetBucketEncryptionCommand();
  var GetBucketIntelligentTieringConfigurationCommand_1 = require_GetBucketIntelligentTieringConfigurationCommand();
  var GetBucketInventoryConfigurationCommand_1 = require_GetBucketInventoryConfigurationCommand();
  var GetBucketLifecycleConfigurationCommand_1 = require_GetBucketLifecycleConfigurationCommand();
  var GetBucketLocationCommand_1 = require_GetBucketLocationCommand();
  var GetBucketLoggingCommand_1 = require_GetBucketLoggingCommand();
  var GetBucketMetricsConfigurationCommand_1 = require_GetBucketMetricsConfigurationCommand();
  var GetBucketNotificationConfigurationCommand_1 = require_GetBucketNotificationConfigurationCommand();
  var GetBucketOwnershipControlsCommand_1 = require_GetBucketOwnershipControlsCommand();
  var GetBucketPolicyCommand_1 = require_GetBucketPolicyCommand();
  var GetBucketPolicyStatusCommand_1 = require_GetBucketPolicyStatusCommand();
  var GetBucketReplicationCommand_1 = require_GetBucketReplicationCommand();
  var GetBucketRequestPaymentCommand_1 = require_GetBucketRequestPaymentCommand();
  var GetBucketTaggingCommand_1 = require_GetBucketTaggingCommand();
  var GetBucketVersioningCommand_1 = require_GetBucketVersioningCommand();
  var GetBucketWebsiteCommand_1 = require_GetBucketWebsiteCommand();
  var GetObjectAclCommand_1 = require_GetObjectAclCommand();
  var GetObjectCommand_1 = require_GetObjectCommand();
  var GetObjectLegalHoldCommand_1 = require_GetObjectLegalHoldCommand();
  var GetObjectLockConfigurationCommand_1 = require_GetObjectLockConfigurationCommand();
  var GetObjectRetentionCommand_1 = require_GetObjectRetentionCommand();
  var GetObjectTaggingCommand_1 = require_GetObjectTaggingCommand();
  var GetObjectTorrentCommand_1 = require_GetObjectTorrentCommand();
  var GetPublicAccessBlockCommand_1 = require_GetPublicAccessBlockCommand();
  var HeadBucketCommand_1 = require_HeadBucketCommand();
  var HeadObjectCommand_1 = require_HeadObjectCommand();
  var ListBucketAnalyticsConfigurationsCommand_1 = require_ListBucketAnalyticsConfigurationsCommand();
  var ListBucketIntelligentTieringConfigurationsCommand_1 = require_ListBucketIntelligentTieringConfigurationsCommand();
  var ListBucketInventoryConfigurationsCommand_1 = require_ListBucketInventoryConfigurationsCommand();
  var ListBucketMetricsConfigurationsCommand_1 = require_ListBucketMetricsConfigurationsCommand();
  var ListBucketsCommand_1 = require_ListBucketsCommand();
  var ListMultipartUploadsCommand_1 = require_ListMultipartUploadsCommand();
  var ListObjectVersionsCommand_1 = require_ListObjectVersionsCommand();
  var ListObjectsCommand_1 = require_ListObjectsCommand();
  var ListObjectsV2Command_1 = require_ListObjectsV2Command();
  var ListPartsCommand_1 = require_ListPartsCommand();
  var PutBucketAccelerateConfigurationCommand_1 = require_PutBucketAccelerateConfigurationCommand();
  var PutBucketAclCommand_1 = require_PutBucketAclCommand();
  var PutBucketAnalyticsConfigurationCommand_1 = require_PutBucketAnalyticsConfigurationCommand();
  var PutBucketCorsCommand_1 = require_PutBucketCorsCommand();
  var PutBucketEncryptionCommand_1 = require_PutBucketEncryptionCommand();
  var PutBucketIntelligentTieringConfigurationCommand_1 = require_PutBucketIntelligentTieringConfigurationCommand();
  var PutBucketInventoryConfigurationCommand_1 = require_PutBucketInventoryConfigurationCommand();
  var PutBucketLifecycleConfigurationCommand_1 = require_PutBucketLifecycleConfigurationCommand();
  var PutBucketLoggingCommand_1 = require_PutBucketLoggingCommand();
  var PutBucketMetricsConfigurationCommand_1 = require_PutBucketMetricsConfigurationCommand();
  var PutBucketNotificationConfigurationCommand_1 = require_PutBucketNotificationConfigurationCommand();
  var PutBucketOwnershipControlsCommand_1 = require_PutBucketOwnershipControlsCommand();
  var PutBucketPolicyCommand_1 = require_PutBucketPolicyCommand();
  var PutBucketReplicationCommand_1 = require_PutBucketReplicationCommand();
  var PutBucketRequestPaymentCommand_1 = require_PutBucketRequestPaymentCommand();
  var PutBucketTaggingCommand_1 = require_PutBucketTaggingCommand();
  var PutBucketVersioningCommand_1 = require_PutBucketVersioningCommand();
  var PutBucketWebsiteCommand_1 = require_PutBucketWebsiteCommand();
  var PutObjectAclCommand_1 = require_PutObjectAclCommand();
  var PutObjectCommand_1 = require_PutObjectCommand();
  var PutObjectLegalHoldCommand_1 = require_PutObjectLegalHoldCommand();
  var PutObjectLockConfigurationCommand_1 = require_PutObjectLockConfigurationCommand();
  var PutObjectRetentionCommand_1 = require_PutObjectRetentionCommand();
  var PutObjectTaggingCommand_1 = require_PutObjectTaggingCommand();
  var PutPublicAccessBlockCommand_1 = require_PutPublicAccessBlockCommand();
  var RestoreObjectCommand_1 = require_RestoreObjectCommand();
  var SelectObjectContentCommand_1 = require_SelectObjectContentCommand();
  var UploadPartCommand_1 = require_UploadPartCommand();
  var UploadPartCopyCommand_1 = require_UploadPartCopyCommand();
  var S3 = class extends S3Client_1.S3Client {
    abortMultipartUpload(args, optionsOrCb, cb) {
      const command = new AbortMultipartUploadCommand_1.AbortMultipartUploadCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    completeMultipartUpload(args, optionsOrCb, cb) {
      const command = new CompleteMultipartUploadCommand_1.CompleteMultipartUploadCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    copyObject(args, optionsOrCb, cb) {
      const command = new CopyObjectCommand_1.CopyObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    createBucket(args, optionsOrCb, cb) {
      const command = new CreateBucketCommand_1.CreateBucketCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    createMultipartUpload(args, optionsOrCb, cb) {
      const command = new CreateMultipartUploadCommand_1.CreateMultipartUploadCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucket(args, optionsOrCb, cb) {
      const command = new DeleteBucketCommand_1.DeleteBucketCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
      const command = new DeleteBucketAnalyticsConfigurationCommand_1.DeleteBucketAnalyticsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketCors(args, optionsOrCb, cb) {
      const command = new DeleteBucketCorsCommand_1.DeleteBucketCorsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketEncryption(args, optionsOrCb, cb) {
      const command = new DeleteBucketEncryptionCommand_1.DeleteBucketEncryptionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
      const command = new DeleteBucketIntelligentTieringConfigurationCommand_1.DeleteBucketIntelligentTieringConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketInventoryConfiguration(args, optionsOrCb, cb) {
      const command = new DeleteBucketInventoryConfigurationCommand_1.DeleteBucketInventoryConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketLifecycle(args, optionsOrCb, cb) {
      const command = new DeleteBucketLifecycleCommand_1.DeleteBucketLifecycleCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketMetricsConfiguration(args, optionsOrCb, cb) {
      const command = new DeleteBucketMetricsConfigurationCommand_1.DeleteBucketMetricsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketOwnershipControls(args, optionsOrCb, cb) {
      const command = new DeleteBucketOwnershipControlsCommand_1.DeleteBucketOwnershipControlsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketPolicy(args, optionsOrCb, cb) {
      const command = new DeleteBucketPolicyCommand_1.DeleteBucketPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketReplication(args, optionsOrCb, cb) {
      const command = new DeleteBucketReplicationCommand_1.DeleteBucketReplicationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketTagging(args, optionsOrCb, cb) {
      const command = new DeleteBucketTaggingCommand_1.DeleteBucketTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteBucketWebsite(args, optionsOrCb, cb) {
      const command = new DeleteBucketWebsiteCommand_1.DeleteBucketWebsiteCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteObject(args, optionsOrCb, cb) {
      const command = new DeleteObjectCommand_1.DeleteObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteObjects(args, optionsOrCb, cb) {
      const command = new DeleteObjectsCommand_1.DeleteObjectsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deleteObjectTagging(args, optionsOrCb, cb) {
      const command = new DeleteObjectTaggingCommand_1.DeleteObjectTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    deletePublicAccessBlock(args, optionsOrCb, cb) {
      const command = new DeletePublicAccessBlockCommand_1.DeletePublicAccessBlockCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketAccelerateConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketAccelerateConfigurationCommand_1.GetBucketAccelerateConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketAcl(args, optionsOrCb, cb) {
      const command = new GetBucketAclCommand_1.GetBucketAclCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketAnalyticsConfigurationCommand_1.GetBucketAnalyticsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketCors(args, optionsOrCb, cb) {
      const command = new GetBucketCorsCommand_1.GetBucketCorsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketEncryption(args, optionsOrCb, cb) {
      const command = new GetBucketEncryptionCommand_1.GetBucketEncryptionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketIntelligentTieringConfigurationCommand_1.GetBucketIntelligentTieringConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketInventoryConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketInventoryConfigurationCommand_1.GetBucketInventoryConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketLifecycleConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketLifecycleConfigurationCommand_1.GetBucketLifecycleConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketLocation(args, optionsOrCb, cb) {
      const command = new GetBucketLocationCommand_1.GetBucketLocationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketLogging(args, optionsOrCb, cb) {
      const command = new GetBucketLoggingCommand_1.GetBucketLoggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketMetricsConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketMetricsConfigurationCommand_1.GetBucketMetricsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketNotificationConfiguration(args, optionsOrCb, cb) {
      const command = new GetBucketNotificationConfigurationCommand_1.GetBucketNotificationConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketOwnershipControls(args, optionsOrCb, cb) {
      const command = new GetBucketOwnershipControlsCommand_1.GetBucketOwnershipControlsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketPolicy(args, optionsOrCb, cb) {
      const command = new GetBucketPolicyCommand_1.GetBucketPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketPolicyStatus(args, optionsOrCb, cb) {
      const command = new GetBucketPolicyStatusCommand_1.GetBucketPolicyStatusCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketReplication(args, optionsOrCb, cb) {
      const command = new GetBucketReplicationCommand_1.GetBucketReplicationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketRequestPayment(args, optionsOrCb, cb) {
      const command = new GetBucketRequestPaymentCommand_1.GetBucketRequestPaymentCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketTagging(args, optionsOrCb, cb) {
      const command = new GetBucketTaggingCommand_1.GetBucketTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketVersioning(args, optionsOrCb, cb) {
      const command = new GetBucketVersioningCommand_1.GetBucketVersioningCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getBucketWebsite(args, optionsOrCb, cb) {
      const command = new GetBucketWebsiteCommand_1.GetBucketWebsiteCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObject(args, optionsOrCb, cb) {
      const command = new GetObjectCommand_1.GetObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectAcl(args, optionsOrCb, cb) {
      const command = new GetObjectAclCommand_1.GetObjectAclCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectLegalHold(args, optionsOrCb, cb) {
      const command = new GetObjectLegalHoldCommand_1.GetObjectLegalHoldCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectLockConfiguration(args, optionsOrCb, cb) {
      const command = new GetObjectLockConfigurationCommand_1.GetObjectLockConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectRetention(args, optionsOrCb, cb) {
      const command = new GetObjectRetentionCommand_1.GetObjectRetentionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectTagging(args, optionsOrCb, cb) {
      const command = new GetObjectTaggingCommand_1.GetObjectTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getObjectTorrent(args, optionsOrCb, cb) {
      const command = new GetObjectTorrentCommand_1.GetObjectTorrentCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    getPublicAccessBlock(args, optionsOrCb, cb) {
      const command = new GetPublicAccessBlockCommand_1.GetPublicAccessBlockCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    headBucket(args, optionsOrCb, cb) {
      const command = new HeadBucketCommand_1.HeadBucketCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    headObject(args, optionsOrCb, cb) {
      const command = new HeadObjectCommand_1.HeadObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listBucketAnalyticsConfigurations(args, optionsOrCb, cb) {
      const command = new ListBucketAnalyticsConfigurationsCommand_1.ListBucketAnalyticsConfigurationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listBucketIntelligentTieringConfigurations(args, optionsOrCb, cb) {
      const command = new ListBucketIntelligentTieringConfigurationsCommand_1.ListBucketIntelligentTieringConfigurationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listBucketInventoryConfigurations(args, optionsOrCb, cb) {
      const command = new ListBucketInventoryConfigurationsCommand_1.ListBucketInventoryConfigurationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listBucketMetricsConfigurations(args, optionsOrCb, cb) {
      const command = new ListBucketMetricsConfigurationsCommand_1.ListBucketMetricsConfigurationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listBuckets(args, optionsOrCb, cb) {
      const command = new ListBucketsCommand_1.ListBucketsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listMultipartUploads(args, optionsOrCb, cb) {
      const command = new ListMultipartUploadsCommand_1.ListMultipartUploadsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listObjects(args, optionsOrCb, cb) {
      const command = new ListObjectsCommand_1.ListObjectsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listObjectsV2(args, optionsOrCb, cb) {
      const command = new ListObjectsV2Command_1.ListObjectsV2Command(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listObjectVersions(args, optionsOrCb, cb) {
      const command = new ListObjectVersionsCommand_1.ListObjectVersionsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    listParts(args, optionsOrCb, cb) {
      const command = new ListPartsCommand_1.ListPartsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketAccelerateConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketAccelerateConfigurationCommand_1.PutBucketAccelerateConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketAcl(args, optionsOrCb, cb) {
      const command = new PutBucketAclCommand_1.PutBucketAclCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketAnalyticsConfigurationCommand_1.PutBucketAnalyticsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketCors(args, optionsOrCb, cb) {
      const command = new PutBucketCorsCommand_1.PutBucketCorsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketEncryption(args, optionsOrCb, cb) {
      const command = new PutBucketEncryptionCommand_1.PutBucketEncryptionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketIntelligentTieringConfigurationCommand_1.PutBucketIntelligentTieringConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketInventoryConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketInventoryConfigurationCommand_1.PutBucketInventoryConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketLifecycleConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketLifecycleConfigurationCommand_1.PutBucketLifecycleConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketLogging(args, optionsOrCb, cb) {
      const command = new PutBucketLoggingCommand_1.PutBucketLoggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketMetricsConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketMetricsConfigurationCommand_1.PutBucketMetricsConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketNotificationConfiguration(args, optionsOrCb, cb) {
      const command = new PutBucketNotificationConfigurationCommand_1.PutBucketNotificationConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketOwnershipControls(args, optionsOrCb, cb) {
      const command = new PutBucketOwnershipControlsCommand_1.PutBucketOwnershipControlsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketPolicy(args, optionsOrCb, cb) {
      const command = new PutBucketPolicyCommand_1.PutBucketPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketReplication(args, optionsOrCb, cb) {
      const command = new PutBucketReplicationCommand_1.PutBucketReplicationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketRequestPayment(args, optionsOrCb, cb) {
      const command = new PutBucketRequestPaymentCommand_1.PutBucketRequestPaymentCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketTagging(args, optionsOrCb, cb) {
      const command = new PutBucketTaggingCommand_1.PutBucketTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketVersioning(args, optionsOrCb, cb) {
      const command = new PutBucketVersioningCommand_1.PutBucketVersioningCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putBucketWebsite(args, optionsOrCb, cb) {
      const command = new PutBucketWebsiteCommand_1.PutBucketWebsiteCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObject(args, optionsOrCb, cb) {
      const command = new PutObjectCommand_1.PutObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObjectAcl(args, optionsOrCb, cb) {
      const command = new PutObjectAclCommand_1.PutObjectAclCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObjectLegalHold(args, optionsOrCb, cb) {
      const command = new PutObjectLegalHoldCommand_1.PutObjectLegalHoldCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObjectLockConfiguration(args, optionsOrCb, cb) {
      const command = new PutObjectLockConfigurationCommand_1.PutObjectLockConfigurationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObjectRetention(args, optionsOrCb, cb) {
      const command = new PutObjectRetentionCommand_1.PutObjectRetentionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putObjectTagging(args, optionsOrCb, cb) {
      const command = new PutObjectTaggingCommand_1.PutObjectTaggingCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    putPublicAccessBlock(args, optionsOrCb, cb) {
      const command = new PutPublicAccessBlockCommand_1.PutPublicAccessBlockCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    restoreObject(args, optionsOrCb, cb) {
      const command = new RestoreObjectCommand_1.RestoreObjectCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    selectObjectContent(args, optionsOrCb, cb) {
      const command = new SelectObjectContentCommand_1.SelectObjectContentCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    uploadPart(args, optionsOrCb, cb) {
      const command = new UploadPartCommand_1.UploadPartCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
    uploadPartCopy(args, optionsOrCb, cb) {
      const command = new UploadPartCopyCommand_1.UploadPartCopyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    }
  };
  exports2.S3 = S3;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/pagination/ListObjectsV2Paginator.js
var require_ListObjectsV2Paginator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.paginateListObjectsV2 = void 0;
  var S3_1 = require_S3();
  var S3Client_1 = require_S3Client();
  var ListObjectsV2Command_1 = require_ListObjectsV2Command();
  var makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new ListObjectsV2Command_1.ListObjectsV2Command(input), ...args);
  };
  var makePagedRequest = async (client, input, ...args) => {
    return await client.listObjectsV2(input, ...args);
  };
  async function* paginateListObjectsV2(config, input, ...additionalArguments) {
    let token = config.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input.ContinuationToken = token;
      input["MaxKeys"] = config.pageSize;
      if (config.client instanceof S3_1.S3) {
        page = await makePagedRequest(config.client, input, ...additionalArguments);
      } else if (config.client instanceof S3Client_1.S3Client) {
        page = await makePagedClientRequest(config.client, input, ...additionalArguments);
      } else {
        throw new Error("Invalid client, expected S3 | S3Client");
      }
      yield page;
      token = page.NextContinuationToken;
      hasNext = !!token;
    }
    return void 0;
  }
  exports2.paginateListObjectsV2 = paginateListObjectsV2;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/pagination/ListPartsPaginator.js
var require_ListPartsPaginator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.paginateListParts = void 0;
  var S3_1 = require_S3();
  var S3Client_1 = require_S3Client();
  var ListPartsCommand_1 = require_ListPartsCommand();
  var makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new ListPartsCommand_1.ListPartsCommand(input), ...args);
  };
  var makePagedRequest = async (client, input, ...args) => {
    return await client.listParts(input, ...args);
  };
  async function* paginateListParts(config, input, ...additionalArguments) {
    let token = config.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input.PartNumberMarker = token;
      input["MaxParts"] = config.pageSize;
      if (config.client instanceof S3_1.S3) {
        page = await makePagedRequest(config.client, input, ...additionalArguments);
      } else if (config.client instanceof S3Client_1.S3Client) {
        page = await makePagedClientRequest(config.client, input, ...additionalArguments);
      } else {
        throw new Error("Invalid client, expected S3 | S3Client");
      }
      yield page;
      token = page.NextPartNumberMarker;
      hasNext = !!token;
    }
    return void 0;
  }
  exports2.paginateListParts = paginateListParts;
});

// node_modules/@aws-sdk/client-s3/dist/cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// node_modules/@aws-sdk/client-s3/dist/cjs/models/index.js
var require_models = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  tslib_1.__exportStar(require_models_0(), exports2);
  tslib_1.__exportStar(require_models_1(), exports2);
});

// node_modules/@aws-sdk/client-s3/dist/cjs/index.js
var require_cjs48 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  tslib_1.__exportStar(require_S3Client(), exports2);
  tslib_1.__exportStar(require_S3(), exports2);
  tslib_1.__exportStar(require_AbortMultipartUploadCommand(), exports2);
  tslib_1.__exportStar(require_CompleteMultipartUploadCommand(), exports2);
  tslib_1.__exportStar(require_CopyObjectCommand(), exports2);
  tslib_1.__exportStar(require_CreateBucketCommand(), exports2);
  tslib_1.__exportStar(require_CreateMultipartUploadCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketAnalyticsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketCorsCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketEncryptionCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketIntelligentTieringConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketInventoryConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketLifecycleCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketMetricsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketOwnershipControlsCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketPolicyCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketReplicationCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketTaggingCommand(), exports2);
  tslib_1.__exportStar(require_DeleteBucketWebsiteCommand(), exports2);
  tslib_1.__exportStar(require_DeleteObjectCommand(), exports2);
  tslib_1.__exportStar(require_DeleteObjectsCommand(), exports2);
  tslib_1.__exportStar(require_DeleteObjectTaggingCommand(), exports2);
  tslib_1.__exportStar(require_DeletePublicAccessBlockCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketAccelerateConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketAclCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketAnalyticsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketCorsCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketEncryptionCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketIntelligentTieringConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketInventoryConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketLifecycleConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketLocationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketLoggingCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketMetricsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketNotificationConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketOwnershipControlsCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketPolicyCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketPolicyStatusCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketReplicationCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketRequestPaymentCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketTaggingCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketVersioningCommand(), exports2);
  tslib_1.__exportStar(require_GetBucketWebsiteCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectAclCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectLegalHoldCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectLockConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectRetentionCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectTaggingCommand(), exports2);
  tslib_1.__exportStar(require_GetObjectTorrentCommand(), exports2);
  tslib_1.__exportStar(require_GetPublicAccessBlockCommand(), exports2);
  tslib_1.__exportStar(require_HeadBucketCommand(), exports2);
  tslib_1.__exportStar(require_HeadObjectCommand(), exports2);
  tslib_1.__exportStar(require_ListBucketAnalyticsConfigurationsCommand(), exports2);
  tslib_1.__exportStar(require_ListBucketIntelligentTieringConfigurationsCommand(), exports2);
  tslib_1.__exportStar(require_ListBucketInventoryConfigurationsCommand(), exports2);
  tslib_1.__exportStar(require_ListBucketMetricsConfigurationsCommand(), exports2);
  tslib_1.__exportStar(require_ListBucketsCommand(), exports2);
  tslib_1.__exportStar(require_ListMultipartUploadsCommand(), exports2);
  tslib_1.__exportStar(require_ListObjectsCommand(), exports2);
  tslib_1.__exportStar(require_ListObjectsV2Command(), exports2);
  tslib_1.__exportStar(require_ListObjectsV2Paginator(), exports2);
  tslib_1.__exportStar(require_ListObjectVersionsCommand(), exports2);
  tslib_1.__exportStar(require_ListPartsCommand(), exports2);
  tslib_1.__exportStar(require_ListPartsPaginator(), exports2);
  tslib_1.__exportStar(require_PutBucketAccelerateConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketAclCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketAnalyticsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketCorsCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketEncryptionCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketIntelligentTieringConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketInventoryConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketLifecycleConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketLoggingCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketMetricsConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketNotificationConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketOwnershipControlsCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketPolicyCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketReplicationCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketRequestPaymentCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketTaggingCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketVersioningCommand(), exports2);
  tslib_1.__exportStar(require_PutBucketWebsiteCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectAclCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectLegalHoldCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectLockConfigurationCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectRetentionCommand(), exports2);
  tslib_1.__exportStar(require_PutObjectTaggingCommand(), exports2);
  tslib_1.__exportStar(require_PutPublicAccessBlockCommand(), exports2);
  tslib_1.__exportStar(require_RestoreObjectCommand(), exports2);
  tslib_1.__exportStar(require_SelectObjectContentCommand(), exports2);
  tslib_1.__exportStar(require_UploadPartCommand(), exports2);
  tslib_1.__exportStar(require_UploadPartCopyCommand(), exports2);
  tslib_1.__exportStar(require_Interfaces(), exports2);
  tslib_1.__exportStar(require_models(), exports2);
});

// node_modules/@aws-sdk/s3-request-presigner/node_modules/tslib/tslib.js
var require_tslib27 = __commonJS((exports2, module2) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module2 === "object" && typeof module2.exports === "object") {
      factory(createExporter(root, createExporter(module2.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {value: op[1], done: false};
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/s3-request-presigner/dist/cjs/constants.js
var require_constants6 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ALGORITHM_IDENTIFIER = exports2.HOST_HEADER = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = exports2.SHA256_HEADER = exports2.UNSIGNED_PAYLOAD = void 0;
  exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  exports2.SHA256_HEADER = "X-Amz-Content-Sha256";
  exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
  exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
  exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
  exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
  exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
  exports2.HOST_HEADER = "host";
  exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
});

// node_modules/@aws-sdk/s3-request-presigner/dist/cjs/presigner.js
var require_presigner = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.S3RequestPresigner = void 0;
  var signature_v4_1 = require_cjs38();
  var constants_1 = require_constants6();
  var S3RequestPresigner2 = class {
    constructor(options) {
      const resolvedOptions = {
        service: options.signingName || options.service || "s3",
        uriEscapePath: options.uriEscapePath || false,
        ...options
      };
      this.signer = new signature_v4_1.SignatureV4(resolvedOptions);
    }
    async presign(requestToSign, {unsignableHeaders = new Set(), unhoistableHeaders = new Set(), ...options} = {}) {
      unsignableHeaders.add("content-type");
      Object.keys(requestToSign.headers).map((header) => header.toLowerCase()).filter((header) => header.startsWith("x-amz-server-side-encryption")).forEach((header) => {
        unhoistableHeaders.add(header);
      });
      requestToSign.headers[constants_1.SHA256_HEADER] = constants_1.UNSIGNED_PAYLOAD;
      return this.signer.presign(requestToSign, {
        expiresIn: 900,
        unsignableHeaders,
        unhoistableHeaders,
        ...options
      });
    }
  };
  exports2.S3RequestPresigner = S3RequestPresigner2;
});

// node_modules/@aws-sdk/util-format-url/dist/cjs/index.js
var require_cjs49 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.formatUrl = void 0;
  var querystring_builder_1 = require_cjs24();
  function formatUrl2(request) {
    const {port, query} = request;
    let {protocol, path, hostname} = request;
    if (protocol && protocol.substr(-1) !== ":") {
      protocol += ":";
    }
    if (port) {
      hostname += `:${port}`;
    }
    if (path && path.charAt(0) !== "/") {
      path = `/${path}`;
    }
    let queryString = query ? querystring_builder_1.buildQueryString(query) : "";
    if (queryString && queryString[0] !== "?") {
      queryString = `?${queryString}`;
    }
    return `${protocol}//${hostname}${path}${queryString}`;
  }
  exports2.formatUrl = formatUrl2;
});

// node_modules/@aws-sdk/s3-request-presigner/dist/cjs/getSignedUrl.js
var require_getSignedUrl = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSignedUrl = void 0;
  var protocol_http_1 = require_cjs17();
  var util_format_url_1 = require_cjs49();
  var presigner_1 = require_presigner();
  var getSignedUrl = async (client, command, options = {}) => {
    const s3Presigner = new presigner_1.S3RequestPresigner({...client.config});
    const presignInterceptMiddleware = (next, context) => async (args) => {
      var _a, _b;
      const {request} = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) {
        throw new Error("Request to be presigned is not an valid HTTP request.");
      }
      delete request.headers["amz-sdk-invocation-id"];
      delete request.headers["amz-sdk-request"];
      const presigned2 = await s3Presigner.presign(request, {
        ...options,
        signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"],
        signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"]
      });
      return {
        response: {},
        output: {
          $metadata: {httpStatusCode: 200},
          presigned: presigned2
        }
      };
    };
    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
      name: "presignInterceptMiddleware",
      relation: "before",
      toMiddleware: "awsAuthMiddleware"
    });
    let presigned;
    try {
      const output = await client.send(command);
      presigned = output.presigned;
    } finally {
      client.middlewareStack.remove("presignInterceptMiddleware");
    }
    return util_format_url_1.formatUrl(presigned);
  };
  exports2.getSignedUrl = getSignedUrl;
});

// node_modules/@aws-sdk/s3-request-presigner/dist/cjs/index.js
var require_cjs50 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib27();
  tslib_1.__exportStar(require_presigner(), exports2);
  tslib_1.__exportStar(require_getSignedUrl(), exports2);
});

// node_modules/@aws-sdk/util-create-request/dist/cjs/index.js
var require_cjs51 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createRequest = void 0;
  async function createRequest2(client, command) {
    const interceptMiddleware = (next) => async (args) => {
      return {output: {request: args.request}, response: void 0};
    };
    const clientStack = client.middlewareStack.clone();
    clientStack.add(interceptMiddleware, {
      step: "build",
      priority: "low"
    });
    const handler = command.resolveMiddleware(clientStack, client.config, void 0);
    return await handler(command).then((output) => output.output.request);
  }
  exports2.createRequest = createRequest2;
});

// lambdaFunction.js
require_es6_promise().polyfill();
require_fetch_npm_node();
var uuid = require_uuid();
var {S3Client, PutObjectCommand} = require_cjs48();
var {S3RequestPresigner} = require_cjs50();
var {createRequest} = require_cjs51();
var {formatUrl} = require_cjs49();
var EXPIRATION = 60 * 60 * 1e3;
var REGION = "eu-west-2";
var MOVIE_BUCKET = "calendar-video-bucket";
var s3Client = new S3Client(REGION);
var signer = new S3RequestPresigner({...s3Client.config});
function createSignedUploadUrl(bucket, uploadKey) {
  console.log("Creating signed url");
  return createRequest(s3Client, new PutObjectCommand({
    Key: uploadKey,
    Bucket: bucket
  })).then((request) => {
    console.log("Created request", request);
    const expiration = new Date(Date.now() + EXPIRATION);
    console.log("Creating presigned URL");
    return signer.presign(request, expiration);
  }).then((unformattedUrl) => {
    console.log("Formatting presigned URL");
    return formatUrl(unformattedUrl);
  });
}
exports.handler = async (event) => {
  console.log("Incoming request");
  const uploadKey = "uploads/" + uuid.v4();
  const signedUrl = await createSignedUploadUrl(MOVIE_BUCKET, uploadKey);
  console.log("signed url", signedUrl);
  const response = {
    statusCode: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Headers": "Content-Type",
      "Access-Control-Allow-Methods": "OPTIONS,GET"
    },
    body: JSON.stringify({uploadUrl: signedUrl})
  };
  console.log("Final response", JSON.stringify(response));
  return response;
};
